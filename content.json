{"meta":{"title":"Justbilt","subtitle":"A game developer","description":"A game developer","author":"justbilt","url":"http://blog.justbilt.com"},"pages":[{"title":"","date":"2015-09-06T07:47:39.000Z","updated":"2015-09-06T07:47:39.000Z","comments":true,"path":"404.html","permalink":"http://blog.justbilt.com/404.html","excerpt":"","text":"Page not found (404) - Disqus var totalCount = 8; function ChangeIt() { var num = Math.ceil( Math.random() * totalCount ); document.body.background = '//media.disquscdn.com/errors/img/'+num+'.gif'; document.body.style.backgroundRepeat = \"repeat\";// Background repeat } window.onload = ChangeIt; html { width: 100%; height: 100%; } body { position: relative; width: 100%; height: 100%; margin: 0; padding: 0; font-family: 'Source Sans Pro', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-weight: 400; -webkit-font-smoothing: antialiased; -webkit-background-size: cover; -moz-background-size: cover; -o-background-size: cover; background-size: cover; background-repeat: no-repeat; } body:before { position: absolute; top: 0; left: 0; right: 0; z-index: -1; width: 100%; height: 700px; content: \"\"; background: transparent; background-size: cover; } .global-header { width: 650px; margin: 0 auto; padding: 250px 0 50px 0; background: transparent; font-size: 16px; } .global-nav { text-align: center; } .logo { width:150px; margin: 0 auto; display: block; margin-top: 250px; margin-bottom: 50px; } ul { display: none; } .error-content { -moz-box-sizing: border-box; -webkit-box-sizing: border-box; box-sizing: border-box; line-height:24px; color:#55595d; width:500px; display: block; margin: 0 auto; background: rgba(255,255,255, 0.8); padding: 30px 40px; } h1 { text-align: center; margin-bottom: 30px; color:#546673; font-size: 24px; font-weight: 600; } a { color: #208be6; text-decoration: none; } a:hover { text-decoration: underline; } footer, .global-footer{ display: none; } Uh oh... Something didn't work. This page doesn't seem to exist. You might have followed a bad link or mistyped the address, feel free to try again. Alternatively, you can return to the home page."},{"title":"关于","date":"2017-04-09T11:31:24.000Z","updated":"2017-04-09T11:31:24.000Z","comments":true,"path":"about/index.html","permalink":"http://blog.justbilt.com/about/index.html","excerpt":"","text":"我是 bilt, 发音应该类似于 “biu油特” , 这个单词最开始是我自造的, 现在如果你词典去查的话, 会有一个 总胆红素 的意思. 因为这个单词比较短, 所以我一般会在前面加一个 just , 这样合起来就是 justbilt 了."},{"title":"","date":"2017-04-09T11:25:40.000Z","updated":"2017-04-09T11:25:40.000Z","comments":true,"path":"assets/comment.css","permalink":"http://blog.justbilt.com/assets/comment.css","excerpt":"","text":".gitment-container { font-family: sans-serif; font-size: 14px; line-height: 1.5; color: #333; word-wrap: break-word; } .gitment-container * { box-sizing: border-box; } .gitment-container *:disabled { cursor: not-allowed; } .gitment-container a, .gitment-container a:visited { cursor: pointer; text-decoration: none; } .gitment-container a:hover { text-decoration: underline; } .gitment-container .gitment-hidden { display: none; } .gitment-container .gitment-spinner-icon { fill: #333; -webkit-animation: gitment-spin 1s steps(12) infinite; animation: gitment-spin 1s steps(12) infinite; } @-webkit-keyframes gitment-spin { 100% { -webkit-transform: rotate(360deg); transform: rotate(360deg) } } @keyframes gitment-spin { 100% { -webkit-transform: rotate(360deg); transform: rotate(360deg) } } .gitment-root-container { margin: 19px 0; } .gitment-header-container { margin: 19px 0; } .gitment-header-like-btn, .gitment-comment-like-btn { cursor: pointer; } .gitment-comment-like-btn { float: right; } .gitment-comment-like-btn.liked { color: #F44336; } .gitment-header-like-btn svg { vertical-align: middle; height: 30px; } .gitment-comment-like-btn svg { vertical-align: middle; height: 20px; } .gitment-header-like-btn.liked svg, .gitment-comment-like-btn.liked svg { fill: #F44336; } a.gitment-header-issue-link, a.gitment-header-issue-link:visited { float: right; line-height: 30px; color: #666; } a.gitment-header-issue-link:hover { color: #666; } .gitment-comments-loading, .gitment-comments-error, .gitment-comments-empty { text-align: center; margin: 50px 0; } .gitment-comments-list { list-style: none; padding-left: 0; margin: 0 0 38px; } .gitment-comment, .gitment-editor-container { position: relative; min-height: 60px; padding-left: 60px; margin: 19px 0; } .gitment-comment-avatar, .gitment-editor-avatar { float: left; margin-left: -60px; } .gitment-comment-avatar, .gitment-comment-avatar-img, .gitment-comment-avatar, .gitment-editor-avatar-img, .gitment-editor-avatar svg { width: 44px; height: 44px; border-radius: 3px; } .gitment-editor-avatar .gitment-github-icon { fill: #fff; background-color: #333; } .gitment-comment-main, .gitment-editor-main { position: relative; border: 1px solid #111; border-radius: 0; } .gitment-editor-main::before, .gitment-editor-main::after, .gitment-comment-main::before, .gitment-comment-main::after { position: absolute; top: 11px; left: -16px; display: block; width: 0; height: 0; pointer-events: none; content: \"\"; border-color: transparent; border-style: solid solid outset; } .gitment-editor-main::before, .gitment-comment-main::before { border-width: 8px; border-right-color: #111; } .gitment-editor-main::after, .gitment-comment-main::after { margin-top: 1px; margin-left: 2px; border-width: 7px; border-right-color: #fff; } .gitment-comment-header { margin: 12px 15px; color: #666; /*background-color: #fff;*/ border-radius: 3px; } .gitment-editor-header { padding: 0; margin: 0; border-bottom: 1px solid #111; } a.gitment-comment-name, a.gitment-comment-name:visited { font-weight: 600; color: #666; } .gitment-editor-tabs { margin-bottom: -1px; margin-left: -1px; } .gitment-editor-tab { display: inline-block; padding: 11px 12px; font-size: 14px; line-height: 20px; color: #666; text-decoration: none; background-color: transparent; border-width: 0 1px; border-style: solid; border-color: transparent; border-radius: 0; white-space: nowrap; cursor: pointer; user-select: none; outline: none; } .gitment-editor-tab.gitment-selected { color: #333; background-color: #fff; border-color: #111; } .gitment-editor-login { float: right; margin-top: -30px; margin-right: 15px; } a.gitment-footer-project-link, a.gitment-footer-project-link:visited, a.gitment-editor-login-link, a.gitment-editor-login-link:visited { color: #2196F3; } a.gitment-editor-logout-link, a.gitment-editor-logout-link:visited { color: #666; } a.gitment-editor-logout-link:hover { color: #2196F3; text-decoration: none; } .gitment-comment-body { position: relative; margin: 12px 15px; overflow: hidden; border-radius: 3px; } .gitment-comment-body-folded { cursor: pointer; } .gitment-comment-body-folded::before { display: block !important; content: \"\"; position: absolute; width: 100%; left: 0; top: 0; bottom: 50px; pointer-events: none; background: -webkit-linear-gradient(top, rgba(255, 255, 255, 0), rgba(255, 255, 255, .9)); background: linear-gradient(180deg, rgba(255, 255, 255, 0), rgba(255, 255, 255, .9)); } .gitment-comment-body-folded::after { display: block !important; content: \"Click to Expand\" !important; text-align: center; color: #666; position: absolute; width: 100%; height: 50px; line-height: 50px; left: 0; bottom: 0; pointer-events: none; background: rgba(255, 255, 255, .9); } .gitment-editor-body { margin: 0; } .gitment-comment-body > *:first-child, .gitment-editor-preview > *:first-child { margin-top: 0 !important; } .gitment-comment-body > *:last-child, .gitment-editor-preview > *:last-child { margin-bottom: 0 !important; } .gitment-editor-body textarea { display: block; width: 100%; min-height: 150px; max-height: 500px; padding: 16px; resize: vertical; max-width: 100%; margin: 0; font-size: 14px; line-height: 1.6; background-color: #fff; color: #333; vertical-align: middle; border: none; border-radius: 0; outline: none; box-shadow: none; overflow: visible; } .gitment-editor-body textarea:focus { background-color: #fff; } .gitment-editor-preview { min-height: 150px; padding: 16px; background-color: transparent; width: 100%; font-size: 14px; line-height: 1.5; word-wrap: break-word; } .gitment-editor-footer { padding: 0; margin-top: 10px; } .gitment-editor-footer::after { display: table; clear: both; content: \"\"; } a.gitment-editor-footer-tip { display: inline-block; padding-top: 10px; font-size: 12px; color: #666; } a.gitment-editor-footer-tip:hover { color: #2196F3; text-decoration: none; } .gitment-comments-pagination { list-style: none; text-align: right; border-radius: 0; margin: -19px 0 19px 0; } .gitment-comments-page-item { display: inline-block; cursor: pointer; border: 1px solid #111; margin-left: -1px; padding: .25rem .5rem; } .gitment-comments-page-item:hover { background-color: #f5f5f5; } .gitment-comments-page-item.gitment-selected { background-color: #f5f5f5; } .gitment-editor-submit, .gitment-comments-init-btn { color: #fff; background-color: #00BCD4; position: relative; display: inline-block; padding: 7px 13px; font-size: 14px; font-weight: 600; line-height: 20px; white-space: nowrap; vertical-align: middle; cursor: pointer; -webkit-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; background-size: 110% 110%; border: none; -webkit-appearance: none; -moz-appearance: none; appearance: none; } .gitment-editor-submit:hover, .gitment-comments-init-btn:hover { background-color: #00ACC1; } .gitment-comments-init-btn:disabled, .gitment-editor-submit:disabled { color: rgba(255,255,255,0.75); background-color: #4DD0E1; box-shadow: none; } .gitment-editor-submit { float: right; } .gitment-footer-container { margin-top: 30px; margin-bottom: 20px; text-align: right; font-size: 12px; } /* * Markdown CSS * Copied from https://github.com/sindresorhus/github-markdown-css */ .gitment-markdown { -ms-text-size-adjust: 100%; -webkit-text-size-adjust: 100%; line-height: 1.5; color: #333; font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"; font-size: 16px; line-height: 1.5; word-wrap: break-word; } .gitment-markdown .pl-c { color: #969896; } .gitment-markdown .pl-c1, .gitment-markdown .pl-s .pl-v { color: #0086b3; } .gitment-markdown .pl-e, .gitment-markdown .pl-en { color: #795da3; } .gitment-markdown .pl-smi, .gitment-markdown .pl-s .pl-s1 { color: #333; } .gitment-markdown .pl-ent { color: #63a35c; } .gitment-markdown .pl-k { color: #a71d5d; } .gitment-markdown .pl-s, .gitment-markdown .pl-pds, .gitment-markdown .pl-s .pl-pse .pl-s1, .gitment-markdown .pl-sr, .gitment-markdown .pl-sr .pl-cce, .gitment-markdown .pl-sr .pl-sre, .gitment-markdown .pl-sr .pl-sra { color: #183691; } .gitment-markdown .pl-v, .gitment-markdown .pl-smw { color: #ed6a43; } .gitment-markdown .pl-bu { color: #b52a1d; } .gitment-markdown .pl-ii { color: #f8f8f8; background-color: #b52a1d; } .gitment-markdown .pl-c2 { color: #f8f8f8; background-color: #b52a1d; } .gitment-markdown .pl-c2::before { content: \"^M\"; } .gitment-markdown .pl-sr .pl-cce { font-weight: bold; color: #63a35c; } .gitment-markdown .pl-ml { color: #693a17; } .gitment-markdown .pl-mh, .gitment-markdown .pl-mh .pl-en, .gitment-markdown .pl-ms { font-weight: bold; color: #1d3e81; } .gitment-markdown .pl-mq { color: #008080; } .gitment-markdown .pl-mi { font-style: italic; color: #333; } .gitment-markdown .pl-mb { font-weight: bold; color: #333; } .gitment-markdown .pl-md { color: #bd2c00; background-color: #ffecec; } .gitment-markdown .pl-mi1 { color: #55a532; background-color: #eaffea; } .gitment-markdown .pl-mc { color: #ef9700; background-color: #ffe3b4; } .gitment-markdown .pl-mi2 { color: #d8d8d8; background-color: #808080; } .gitment-markdown .pl-mdr { font-weight: bold; color: #795da3; } .gitment-markdown .pl-mo { color: #1d3e81; } .gitment-markdown .pl-ba { color: #595e62; } .gitment-markdown .pl-sg { color: #c0c0c0; } .gitment-markdown .pl-corl { text-decoration: underline; color: #183691; } .gitment-markdown .octicon { display: inline-block; vertical-align: text-top; fill: currentColor; } .gitment-markdown a { background-color: transparent; -webkit-text-decoration-skip: objects; } .gitment-markdown a:active, .gitment-markdown a:hover { outline-width: 0; } .gitment-markdown strong { font-weight: inherit; } .gitment-markdown strong { font-weight: bolder; } .gitment-markdown h1 { font-size: 2em; margin: 0.67em 0; } .gitment-markdown img { border-style: none; } .gitment-markdown svg:not(:root) { overflow: hidden; } .gitment-markdown code, .gitment-markdown kbd, .gitment-markdown pre { font-family: monospace, monospace; font-size: 1em; } .gitment-markdown hr { box-sizing: content-box; height: 0; overflow: visible; } .gitment-markdown input { font: inherit; margin: 0; } .gitment-markdown input { overflow: visible; } .gitment-markdown [type=\"checkbox\"] { box-sizing: border-box; padding: 0; } .gitment-markdown * { box-sizing: border-box; } .gitment-markdown input { font-family: inherit; font-size: inherit; line-height: inherit; } .content a { background-image: none; } .content a:hover { background-image: none; } .gitment-markdown a { color: #0366d6; text-decoration: none; } .gitment-markdown a:hover { text-decoration: underline; } .gitment-markdown strong { font-weight: 600; } .gitment-markdown hr { height: 0; margin: 15px 0; overflow: hidden; background: transparent; border: 0; border-bottom: 1px solid #dfe2e5; } .gitment-markdown hr::before { display: table; content: \"\"; } .gitment-markdown hr::after { display: table; clear: both; content: \"\"; } .gitment-markdown table { border-spacing: 0; border-collapse: collapse; } .gitment-markdown td, .gitment-markdown th { padding: 0; } .gitment-markdown h1, .gitment-markdown h2, .gitment-markdown h3, .gitment-markdown h4, .gitment-markdown h5, .gitment-markdown h6 { margin-top: 0; margin-bottom: 0; } .gitment-markdown h1 { font-size: 32px; font-weight: 600; } .gitment-markdown h2 { font-size: 24px; font-weight: 600; } .gitment-markdown h3 { font-size: 20px; font-weight: 600; } .gitment-markdown h4 { font-size: 16px; font-weight: 600; } .gitment-markdown h5 { font-size: 14px; font-weight: 600; } .gitment-markdown h6 { font-size: 12px; font-weight: 600; } .gitment-markdown p { margin-top: 0; margin-bottom: 10px; color: #c9cacc; } .gitment-markdown blockquote { margin: 0; } .gitment-markdown ul, .gitment-markdown ol { padding-left: 0; margin-top: 0; margin-bottom: 0; } .gitment-markdown ol ol, .gitment-markdown ul ol { list-style-type: lower-roman; } .gitment-markdown ul ul ol, .gitment-markdown ul ol ol, .gitment-markdown ol ul ol, .gitment-markdown ol ol ol { list-style-type: lower-alpha; } .gitment-markdown dd { margin-left: 0; } .gitment-markdown code { font-family: \"SFMono-Regular\", Consolas, \"Liberation Mono\", Menlo, Courier, monospace; font-size: 12px; } .gitment-markdown pre { margin-top: 0; margin-bottom: 0; font: 12px \"SFMono-Regular\", Consolas, \"Liberation Mono\", Menlo, Courier, monospace; } .gitment-markdown .octicon { vertical-align: text-bottom; } .gitment-markdown .pl-0 { padding-left: 0 !important; } .gitment-markdown .pl-1 { padding-left: 4px !important; } .gitment-markdown .pl-2 { padding-left: 8px !important; } .gitment-markdown .pl-3 { padding-left: 16px !important; } .gitment-markdown .pl-4 { padding-left: 24px !important; } .gitment-markdown .pl-5 { padding-left: 32px !important; } .gitment-markdown .pl-6 { padding-left: 40px !important; } .gitment-markdown::before { display: table; content: \"\"; } .gitment-markdown::after { display: table; clear: both; content: \"\"; } .gitment-markdown>*:first-child { margin-top: 0 !important; } .gitment-markdown>*:last-child { margin-bottom: 0 !important; } .gitment-markdown a:not([href]) { color: inherit; text-decoration: none; } .gitment-markdown .anchor { float: left; padding-right: 4px; margin-left: -20px; line-height: 1; } .gitment-markdown .anchor:focus { outline: none; } .gitment-markdown p, .gitment-markdown blockquote, .gitment-markdown ul, .gitment-markdown ol, .gitment-markdown dl, .gitment-markdown table, .gitment-markdown pre { margin-top: 0; margin-bottom: 16px; } .gitment-markdown hr { height: 0.25em; padding: 0; margin: 24px 0; background-color: #e1e4e8; border: 0; } .gitment-markdown blockquote { padding: 0 1em; color: #6a737d; border-left: 0.25em solid #dfe2e5; } .gitment-markdown blockquote>:first-child { margin-top: 0; } .gitment-markdown blockquote>:last-child { margin-bottom: 0; } .gitment-markdown kbd { display: inline-block; padding: 3px 5px; font-size: 11px; line-height: 10px; color: #444d56; vertical-align: middle; background-color: #fafbfc; border: solid 1px #c6cbd1; border-bottom-color: #959da5; border-radius: 0; box-shadow: inset 0 -1px 0 #959da5; } .gitment-markdown h1, .gitment-markdown h2, .gitment-markdown h3, .gitment-markdown h4, .gitment-markdown h5, .gitment-markdown h6 { margin-top: 24px; margin-bottom: 16px; font-weight: 600; line-height: 1.25; } .gitment-markdown h1 .octicon-link, .gitment-markdown h2 .octicon-link, .gitment-markdown h3 .octicon-link, .gitment-markdown h4 .octicon-link, .gitment-markdown h5 .octicon-link, .gitment-markdown h6 .octicon-link { color: #1b1f23; vertical-align: middle; visibility: hidden; } .gitment-markdown h1:hover .anchor, .gitment-markdown h2:hover .anchor, .gitment-markdown h3:hover .anchor, .gitment-markdown h4:hover .anchor, .gitment-markdown h5:hover .anchor, .gitment-markdown h6:hover .anchor { text-decoration: none; } .gitment-markdown h1:hover .anchor .octicon-link, .gitment-markdown h2:hover .anchor .octicon-link, .gitment-markdown h3:hover .anchor .octicon-link, .gitment-markdown h4:hover .anchor .octicon-link, .gitment-markdown h5:hover .anchor .octicon-link, .gitment-markdown h6:hover .anchor .octicon-link { visibility: visible; } .gitment-markdown h1 { padding-bottom: 0.3em; font-size: 2em; border-bottom: 1px solid #eaecef; } .gitment-markdown h2 { padding-bottom: 0.3em; font-size: 1.5em; border-bottom: 1px solid #eaecef; } .gitment-markdown h3 { font-size: 1.25em; } .gitment-markdown h4 { font-size: 1em; } .gitment-markdown h5 { font-size: 0.875em; } .gitment-markdown h6 { font-size: 0.85em; color: #6a737d; } .gitment-markdown ul, .gitment-markdown ol { padding-left: 2em; } .gitment-markdown ul ul, .gitment-markdown ul ol, .gitment-markdown ol ol, .gitment-markdown ol ul { margin-top: 0; margin-bottom: 0; } .gitment-markdown li>p { margin-top: 16px; } .gitment-markdown li+li { margin-top: 0.25em; } .gitment-markdown dl { padding: 0; } .gitment-markdown dl dt { padding: 0; margin-top: 16px; font-size: 1em; font-style: italic; font-weight: 600; } .gitment-markdown dl dd { padding: 0 16px; margin-bottom: 16px; } .gitment-markdown table { display: block; width: 100%; overflow: auto; } .gitment-markdown table th { font-weight: 600; } .gitment-markdown table th, .gitment-markdown table td { padding: 6px 13px; border: 1px solid #dfe2e5; } .gitment-markdown table tr { background-color: #fff; border-top: 1px solid #c6cbd1; } .gitment-markdown table tr:nth-child(2n) { background-color: #f5f5f5; } .gitment-markdown img { max-width: 100%; box-sizing: content-box; background-color: #fff; } .gitment-markdown code { padding: 0; padding-top: 0.2em; padding-bottom: 0.2em; margin: 0; font-size: 85%; background-color: rgba(27,31,35,0.05); border-radius: 0; } .gitment-markdown code::before, .gitment-markdown code::after { letter-spacing: -0.2em; content: \"\\00a0\"; } .gitment-markdown pre { word-wrap: normal; } .gitment-markdown pre>code { padding: 0; margin: 0; font-size: 100%; word-break: normal; white-space: pre; background: transparent; border: 0; } .gitment-markdown .highlight { margin-bottom: 16px; } .gitment-markdown .highlight pre { margin-bottom: 0; word-break: normal; } .gitment-markdown .highlight pre, .gitment-markdown pre { padding: 16px; overflow: auto; font-size: 85%; line-height: 1.45; background-color: #f5f5f5; border-radius: 0; } .gitment-markdown pre code { display: inline; max-width: auto; padding: 0; margin: 0; overflow: visible; line-height: inherit; word-wrap: normal; background-color: transparent; border: 0; } .gitment-markdown pre code::before, .gitment-markdown pre code::after { content: normal; } .gitment-markdown .full-commit .btn-outline:not(:disabled):hover { color: #005cc5; border-color: #005cc5; } .gitment-markdown kbd { display: inline-block; padding: 3px 5px; font: 11px \"SFMono-Regular\", Consolas, \"Liberation Mono\", Menlo, Courier, monospace; line-height: 10px; color: #444d56; vertical-align: middle; background-color: #fcfcfc; border: solid 1px #c6cbd1; border-bottom-color: #959da5; border-radius: 0; box-shadow: inset 0 -1px 0 #959da5; } .gitment-markdown :checked+.radio-label { position: relative; z-index: 1; border-color: #0366d6; } .gitment-markdown .task-list-item { list-style-type: none; } .gitment-markdown .task-list-item+.task-list-item { margin-top: 3px; } .gitment-markdown .task-list-item input { margin: 0 0.2em 0.25em -1.6em; vertical-align: middle; } .gitment-markdown hr { border-bottom-color: #eee; }"},{"title":"","date":"2014-04-11T03:30:27.000Z","updated":"2017-04-23T01:57:37.000Z","comments":true,"path":"links/index.html","permalink":"http://blog.justbilt.com/links/index.html","excerpt":"","text":"Imbahom: http://blog.imbahom.com/松阳: http://www.songyang.net/ChildhoodAndy: http://dabing1022.github.io/子龙山人: http://zilongshanren.com/奇葩世界: http://qipa.world/"},{"title":"tags","date":"2015-04-17T16:22:28.000Z","updated":"2017-04-22T14:41:22.000Z","comments":true,"path":"tags/index.html","permalink":"http://blog.justbilt.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"手撸一个像《乱世王者》那样的 WebView","slug":"webview-like-lswz","date":"2017-08-24T16:45:08.000Z","updated":"2017-08-31T23:55:24.000Z","comments":true,"path":"2017/08/25/webview-like-lswz/","link":"","permalink":"http://blog.justbilt.com/2017/08/25/webview-like-lswz/","excerpt":"天美新游戏《乱世王者》出了之后, 我玩了一阵子, 这个游戏的精美程度刷新了我对 slg 游戏的认识, 比它的模型产品《列王的纷争》给我带来的震撼还要大. 不仅仅是在美术方面, 更多的是在产品和对细节的处理上.","text":"天美新游戏《乱世王者》出了之后, 我玩了一阵子, 这个游戏的精美程度刷新了我对 slg 游戏的认识, 比它的模型产品《列王的纷争》给我带来的震撼还要大. 不仅仅是在美术方面, 更多的是在产品和对细节的处理上. 在游戏中更多界面中有几个按钮, 点击后会跳转到 WebView, 如下图: 这个 WebView 做得很不错呀, 比 Cocos 自带的光秃秃的 WebView 好数倍, 本着从(hou)善(yan)如(wu)流(chi)的人生哲理, 便开始思索着是不是搞到我们的游戏中去? 那么它是如何实现的呢? 根据多年经验, 从资源入手是最简单的办法了, 拆开乱世王者的 Android 包, 在 res 文件夹中搜索 png, 我们很容易的发现下面这些资源: 命名都是类似: com_tencent_msdk_webview_left_unclickable.png, 看来是 msdk 里面的一个组件, 我们没有接入 msdk 的计划, 所以没有办法直接调用了. 让我们来分析下这个界面: Cocos 默认提供的 WebView 只有中间部分, 上下是没有的. 这两部分应该是用 Android 写的原生界面, 但是我对 Android 也是一知半解, 写出来估计都是 bug, 还没有办法热更新. 看着满地的资源, 我不禁陷入了深思. 有了, 是不是只创建出中间尺寸大小的 Webview, 然后用这些图片在 Cocos 中绘制出标题栏和工具栏, 菜单和 WebView 的交互可以用 WebView 提供的 api 来搞. 粗略看了下 WebView 提供的 api: 12345bool canGoBack();void goBack();bool canGoForward();void goForward();void reload(); 在加上 removeFromParent, 下方的工具栏是没有问题了. 我们 ui 编辑器使用的是 Cocos Builder, 我很快拼出了效果: 下面便是在代码中撸这几个菜单的逻辑了, 这部分还是挺麻烦的, 只要细心一些, 很快也能搞定: 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465---- Author: wangbilt@gmail.com-- Date: 2017-08-21 11:26:18--local PageFullscreenWebview = class(\"PageFullscreenWebview\", require(\"app.layout.package.page_fullscreen_webview_layout\"))function PageFullscreenWebview:ctor() PageFullscreenWebview.super.ctor(self) self:_disableToolBar() self.webview = ccexp.WebView:create() self.webview:setAnchorPoint(cc.p(0, 0)) self.webview:setScalesPageToFit(false) self.webview:setContentSize(cc.size(display.width, display.height - self._nodeToolBar:getContentSize().height)) self.webview:setPosition(0, self._nodeToolBar:getContentSize().height) self.webview:setOnDidFinishLoading(function() self:performWithDelay(handler(self,self._loadFinishCallBack), 0) end) self:addChild(self.webview)endfunction PageFullscreenWebview:loadURL(_url, _callback) self.webview:loadURL(_url) self.on_finish_callback = _callback self._btnRefresh:setVisible(false) self._btnLeft:setButtonEnabled(false) self._btnRight:setButtonEnabled(false) endfunction PageFullscreenWebview:_disableToolBar() self._btnLeft:setButtonEnabled(false) self._btnRight:setButtonEnabled(false) self._btnRefresh:setVisible(false)endfunction PageFullscreenWebview:_loadFinishCallBack(...) self._btnRefresh:setVisible(true) self._btnLeft:setButtonEnabled(self.webview:canGoBack()) self._btnRight:setButtonEnabled(self.webview:canGoForward()) if self.on_finish_callback then self.on_finish_callback() endendfunction PageFullscreenWebview:onClose(_callback) self.on_close_callback = _callbackendfunction PageFullscreenWebview:onClickClose(_params) print(\"onClickClose\",_params.tag, _params.target) self.on_close_callback() self:removeFromParent()endfunction PageFullscreenWebview:onClickLeft(_params) print(\"onClickLeft:\",_params.tag, _params.target) self:_disableToolBar() self.webview:goBack()endfunction PageFullscreenWebview:onClickRefresh(_params) print(\"onClickRefresh:\",_params.tag, _params.target) self:_disableToolBar() self.webview:reload()endfunction PageFullscreenWebview:onClickRight(_params) print(\"onClickRight:\",_params.tag, _params.target) self:_disableToolBar() self.webview:goForward()endfunction PageFullscreenWebview:show() display.getRunningScene():addChild(self, 10000)endreturn PageFullscreenWebview 看看实际的效果: Ps. 在这之间还遇到了一个bug, 就是在 WebView 出现的时候按 back 键会崩溃, 最终重写 Avtivity 一个空的 onBackPressed 实现解决问题. 是不是足以以假乱真了呢 ? 不要高兴太早, 还有标题,进度条功能没有实现呢. 让我们来分析下这几个功能: 标题看了下 Cocos 提供的 API, 是没有与标题相关的, 只能我们自己去绑定. 那么该如何获取标题呢? Android:在 stackoverflow 的这个答案 中找到解决方案: 1234567WebView mWebView = (WebView) findViewById(R.id.mwebview);mWebView.setWebViewClient(new WebViewClient() &#123; @Override public void onPageFinished(WebView view, String url) &#123; ExperimentingActivity.this.setTitle(view.getTitle()); &#125;&#125;); 或者 123456webview.setWebChromeClient(new WebChromeClient() &#123; @Override public void onReceivedTitle(WebView view, String title) &#123; super.onReceivedTitle(view, title); &#125; &#125;); iOS:同样, 我们可以很容易的找到 iOS 的解决方案: 123- (void)webViewDidFinishLoad:(UIWebView *)webView&#123; NSString *theTitle=[webView stringByEvaluatingJavaScriptFromString:@\"document.title\"];&#125; 有了上面代码后, 我们可以很容易的实现获取标题的代码, 比较麻烦的是还需要修改 WebView 的 c++ 部分, 如果最终要在 Lua 中使用的话还需要导出接口. 进度条Android:12345webview.setWebChromeClient(new WebChromeClient() &#123; public void onProgressChanged(WebView view, int progress) &#123; &#125;&#125;); iOSiOS 我找了很久, 貌似是没有办法获取进度的, 只能做一个假的效果: 在开始加载网页的时候启动一个定时器, 让进度条以一个缓慢的速度前进, 收到加载完成的消息时让进度条瞬间移动到终点. 所以, 我们可以分平台实现, 也可以统一代码, 都使用假的进度条. 经过与 PM 的一番交流后, 一致同意放弃这两个功能. 因为觉得目前的效果还可以, 加上不改动 c++ 就可以热更新上去. 所以很可惜, 这次没有办法搞彻底了, 下次有机会我们接着搞.","categories":[],"tags":[{"name":"Quick-Cocos2d-x","slug":"Quick-Cocos2d-x","permalink":"http://blog.justbilt.com/tags/Quick-Cocos2d-x/"},{"name":"WebView","slug":"WebView","permalink":"http://blog.justbilt.com/tags/WebView/"}]},{"title":"聊聊 Google 支付的那些事","slug":"integrate-google-iab","date":"2017-07-23T02:20:07.000Z","updated":"2017-08-24T16:39:46.000Z","comments":true,"path":"2017/07/23/integrate-google-iab/","link":"","permalink":"http://blog.justbilt.com/2017/07/23/integrate-google-iab/","excerpt":"在之前的文章中, 有很多篇都是很 Apple IAP 相关的, 而 Google IAB 的却一篇都没有, 这对于占了半壁江山的 Android 很不公平. 就作为一个开发者而言, IAB 的体验是比 IAP 要好的. 它体现在这么几个方面: 测试账号就是 Goolge 账号, 不像苹果那样是沙盒账号. 这样不同账号下的应用可以设置同一个测试账号, 避免来回切换账号. 支持退款查询. 在苹果上, 只能吃了这个哑巴亏. 但是 IAB 也有一些不太便利的地方, 后面我们会讨论它.","text":"在之前的文章中, 有很多篇都是很 Apple IAP 相关的, 而 Google IAB 的却一篇都没有, 这对于占了半壁江山的 Android 很不公平. 就作为一个开发者而言, IAB 的体验是比 IAP 要好的. 它体现在这么几个方面: 测试账号就是 Goolge 账号, 不像苹果那样是沙盒账号. 这样不同账号下的应用可以设置同一个测试账号, 避免来回切换账号. 支持退款查询. 在苹果上, 只能吃了这个哑巴亏. 但是 IAB 也有一些不太便利的地方, 后面我们会讨论它. 一. 集成IAB 本身提供了一些列的 API 去实现购买, 一次典型的购买流程是这个样子的: 这里面有一些细节我们其实是可以不用知道的, 所以我们使用了一个二次封装的库android-inapp-billing-v3去实现. 使用了这个库后, 实现内购变得很简单: 1. 添加监听1234567891011121314151617181920212223242526272829303132333435protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); bp = new BillingProcessor(context, \"IAB_LICENSE_KEY\", new BillingProcessor.IBillingHandler() &#123; @Override public void onProductPurchased(String productId, TransactionDetails details) &#123; // 购买成功 Log.d(\"message:\", details.purchaseInfo.responseData); Log.d(\"signature:\", details.purchaseInfo.signature); Log.d(\"productid:\", productId); &#125; @Override public void onBillingError(int errorCode, Throwable error) &#123; if (errorCode == Constants.BILLING_RESPONSE_RESULT_USER_CANCELED)&#123; // 购买取消 return; &#125; String reason = \"UNKNOWN_ERROR\"; if (mErrorCodeReason.containsKey(errorCode)) &#123; reason = mErrorCodeReason.get(errorCode); &#125; // 购买失败 Log.d(\"buy failure: \", reason); &#125; @Override public void onBillingInitialized() &#123; // 初始化成功 &#125; @Override public void onPurchaseHistoryRestored() &#123; // 恢复内购 &#125; &#125;);&#125; 2. 处理购买结果12345@Overrideprotected void onActivityResult(int requestCode, int resultCode, Intent data) &#123; super.onActivityResult(requestCode, resultCode, data); return bp.handleActivityResult(requestCode, resultCode, data);&#125; 3. 购买商品1bp.purchase(this, \"android.test.purchased\"); 4. 消耗商品1bp.consumePurchase(productId); 二. 测试1. 使用静态响应进行测试IAB 默认提供了一系列的商品作为测试商品, 这些商品和应用及商品无关, 我们可以使用这些商品来测试充值功能是否集成成功和服务器签名验证是否正确. 详情可以参考 这篇 Google 官方文档. 2. 使用真实交易进行测试在项目上线前, 我们需要测试下应用内的商品处理是否正常, 所以要使用真实的环境来测试. 要达到这个目的, 我们需要进行一些列的操作才可以达到. 正确创建商品并与项目关联. Google Play 后台已经上传并发布了一个 Bata/Alpha 版本. 使用和 Google Play 后台已经发布的应用相同的签名和版本打包出来的应用. 在 Google Play 后台添加测试账号. 确认应用的发布地区有这个测试账号的所在地区. 确保测试用手机安装了谷歌服务框架, 开启翻墙并登陆了上面添加的测试账号. 这只是其中一部分需求, 还有一些原因会导致你无法正确测试充值. 三. 常见错误及解决方案1. 需要验证身份. 您需要登录自己 Google 账号 解决方案: 商品id不正确, 请检查下购买时传入的商品 id 和 Google Play 后台是否一致 2. 此版本的应用未配置为通过 Google Play 结算. 解决方案: 可能在测试账号所在的区没有包含在应用的发售地区中, 请检查配置, 修改后需要耐心等待生效. 3. 无法购买您要买的商品. 解决方案: 检查版本号是否与发布应用的版本号一致 Updata: 这个是很早之前的一个错误, 貌似 Google 目前已经不再检查版本号这个属性了. 确认有没有发布 Beta/Alpha 如果是封闭测试需要点击链接成为测试人员, 连接形式: https://play.google.com/apps/testing/xxx Update 2017年08月15日: 今天又遇到了这个问题, 什么都没有改, 过了一会突然又好了, 猜想是不是发布之后还需要一段时间才能生效. 4. 从服务器检索信息出错.[DF-DIC-02] 可能是商品 id 不正确或者支付逻辑错误导致传入了错误的商品 id, 详细原因可以移步我知乎上的这个回答 5. 添加测试账号测试账号分为两种: 下载测试账号列表 如果应用处于未发布的状态, 只有这个列表中的用户可以充值 充值测试账号列表 这个列表中的用户可以免费充值 测试充值这两个缺一不可. 最后IAB 最麻烦的地方就是它的测试充值, 原因在于它的错误提示不是 “人话”, 这个只能靠我们的丰富经验来解决了. 参考资料: http://blog.csdn.net/n5/article/details/50705745 https://developer.android.com/google/play/billing/index.html","categories":[],"tags":[{"name":"Android","slug":"Android","permalink":"http://blog.justbilt.com/tags/Android/"},{"name":"IAB","slug":"IAB","permalink":"http://blog.justbilt.com/tags/IAB/"}]},{"title":"最近搞 iOS 版遇到的一些问题和技巧 (五)","slug":"ios-dev-tips-5","date":"2017-07-16T03:36:20.000Z","updated":"2017-07-16T09:30:53.000Z","comments":true,"path":"2017/07/16/ios-dev-tips-5/","link":"","permalink":"http://blog.justbilt.com/2017/07/16/ios-dev-tips-5/","excerpt":"这段时间又积攒下了不少的技巧和解决方案, 感觉 XCode 越来越牛逼了, 尤其是在应用的账号设置方面, 之前遇到的一些低级问题可能已经不复存在了.","text":"这段时间又积攒下了不少的技巧和解决方案, 感觉 XCode 越来越牛逼了, 尤其是在应用的账号设置方面, 之前遇到的一些低级问题可能已经不复存在了. 此应用在未来的 iOS 版本下将无法使用 解决方案:发生这个问题的原因就是应用没有支持 arm64 CPU 架构, 不同的CPU架构对应的设备如下: arm64：iPhone6s | iphone6s plus｜iPhone6｜ iPhone6 plus｜iPhone5S | iPad Air｜ iPad mini2(iPad mini with Retina Display)armv7s：iPhone5｜iPhone5C｜iPad4(iPad with Retina Display)armv7：iPhone4｜iPhone4S｜iPad｜iPad2｜iPad3(The New iPad)｜iPad mini｜iPod Touch 3G｜iPod Touch4 一般出现这个问题, 很有可能是 XCode Architectures 设置或导出包的方式有问题: 这里面有两个地方需要关注一下: Build Avtive Architecture Only 和 Vaild Architectures, 前者是为了加速真机运行的速度, 一般 debug 会设置为 YES, release 版会设置为 NO; 后者是应用所支持的 CPU 架构. 所以我们必须得保证 Vaild Architectures 中有 arm64, 并且打包出 release 版才可以, 我们遇到这个问题的原因是打包同学使用了 debug 版的 app 做成 ipa 安装包的原因. clang: error: no such file or directory: ‘XXX’造成这个错误的原因有好多, 这次的报错极其诡异, 连系统库都会报找不到. 解决方案:经过排查, 发现是 Other Link Flag 中有一个单行的 -force_laod, 估计是删除的时候少删了一行. XCode 真机调试安装失败, 提示证书过期 解决方案:真机调试的时候一般使用的是开发证书, 开发证书可以有很多个, 在钥匙串中找到过期的证书删掉就可以啦, XCode 会自动匹配一个没有过期的证书. 导出 dis 包出错, IDEDistributionErrorDomain error 312error: exportArchive: The operation couldn’t be completed. (IDEDistributionErrorDomain error 3.)Error Domain=IDEDistributionErrorDomain Code=3 \"(null)\" UserInfo=&#123;IDEDistributionErrorSigningIdentityToItemToUnderlyingErrorKey=&#123;&#125; 解决方案:其实就是证书和 Provisioning Profiles 没有匹配上, 很有可能是其他小伙伴 revoke 了你的 dis 证书. 去 苹果开发者中心 查看对应的 Profiles 的 status 是否正常, 修改完后下载运行一下, 然后重新导出就好了. 沙盒测试: 此时没有权限在Sandbox购买此InApp其实描述的很清晰, 这个沙盒账号不是你这个应用的, 请仔细检查一下. 解决方案:更换正确的沙盒测试账号. QQ: 一键加群跳转过去后群不正确检查 LSApplicationQueriesSchemes 中是否有 mqqapi: 解决方案:如果没有的话添加一个就好啦. 导出 dev 包出错, IDEDistributionErrorDomain Code=14查看终端日志: 123456/Users/justbilt/.rvm/bin/rvm: line 66: shell_session_update: command not found+ xcodebuild -exportArchive -exportOptionsPlist /Users/justbilt/Documents/work/easy_slg_client/frameworks/runtime-src/proj.ios_mac/ios_export_dev.plist -archivePath /Users/justbilt/Documents/work/easy_slg_client/.build/yile.guopan-1.4.0.f592c19533-0607170734.xcarchive -exportPath /Users/justbilt/Documents/work/easy_slg_client/.build/06071926433991292017-06-07 19:26:43.906 xcodebuild[4724:25032817] [MT] PluginLoading: Required plug-in compatibility UUID E0A62D1F-3C18-4D74-BFE5-A4167D643966 for plug-in at path &apos;~/Library/Application Support/Developer/Shared/Xcode/Plug-ins/XAlign.xcplugin&apos; not present in DVTPlugInCompatibilityUUIDs2017-06-07 19:26:44.068 xcodebuild[4724:25032817] [MT] IDEDistribution: -[IDEDistributionLogging _createLoggingBundleAtPath:]: Created bundle at path &apos;/var/folders/ff/wpytbgmd3rl1pn9dd02nbjc80000gn/T/guopan_2017-06-07_19-26-44.068.xcdistributionlogs&apos;.2017-06-07 19:26:58.844 xcodebuild[4724:25032817] [MT] IDEDistribution: Step failed: &lt;IDEDistributionThinningStep: 0x7fb80e6cb860&gt;: Error Domain=IDEDistributionErrorDomain Code=14 &quot;No applicable devices found.&quot; UserInfo=&#123;NSLocalizedDescription=No applicable devices found.&#125;error: exportArchive: No applicable devices found. 找到其中的 xcdistributionlogs 日志文件路径: 1/var/folders/ff/wpytbgmd3rl1pn9dd02nbjc80000gn/T/guopan_2017-06-07_19-26-44.068.xcdistributionlogs 在 IDEDistribution.standard.log 文件中可以找到真正的错误原因: 12345678910111213141516171819202122232425guopan.app/guopan arm64 -&gt;error: Info.plist of “guopan.app/heepayImage.bundle” specifies a non-existent file for the CFBundleExecutable keyerror: Info.plist of “guopan.app/walletResources.bundle/Contents” specifies a non-existent file for the CFBundleExecutable key2017-06-07 11:08:24 +0000 Validating IPA structure...2017-06-07 11:08:24 +0000 [MT] /Applications/Xcode.app/Contents/Developer/usr/bin/ipatool exited with 12017-06-07 11:08:24 +0000 [MT] ipatool JSON: &#123; alerts = ( &#123; code = 0; description = &quot;Info.plist of \\U201cguopan.app/heepayImage.bundle\\U201d specifies a non-existent file for the CFBundleExecutable key&quot;; info = &#123; &#125;; level = ERROR; type = &quot;malformed-payload&quot;; &#125;, &#123; code = 0; description = &quot;Info.plist of \\U201cguopan.app/walletResources.bundle/Contents\\U201d specifies a non-existent file for the CFBundleExecutable key&quot;; info = &#123; &#125;; level = ERROR; type = &quot;malformed-payload&quot;; &#125; );&#125; 解决方案:可以看到这里有两个 Error, 意思就是这两个 .bundle 中的 Info.plist 中的 key CFBundleExecutable 字段指定了一个不存在的文件, 这个指定其实没有啥用, 我们删掉它就可以了. 用 Sublime 打开这个 plist, 删除下面这两行: 12&lt;key&gt;CFBundleExecutable&lt;/key&gt;&lt;string&gt;xxx&lt;/string&gt; 如果你打开的文件是一团乱码, 那么这个文件应 2进制 形式的 plist, 我们可以用一个命令行工具把它转化为 xml 形式的: 1plutil -convert xml1 xxx/heepayImage.bundle/Info.plist 然后删除掉.","categories":[],"tags":[{"name":"iOS","slug":"iOS","permalink":"http://blog.justbilt.com/tags/iOS/"},{"name":"iOS-Dev-Tips","slug":"iOS-Dev-Tips","permalink":"http://blog.justbilt.com/tags/iOS-Dev-Tips/"}]},{"title":"使用 Electron 重写 convert2fnt","slug":"convert2fnt-electron-rewrite","date":"2017-07-09T04:54:42.000Z","updated":"2017-07-16T01:14:38.000Z","comments":true,"path":"2017/07/09/convert2fnt-electron-rewrite/","link":"","permalink":"http://blog.justbilt.com/2017/07/09/convert2fnt-electron-rewrite/","excerpt":"大概是 14 年 2 月份的时候, 我使用刚学会 Python 写了一个小工具: convert2fnt, 为此还写了一篇文章 将一堆图片转化为BMFont工具 介绍这个工具. 它的主要应用场景是这个样子的: 美术妹子出了一堆图片字, 但是在程序中使用 BMFont 是更加方便的, 这个时候你可以强硬的要求美术妹子重新用 Glyphdesigner 制作一份字体. 但是也可以很温柔的告诉她: “你先去忙吧, 剩下的交给我了.”, 然后在妹子崇拜的目光下, 转身离去, 深藏功与名.","text":"大概是 14 年 2 月份的时候, 我使用刚学会 Python 写了一个小工具: convert2fnt, 为此还写了一篇文章 将一堆图片转化为BMFont工具 介绍这个工具. 它的主要应用场景是这个样子的: 美术妹子出了一堆图片字, 但是在程序中使用 BMFont 是更加方便的, 这个时候你可以强硬的要求美术妹子重新用 Glyphdesigner 制作一份字体. 但是也可以很温柔的告诉她: “你先去忙吧, 剩下的交给我了.”, 然后在妹子崇拜的目光下, 转身离去, 深藏功与名. 恩, 最初版的工具确实能够达到这个目的, 只是过程可能略微麻烦一下. 在第一版的工具中, 因为用到了 ImageMagick 来拼接图片, 所以你需要先安装这个工具, 然后下载脚本, 安装依赖库, 开始使用. 当妹子满心期待看着你放大招的时候, 你TM还在配环境? 第二版中重点优化了配置环境复杂的问题. 使用 Pillow 替换了 ImageMagick, 还使用 PyInstaller 打包了可执行程序. 如果顺利的话, 下载一个可执行程序, 把图片按照规则命名好, 执行下就好了, 很大的进步有木有? 但是这个工具的使用范围还是局限在了技术人员手, 你不会指望美术策划同学来搭建一个 Python + pip 的环境吧? 我们确实很愿意帮助妹子, 但是策划同学来找你怎么办? 一个带界面的工具在这时候看起来确实会是一个更好的选择, 这也是我一直所努力的方向. 我尝试过 Python 的各种 GUI 方案: Tkinter, PyWx, PyQt 等等, 这些方案良莠不济, 有的看起来只是一个 Demo, 有的光搭建环境就会让你吐. 为此我各种尝试,徘徊在各种方案间挣扎了好几年, 直到 Electron 横空出世. 它似乎是一个含着金钥匙出生的项目, 有着 Github 这个全球最大同性交友网站的加成, 一出生便备受瞩目. 当然它也不负众望, 干翻它的前身 Node-Webkit, 使得越来越多的 App 选择使用它来制作: 这里含金量最高的便是: Atom, VSCode 以及 Cocos 的最新产品: Cocos Creater. 其中 Creater 是真正让我下定决定使用 Electron 的项目, 前两个都只是个编辑器, 而 Creater 则是一个解决方案, 一个 2D 游戏的制作工具, 而且从目前的发展来看, 十分的健康. 以目前 Electron 的火爆, 网上可以找到一大堆的教程, 相信大家可以很轻易的入门这个框架. 这里我和大家分享下自己的心得和踩过的一些坑. 1. Electron 多个组件的作用electron/electron-prebuilt根据官方的解释: Note As of version 1.3.1, this package is published to npm under two names: electron and electron-prebuilt. You can currently use either name, but electron is recommended, as the electron-prebuilt name is deprecated, and will only be published until the end of 2016. 意思就是 electron-prebuilt 已经被废弃了, 建议直接使用: 1npm install electron --save-dev electron-package/electron-builder这两个都是 Electron 的打包工具, electron-package 只能打出可执行文件(Win:exe, Mac:app): 123\"scripts\": &#123; \"package\": \"electron-packager . --platform=win32 --arch=ia32 --electron-version=1.4.15 --overwrite --ignore=node_modules --ignore=.gitignore\"&#125;, electron-builder 是一个更为先进, 简单的打包工具, 如果不想折腾的话可以直接选择它了. 1234\"scripts\": &#123; \"pack\": \"electron-builder --dir\", \"dist\": \"electron-builder\"&#125;, 2. 一定要准备一个强有力的梯子…或者脑子npm install安装 Electron 的途径之一就是通过 npm, 以国内的这个网络环境, 通过 npm 安装一些小的库还勉强可以, 对于 Electron 这种几十兆的库就显得捉襟见肘了, 时间长不说还很容易中断. 这时候就可以选择使用 cnpm 来做这些事情, npm run distelectron-builder 第一次打包时会去下载 electron 的预编译文件, 这个文件很大, 它会默认去 github 上下载, 这时候如果没有翻墙工具就会很惨了. 我们可以使用 淘宝 提供的镜像来下载, 使用方法很简单, 在打包前先运行这个命令: 1export ELECTRON_MIRROR=\"https://npm.taobao.org/mirrors/electron/\" 原理可以看文章末尾的链接, 使用后真的是立竿见影, 大家可以对比下下载速度: 1234567MacBook-Air:convert2fnt bilt$ npm run distDownloading tmp-6511-0-electron-v1.6.11-darwin-x64.zip[==&gt; ] 8.8% of 46.08 MB (65.41 kB/s)MacBook-Air:convert2fnt bilt$ export ELECTRON_MIRROR=\"https://npm.taobao.org/mirrors/electron/\"MacBook-Air:convert2fnt bilt$ npm run distDownloading tmp-6579-0-electron-v1.6.11-darwin-x64.zip[============================&gt; ] 66.1% of 46.08 MB (951.77 kB/s) 最后最后上一下新版 convert2fnt 截图, 现在还有一些收尾的工作再做, 很快你就会见到它: 当策划再有类似的需求时, 可以直接扔给对方一个下载地址. 至于妹子, 当然是选择帮助她啦. 参考资料: 常用Electron App打包工具 加速electron在国内的下载速度","categories":[],"tags":[{"name":"convert2fnt","slug":"convert2fnt","permalink":"http://blog.justbilt.com/tags/convert2fnt/"},{"name":"Electron","slug":"Electron","permalink":"http://blog.justbilt.com/tags/Electron/"}]},{"title":"优化游戏在 iOS 上的内购","slug":"refine-game-ios-iap","date":"2017-06-18T10:58:03.000Z","updated":"2017-07-09T03:09:19.000Z","comments":true,"path":"2017/06/18/refine-game-ios-iap/","link":"","permalink":"http://blog.justbilt.com/2017/06/18/refine-game-ios-iap/","excerpt":"首先我们看下 iOS 内购的流程, 让我们看下官方的的流程图:","text":"首先我们看下 iOS 内购的流程, 让我们看下官方的的流程图: 很简单, 是不是 ? 作为一款游戏来说, 实际情况要复杂的多.首先要思考这么几个问题: 返回 Game 层时因为内存不足游戏重启了怎么办 ? 有玩家反应充值不到账怎么办 ? 如何防 IAP 破解 ? 作为一款可能在 “国内” 发售的游戏, 如果你们没有考虑过这些问题, 那可能会遇到很多的 “惊喜”. 有一点需要记住, 千万不要低估玩家的 “创造力”. 首先, 请允许用十分简单的几行代码带大家回顾下 IAP 的实现, 因为后面我们要讨论的内容全部是基于这个前提的. IAP 的代码实现要开启内购很简单, 两个对象三个步骤就搞定了. 我们先来说说这两个对象, 分别是 SKPaymentQueue 和 SKPaymentTransaction , 前者是充值订单, 后者是充值队列. SKPaymentQueue它是整个充值的核心, 负责串联充值的各个流程. 可以用这个对象实现发起购买, 恢复已经购买的物品, 结束购买, 监听充值事件等功能. SKPaymentTransaction前面说过它是充值的订单对象, 每一次充值的发起都会产生一个唯一的订单对象, 它记录有这个订单的状态, id, 时间, 收据的信息. 其中收据(transactionReceipt)是最重要的数据, 它是这次充值是否真正扣款成功的唯一条件. 我们要把它发送给我们的游戏服务器, 再向苹果的服务器进行验证. 下面来说说三个步骤: 1. 添加充值监听添加监听的逻辑很简单, 就下面这三行: 123if ([SKPaymentQueue defaultQueue]) &#123; [[SKPaymentQueue defaultQueue] addTransactionObserver:self];&#125; 但是这个 self 必须是一个实现了 SKPaymentTransactionObserver 的类的实例, 当有充值的事件时, 类的 updatedTransactions 函数会被调用: 1234567891011121314151617181920212223242526272829//.h@interface IAPHelper : NSObject &lt;SKPaymentTransactionObserver&gt;//.m@implementation IAPHelper- (void)paymentQueue:(SKPaymentQueue *)queue updatedTransactions:(NSArray *)transactions&#123; for (SKPaymentTransaction *transaction in transactions) &#123; switch (transaction.transactionState) &#123; case SKPaymentTransactionStatePurchased: // 处理支付成功 [[SKPaymentQueue defaultQueue] finishTransaction: transaction]; break; case SKPaymentTransactionStateFailed: // 支付失败 // 处理支付失败 [[SKPaymentQueue defaultQueue] finishTransaction: transaction]; break; case SKPaymentTransactionStateRestored: // 恢复内购 // 处理恢复内购 [[SKPaymentQueue defaultQueue] finishTransaction: transaction]; break; default: break; &#125; &#125;&#125;@end 2. 请求商品数据在开始购买之前, 我们需要知道商品的数据, 比如价格, 描述之类的, 这就需要我们先请请求商品的数据: 123SKProductsRequest* request = [[SKProductsRequest alloc] initWithProductIdentifiers:@[@\"com.xxx.xxx.01\", @\"com.xxx.xxx.02\"]];request.delegate = self;[request start]; 上面就是请求商品的代码, 商品的 id 列表是需要我们自己准备的. 请求的结果会通过一个函数来通知我们, 同样我们需要实现一个代理 SKProductsRequestDelegate: 12345678910//.h@interface IAPHelper : NSObject &lt;SKProductsRequestDelegate&gt;//.mm@implementation IAPHelper- (void)productsRequest:(SKProductsRequest *)request didReceiveResponse:(SKProductsResponse *)response &#123; NSArray* products = response.products; // products 就是商品的列表&#125;@end 3. 购买发起一次购买的逻辑: 12345SKPayment *payment = [SKPayment paymentWithProduct:@\"com.xxx.xxx.01\"];if ([SKPaymentQueue defaultQueue]) &#123; [[SKPaymentQueue defaultQueue] addPayment:payment];&#125; 下面就会进入到我们之前添加的那个充值状态的监听逻辑中去. 充值流程的优化流程方面, 我们大概经过了这么下面几个阶段. 野生蛮长的第一阶段这一阶段的特征是: 先完成交易, 后处理订单, 如果仔细观察上面 updatedTransactions 的逻辑的话, 可以看到这样的一行代码: 1[[SKPaymentQueue defaultQueue] finishTransaction: transaction]; 这行代码的意义就是标记这个订单已经完成了, 苹果从此以后不会再去通知你这个订单的任何消息了. 在调用这行代码之前, 我们会去处理一些充值结果的逻辑, 其中充值成功我们是要去苹果验证收据的. 但是验证的这个过程是异步的, 所以可能发生的问题就是: 在验证结果回来之前就关闭了订单. 因此若是验证的过程不够顺利, 比如网络状况不佳, 应用意外退出, 就会导致玩家的这次充值没有到账. 始料不及的第二阶段有了上面那个问题, 我们不禁会想 ? 是不是可以等收到验证结果再去完成订单. 答案是肯定的, 我们确实可以这样做, 苹果也很仁义, 没有完成的订单会在下次请求商品时再次通知我们充值成功. 简单验证之后, 我们修改了充值的逻辑, 信心满满的上线了. 上线之初确实很顺利, 反馈充值不到账的玩家数量降低了很多, 我们都陷入了巨大的喜悦之中, 再也不会有玩家反应充值不到账了, oh yeah ! 然后, 后面发生的事情却是我们始料不及的. 我们陆续收到了用户声泪俱下的控诉, 自己是多么多么的热爱这款游戏, 但是却无法享受充值带来的乐趣. 起初还只是可能不到账, 现在则是某一个充值项完全无法购买. 在诸多玩家的控诉中, 我们逐渐还原了问题的成因. 某一次充值成功后游戏重启, 没有收到钻石, 再次购买该商品则会提示: 您已购买此 App 内购买项目。此项目将免费恢复。 根据这个反馈可以很轻易的推断出是因为我们没有 finishTransaction 某一笔订单的原因, 但是却很难重现玩家所遇到的问题. 我们也复现过这个问题, 但是都能够在重启后自动解决. 我们也加了很多埋点去统计玩家的日志, 发现玩家似乎进入了一个卡单的状态, 程序无法获取到某些未完成的订单. 这个问题困扰了我们好久, 而且反馈的玩家越来越多, 有的玩家甚至已经没有可以能够购买的商品了. 键入佳境的第三阶段虽然上面的问题我们可以将锅甩给苹果, 但是实在受到损失的是我们, 因此还是需要解决这个问题. 经过讨论之后, 我们将目光又转回了第一阶段的方案, 看能否改进哪个方案. 我们可以先将订单数据保存在本地, 然后发起验证请求, 关闭订单, 等验证成功后删除本地保存的订单. 下次启动游戏或者充值时, 我们可以先检查下本地是否有缓存的订单, 有的话就先尝试验证这个订单. 虽然还有一些瑕疵, 比如玩家删除掉应用后就再也找不回之前的订单了, 但是已经是一个很不错的方案了. 下面我们来实现一下: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960- (NSString*)getRecordTransaction&#123;#if USE_ICLOUD_STORAGE NSUbiquitousKeyValueStore *storage = [NSUbiquitousKeyValueStore defaultStore];#else NSUserDefaults *storage = [NSUserDefaults standardUserDefaults];#endif NSArray *saved_transactions = [storage arrayForKey:@\"transactions\"]; if (!saved_transactions or [saved_transactions count] &lt;= 0) &#123; return nullptr; &#125; return [saved_transactions objectAtIndex:0];&#125;- (void)recordTransaction:(NSString *)transaction&#123;#if USE_ICLOUD_STORAGE NSUbiquitousKeyValueStore *storage = [NSUbiquitousKeyValueStore defaultStore];#else NSUserDefaults *storage = [NSUserDefaults standardUserDefaults];#endif NSArray *saved_transactions = [storage arrayForKey:@\"transactions\"]; if (!saved_transactions) &#123; // Storing the first receipt [storage setObject:@[transaction] forKey:@\"transactions\"]; &#125; else &#123; // Adding another receipt NSArray *updated_transactions = [saved_transactions arrayByAddingObject:transaction]; [storage setObject:updated_transactions forKey:@\"transactions\"]; &#125; [storage synchronize];&#125;- (void)removeRecordTransaction:(NSString *)purchase_id transactionId:(NSString*) transaction_id&#123;#if USE_ICLOUD_STORAGE NSUbiquitousKeyValueStore *storage = [NSUbiquitousKeyValueStore defaultStore];#else NSUserDefaults *storage = [NSUserDefaults standardUserDefaults];#endif NSMutableArray *saved_transactions = [NSMutableArray arrayWithArray:[storage arrayForKey:@\"transactions\"]]; if (!saved_transactions or [saved_transactions count] &lt;= 0) &#123; return; &#125; int index = 0; for (NSString* transaction in saved_transactions) &#123; if ([transaction rangeOfString:purchase_id].location != NSNotFound and (not transaction_id or ([transaction rangeOfString:transaction_id].location != NSNotFound))) &#123; [saved_transactions removeObjectAtIndex:index]; [storage setObject:saved_transactions forKey:@\"transactions\"]; [storage synchronize]; return; &#125; index = index + 1; &#125;&#125; 这里我们实现了存储, 获取, 删除的逻辑, 只是参数是 NSString 类型而不是 SKPaymentTransaction. 它其实是 Transaction 的一些有用的数据和我们自己的一些信息放的一个到了一个 NSDictionary 中, 然后将这个 dict 转化为 json 的字符串, 这样做是为了方便存储. 锦上添花的第四阶段其实第三阶段的逻辑已经很严谨了, 我们为了更好的了解玩家的充值行为, 加了很多的日志在这里: 我们存下了玩家的所有充值结果, 成功的, 失败的, 取消的, 异常的. 我们存下了玩家在充值界面的各种操作, 比如点击按钮, 界面跳转等. 在合适的时候, 将这些日志发送到服务器. 这些日志将会成为后面分析玩家行为, 解决纠纷的重要依据. 总结我用 ProcessOn 制作了一个全新的流程图, 地址在这里: 现在在回答下上面提出的几个问题: 1. 返回 Game 层时因为内存不足游戏重启了怎么办 ?答: 我们在本地存储了充值订单, 游戏会重启, 但这个本地存储不会自动删除. 2. 有玩家反应充值不到账怎么办 ?答: 这里我们要解决两个问题: 是否真的没有到账 ? 可能是实际已经到账了, 只是玩家没有发现, 这个需要后端查询玩家的钻石变化后向玩家解释清楚. 是否真的充值成功 ? 这个首先要玩家提供苹果充值收据邮件截图, 但是这个是可以伪造的, 但是可以阻挡一部分心怀不轨的玩家. 再根据我们前面收集的日志, 加上这个账号历史行为作出一个判断, 是否要给这个玩家补单. 3. 如何防 IAP 破解 ?这个对于网游来说, 很简单, 就像在服务器端向苹果充值服务器发起验证. 需要注意的是: 服务器端在向苹果验证收据时, 一定要先检查订单的唯一性, 充值时间, 商品id 是否正常.","categories":[],"tags":[{"name":"Quick-Cocos2d-x","slug":"Quick-Cocos2d-x","permalink":"http://blog.justbilt.com/tags/Quick-Cocos2d-x/"},{"name":"iOS","slug":"iOS","permalink":"http://blog.justbilt.com/tags/iOS/"},{"name":"IAP","slug":"IAP","permalink":"http://blog.justbilt.com/tags/IAP/"}]},{"title":"Quick-cocos2d-x 中的多语言","slug":"quick-x-i18n","date":"2017-06-03T12:30:35.000Z","updated":"2017-07-09T03:09:19.000Z","comments":true,"path":"2017/06/03/quick-x-i18n/","link":"","permalink":"http://blog.justbilt.com/2017/06/03/quick-x-i18n/","excerpt":"其实本来我的标题是 “Quick-cocos2d-x 中的国际化与本地化”, 多语言虽然是其中的主要内容, 但还有很多额外的工作. 比如: 在韩国上线的游戏必须在游戏第一次启动时弹出一个内容十分长的用户协议, 用户同意后方可继续游戏; 比如很多赌博性质的活动(抽奖, 拉霸, 转盘)都需要修改为其他表现形式. 还有一些技术方面的要求比如游戏用户的数据不能存在 cache 目录下等等. 每个国家和地区的要求都不尽相同, 有的是硬性的法律法规要求, 有的则是照顾到当地风俗习惯以提高用户体验. 当然, 这些并不在我们这次讨论范畴之内, 等我们的经历足够丰富之后可以再次和大家分享一下.","text":"其实本来我的标题是 “Quick-cocos2d-x 中的国际化与本地化”, 多语言虽然是其中的主要内容, 但还有很多额外的工作. 比如: 在韩国上线的游戏必须在游戏第一次启动时弹出一个内容十分长的用户协议, 用户同意后方可继续游戏; 比如很多赌博性质的活动(抽奖, 拉霸, 转盘)都需要修改为其他表现形式. 还有一些技术方面的要求比如游戏用户的数据不能存在 cache 目录下等等. 每个国家和地区的要求都不尽相同, 有的是硬性的法律法规要求, 有的则是照顾到当地风俗习惯以提高用户体验. 当然, 这些并不在我们这次讨论范畴之内, 等我们的经历足够丰富之后可以再次和大家分享一下. 今天, 主要和大家说说多语言. 一. 策略1. 语言代码就是不同语言我们需要一个 id 与之对应, 这个有很多种选择, 我们选择了微软翻译的代码: Language Code English Name zh-CHS Chinese Simplified zh-CHT Chinese Traditional en English 2. 多语言文本 id我们的策略很简单, 每一个多语言文本都有一个唯一 id, 每一个语言都是由多个 id: text 组成的 json 文件, 如下所示: 1234567&#123; \"1493084502\": \"积分兑换超级大奖\", \"1493084508\": \"[day]天[hour]小时后结束\", \"1493172258\": \"活动积分\", \"1493723018\": \"7日活动积分\", \"1493731515\": \"该功能暂未开启, 请耐心等待.\"&#125; 在游戏初始化的时候选择不同语言的 json 加载, 然后有一个函数 tr 接受 id 返回 text, 这就是我们全部的策略. 就是这么简单的策略, 我们也踩了不少坑. 最开始, 我们是打算弄一个自增的 id, 我们规定了一个从 100000 开始, 每次自增 10 这样的一个 id 生成策略, 之所以自增 10 是考虑到插入 id 的需求. 我们自以为这个策略很鲁棒, 却还是栽了跟头: 合并时会冲突 我们不同的功能是在不同的分支上做的, 完成之后会合并到主分支上. 大家在不同的分支上开发不同的功能时, 没有考虑到多语言后期合并冲突的问题, 而且这个冲突解决起来很麻烦, 得为冲突中的一方分配新的 id, 还得将代码中的 id 都替换掉, 这个过程是十分容易出错的. 怎么办 ? 我们也想过规定不同的 id 区间, 不同的模块有着不同的 id 起始值, 这样虽然一定程度上解决了模块间冲突的问题, 就算忽略规定这个 id 起始值所带来的额外工作, 多人协作的同一模块怎么办 ? 小伙伴们是不是还得提心吊胆, 小心翼翼的工作 ? 这可不是我们的风格. 就在我一筹莫展的时候, 我偶然间发现了一个东西: 时间戳, 我们可以用这个做 id 呀 ! 虽然理论上还是有可能冲突, 但是两个多语言 id 在同一秒内生成的概率又能有多高呢 ? 这里还要说说为什么我们没用使用 英文意义 作为 id 呢 ? 诚然英文 id 有更高的可读性, 有两个原因导致我没有选择它: 小伙伴们的英文水平参差不齐, 如果使用英文 id 的话, 很有可能会出现词不达意的情况, 反而降低可读性. 一个 id 所代表意思可能会发生变化, 如果变了, 是否要修改所有的引用呢 ? 3. 占位符与格式化我们一开始也是使用 %d %s 之类的东西做占位符, 但是这些东西是严格以来占位符及参数的顺序来替换的, 而同一个占位符在不同语言中的的位置可能是不同的. 比如: 中文: “军官统御等级每增加 %d(1)，增加带兵量 %d(10)”英文: “The size of the troop increase %d(10) by officer’s Command Level increase %d(1)” 大家可以看到, 这两种语言下两个占位符的顺序是完全相反的. 如果我们使用这种方式来的话, 就会对玩家造成误解. 那么我们应该怎么做呢? 中文: “军官统御等级每增加 [lv](1)，增加带兵量 [amount](10)“英文: “The size of the troop increase [amount](10) by officer’s Command Level increase [lv](1)“ 我们使用明确意义的占位符来占位. 4. 图片的多语言我在一篇文章中看到说要尽可能的避免使用带有文字的图片, 但是这种需求是无法避免的. 如果实现不同语言下用不同的图片呢 ? 我们的做法是给这个图片的命名中加入标记, 标记这是一个多语言图片, 在通过一个函数来获得真正的图片路径. 例如: 有一个图片的路径是 images/logo.png, 我们需要修改为 images/logo[zh-CHS].png, 标记这是一个中文下的图片, 同理会有一个 images/logo[en].png. 真正加载图片的时候, 会通过函数替换使用当前语言替换掉里面的占位符. 二. 代码支持1. 当前语言的确定一开始我们是直接使用的 device.language 来确定当前语言的, 但实际情况要复杂的多. 1). 语言残缺cocos 默认只支持cn：中文, fr：法语, it：意大利语, gr：德语, sp：西班牙语, ru：俄语, jp：日语, en：英语 这几种语言, 如果我们要支持一个这里面没有的语言怎么办 ? 我们需要分别从 Android 和 iOS 哪里获取到设备的当前语言 language code, 然后在 lua 中进行判断. Android: 1public static String getLanguageCode() &#123; return Locale.getDefault().toString();&#125; iOS: 1NSString* language_code = [[NSLocale preferredLanguages] objectAtIndex:0]; 2). 简体/繁体的确定这个确实值得拿出来一说, 这个 language_code 其实是有一套标准的, 但这个标准有好几个版本, Android 和 iOS 返回的可能不是一个标准, iOS 不同版本可能返回的不是同一个标准, cocos 原生的那个写法实际上是有漏洞的, 就中文来说会有这么几个写法: 1zh-CHS, zh-Hans, zh-CHT, zh-Hant, zh-cn, zh-tw, , zh-mo, zh-sg, zh-hk 最终我们需要把这些可能转化为两种 简体/繁体, 我们是这么做的: 12345678910111213141516local language = language_codeif string.startswith(language, \"zh\") then if string.find(language,\"Hans\") then language = \"zh-CHS\" elseif string.find(language,\"Hant\") then language = \"zh-CHT\" elseif string.find(language,\"TW\") then language = \"zh-CHT\" elseif language == \"zh-cn\" or language == \"zh-mo\" or language == \"zh-sg\" then language = \"zh-CHS\" elseif language == \"zh-hk\" or language == \"zh-tw\" then language = \"zh-CHT\" else language = \"zh-CHS\" endend 同理, 不光中文是这样的, 英文也同样有很多方言. 所以我们不能用 == 来判断某个语言, 要用 startswith . 3). 考虑支持的语言列表和玩家存档要考虑这么两个问题, 通过上一步获取到一个你不支持的语言怎么办? 我们的做法是声明一个默认语言(英语), 某个语言不支持就用这个语言. 同时如果游戏内有选择语言功能的话, 我们要优先使用玩家选择的语言. 声明支持的语言: 123456789101112platform.language_support = &#123; default = flavor.language.en, support_list = &#123; flavor.language.en, flavor.language.zh_chs, flavor.language.zh_cht, flavor.language.ar, flavor.language.ko, flavor.language.th, &#125;&#125; 判断语言: 12345678if #(platform.language_support.support_list) &gt;= 2 then platform.language = Record.getLanguage() if not table.contain(platform.language_support.support_list, platform.language) then platform.language = platform.language_support.default endelse platform.language = platform.language_support.defaultend 2. trtr 就是根据 id 返回真正文本的函数: 12345678local text = json.decode(io.readfile(cc.FileUtils:getInstance():fullPathForFilename((\"native/\"..platform.language..\".json\"))))function tr(_key) if not _key then return \"???\" end return text[tostring(_key)] or \"404:\"..tostring(_key)end 很简单, 还有一些可以拓展的空间, 比如最近发现的同一个中文如何对应不同 case 英文的问题. 举个栗子: 道具的英文是 item, 我们可能很多地方都会用到这个单词, 但是不同的地方可能会有一些小的区别: 主界面入口上需要显示为全大写: ITEM 行首的拼接需要首字母大写: Item 行中的拼接需要全小写: item 这个难道要多用好几个 id 来实现吗 ? 我们可以通过 tr 的第二个参数来指定格式. 123tr(10000, \"upper\") -- 大写tr(10000, \"title\") -- 首字母大写tr(10000) -- 小写 内部再处理下这个参数就可以实现同一个中文对应不同的英文了. 3. formatex上面说过有一个函数替换占位符, 其实现如下: 1234567891011function string.formatex(format, map) format = string.gsub(format, \"%[(.-)]\", map) return formatend-- examplestring.formatex(\"[attacker]砍了[defender]一刀, 造成了[damage]伤害\", &#123; attacker = \"张三\", defender = \"李四\", damage = 10,&#125;) 很方便的有木有 ? 三. UI 的适配1. 多个横向排版 Label我们先来看两张图: 上图中的左侧的 Label 在不同语言下的宽度是不一样的, 如果我们不想在代码中手动调整的话有这么几个办法: 使用一个容器存放多个 Label, 容器会自动排版多个元素的位置 在编辑 UI 时就预留好可一定的空间 如果只有两个 Lable 的话, 左侧的右对齐, 右侧的左对齐 2. Label Overflow这个概念是从 Cocos Creater 哪里找到的, 如果一个 Label 的实际尺寸超出了其在 UI 编辑时设定的最大范围的话如何处理呢 ? 缩小 Lable 的字体尺寸 多余的子使用 … 代替 增大 Label 的高度 我在 Quick-x 搞了一个很简陋的实现, 原理就是弄一个死循环, 判断尺寸超了就缩小一个单位, 但是效率不高, 就不贴实现了. 3. 阿拉伯语的适配大家都知道阿拉伯语的阅读顺序是从右往左的, 因此我们的 UI 最好也能是从右往左的. 但是除非从立项一开始就料想到了这一点, 否则更改全部 UI 是不现实的. 但是我们可以修改部分 UI, 如上面我们说的 横向排列的多个UI , 如果我们采用一个容器来实现的话, 那么很容易的实现容器内的元素顺序逆转. 我们按照这个思路实现了一个 BoxLayout , 在阿语下 layout 时会从元素的最后一个开始, 反向排版. 另外一个特殊处理就是 RichLabel, 我们自己实现了一个按字符遍历的富文本. 但是阿语下这个实现几乎变得不可用, 于是在阿语下我们使用普通文本来替换了富文本. 三. 外部工具1. 多语言转换工具json 作为程序读取的格式是没有什么问题的, 但是用来给翻译人员来翻译就很不方便了, excel 则是一个很不错的选择. 因此我们实现了一套 json &gt; excel 和 excel &gt; json 工具用来做这个转换. 同时, 为了能更高效的处理各种需求, 我们还有 diff, format, deduplicate 工具. 2. 多语言提取工具我们的多语言有很多是配置在 excel 中的, 这些 excel 最终会转换为游戏的静态配置, 我们希望最终在游戏中读取的一个多语言的 id, 而不是一串文本. 这样做能够降低静态配置的文件大小, 因为我们的文本有很多是重复的. 因此我们实现了一个抽取工具, 能够为 excel 中的文本打上标记, 这样在转换的过程中就可以使用 id, 而不是文本了. 效果如下图, # 前是文本, 后面是 id: 我们用的编辑器 CocosBuilder , 很古老的一个 UI 编辑器, 因此也没有多语言的功能, 所以我们做了一个从 ccb 中提取多语言的工具. ccb 本身是一个 plist 的文件结构, 很多语言都有对应的解析库, 写起来很容易. 参考资料: https://zh.wikipedia.org/wiki/ISO_639 https://www.zhihu.com/question/20797118 http://www.gameres.com/thread_480715_1_1.html (前辈的踩坑指南, 推荐阅读)","categories":[],"tags":[{"name":"Quick-Cocos2d-x","slug":"Quick-Cocos2d-x","permalink":"http://blog.justbilt.com/tags/Quick-Cocos2d-x/"},{"name":"i18n","slug":"i18n","permalink":"http://blog.justbilt.com/tags/i18n/"}]},{"title":"Quick-cocos2d-x 自定义头像","slug":"quick-x-user-avatar","date":"2017-04-23T13:54:41.000Z","updated":"2017-07-09T03:09:19.000Z","comments":true,"path":"2017/04/23/quick-x-user-avatar/","link":"","permalink":"http://blog.justbilt.com/2017/04/23/quick-x-user-avatar/","excerpt":"前段时间我们团队实现了游戏中自定义头像模块, 这是一个比较有意思的功能, 加上网上这方面的资料也不多, 所以给大家分享下我们的做法. 自定义头像这个功能牵扯到的内容还是比较多的, 一个人做的话需要技术储备比较大, 因此我们将这个任务做了如下的拆分: 选择头像 上传头像 下载头像 显示头像 每个人负责其中的一小部分内容, 再把这些小模块组合起来就完成了任务.","text":"前段时间我们团队实现了游戏中自定义头像模块, 这是一个比较有意思的功能, 加上网上这方面的资料也不多, 所以给大家分享下我们的做法. 自定义头像这个功能牵扯到的内容还是比较多的, 一个人做的话需要技术储备比较大, 因此我们将这个任务做了如下的拆分: 选择头像 上传头像 下载头像 显示头像 每个人负责其中的一小部分内容, 再把这些小模块组合起来就完成了任务. 一. 选择头像头像选择这部分的内容基本上和 Quick 没有关系, 主要内容有: 拍照/相册 剪裁 获取图像数据 这部分逻辑 Android/iOS 都要单独实现, 我们自己从头写起恐怕不太现实, 毕竟我们不是专业做这个的, 不过不用担心, 已经有前辈们为我们造好了轮子. Android 上我们选择是的 TakePhoto 这个库, iOS 上我们选择的是 VPImageCropper, 具体接入方式大家查看官方文档就可以. 这两个库我们做了很微小的修改, 以适应项目的实际需求, 同时因为 Lua 这边对二进制的数据处理比较麻烦, 我们选择将图片数据进行 base64 编码后返回给 Lua 端. 二. 上传头像上传头像其实是比较简单的, 我们尝试过 tcp 和 http 这两种上传方式. 我们在尝试 tcp 上传的时候遇到了一个很棘手的问题, 就是发送数据过大会导致 tcp 连接断开. 这个问题十分诡异, 同样长度的数据, 在 macOS 和 iOS 上没有任何问题, 但是在 Android 上就不行, scoket 在发送数据一段时间后收到了 RST 指令, 紧接着链接就会断开. 和服务器同学研究一段时间后无果, 就放弃了这个问题, 转为使用 http 上传. 使用了 http 之后, 还是上传失败, 服务器收到的 post 请求中没有 body, 而客户端加日志显示数据没有问题都塞到 body 中了. 使用抓包工具分析后确实长度有问题, 这就十分诡异了. 在偶然间发现微信也会遇到图片发布出去的情况后, 我们分析是 wifi 有问题, 换了另一个网络之后就没有问题了. 12345678local req = network.createHTTPRequest(reponse, url, \"POST\")req:setTimeout(timeout)req:addRequestHeader(\"Content-Type: mmf/bin\")req:addRequestHeader(\"Accept: mmf/bin\")req:setPOSTData(imagedata)req:start() 这是一段比较简单的 http 上传数据的代码示例, 这期间我还遇到了另一个诡异的问题, 就是客户端这里明明发送的是 POST 请求, 但是服务器收到的却是 GET, body 中没有数据, 同样的代码我们在 Mac 上使用模拟器是没有问题的, 非常诡异呀. http 在 Android 上的实现位于 QuickHTTPInterface.java 中, 经过在 Android 断点调试, 发现并没有调用 setRequestMethod . 原来这种 http 请求我们是封装了一层的, 这个 POST 和 GET 是通过参数传入的, 外部传入的其实是一个枚举. 然而在我之前的重构中, 修改了这个枚举的名字, 导致传入的值是 nil, 这就导致没有调用 createHTTPRequest 时没有传入 methed 参数, 默认就是 GET 类型的, 因为平台的 http 实现不同, 导致有些平台正常, 有些平台会出错. 上传头像的内容就是这些. 三. 下载头像对于这个问题, 我们开始还打算在 c++ 端用 curl 实现, 然后到处到 Lua 这边使用, 直到发现了 HttpClient 的 saveResponseData 接口. 调用了这个接口可以直接把 Response 中的数据保存在本地, 这样下载单个文件就搞定了. 下载代码如下: 12345678910111213141516171819202122232425-- http下载--[[ @param string _url _url地址 @param string _savepath 指定的存储路径 @param function _callfunc 下载完成回调方法]]local function _download(_url, _savepath, _callfunc) local req = network.createHTTPRequest( function(event) if event.name == \"completed\" then --判断是否下载成功 local success = false local code = event.request:getResponseStatusCode() if code == 200 and event.request:saveResponseData(_savepath) then success = true end if _callfunc then _callfunc(success, &#123;url = _url, req = event.request, path = _savepath&#125;) end end end, _url, \"GET\") req:setTimeout(60) req:start()end 但是整个下载功能呢并没有这么简单, 我们应该考虑到 本地缓存, 去重, 队列限制等情况, 这样我们可以实现一个通用的下载模块, 不仅仅是为自定义头像功能, 其他的模块也可以使用. 四. 显示头像这个功能其实很简单了, 为了什么要单独拿出来说呢? 就是我们要实现的很优雅. 自定义头像这个功能可能不是一开始就提出的, 因为改了 Native 层的代码, 所以需要线上换包, 这就比较麻烦了, 所以我们这个模块要和之前的头像保持兼容. 我们游戏中的显示头像的地方有很多, 我们不能把下载的调用写的到处都是, 比较优雅的做法是实现一个头像控件, 在这个控件内部处理普通头像和自定义头像的逻辑. 为了提高用户体验, 下载的过程中我们可以显示一张替代图或者之前的普通头像. 下面上一张最终的效果图:","categories":[],"tags":[{"name":"Quick-Cocos2d-x","slug":"Quick-Cocos2d-x","permalink":"http://blog.justbilt.com/tags/Quick-Cocos2d-x/"}]},{"title":"洁癖患者的 Git GUI 指南","slug":"the-git-for-neat-freak","date":"2017-04-12T15:34:12.000Z","updated":"2017-07-09T03:09:19.000Z","comments":true,"path":"2017/04/12/the-git-for-neat-freak/","link":"","permalink":"http://blog.justbilt.com/2017/04/12/the-git-for-neat-freak/","excerpt":"前段时间我看到了一篇文章, 洁癖者用 Git：pull –rebase 和 merge –no-ff , 发现和我们目前的工作流程很像, 区别在于我们是使用 GUI 工具来做的这些, 也做了一些新的尝试.","text":"前段时间我看到了一篇文章, 洁癖者用 Git：pull –rebase 和 merge –no-ff , 发现和我们目前的工作流程很像, 区别在于我们是使用 GUI 工具来做的这些, 也做了一些新的尝试. 注: 阅读下面的文章前, 我默认你已经读过上面推荐的那篇文章, 本篇文章不会赘述其中的内容. 一. pull –rebase 和 merge –no-ff使用软件: SourceTree 准备工作SourceTree 需要更改这些偏好设置: Allow force push 位于 General 标签, 如果有追踪的远端, 本地 rebase 后会造成本地提交历史和历史不一致, 必须强制推 (Force Push) 才能推送到远端. 勾选这个选项后, 会在 push 界面上多出一个 Force push 选项. Use rebase instead of merge by default for tracked branches 这个就是那篇文章中的 git pull --rebase , 勾选后 pull 界面上的 Rebase instead of merge 选项会默认处于勾选状态 . Do not fast-forward when merging, always create commit 这个就是 merge --no-ff , 合并分支后, 总是会产生一次 Merge Commit . Display author date instead of commit data in log (可选) 一旦 rebase 后, 提交时间就会变成 rebase 的时间, 影响判断, 如果勾选这个选项, 就会一直显示 commit 创建时的日期, 这条不是必须的, 大家根据自己需要选择. pull –rebase git pull –rebase 如果打算 pull 一个 没有跟踪中 的远端分支, 即使你修改了偏好设置, Rebase instead of merge 选项也不会默认勾选, 需要手动勾选. git rebase 假如想让 A 分支上的该动都基于 B 分支, 先保证你处于 A 分支, 在 BRANCHES 中 B 上右键选择 Rebase current changes onto B . rebase 冲突后的处理 rebase 过程实际上可以理解为是将当前分支上的所有 commit 再一次次应用的过程, 那么如果其中一步冲突了怎么办? rebase 会暂停下来, 等待你解决完冲突后的操作. 如果在终端中的话, 你有四个选项可选: 1234git rebase --continue //继续git rebase --skip //跳过git rebase --abort //终止git rebase --quit //结束 在 SourceTree 中, 我们解决完冲突后, 可以点击 Commit 按钮, 这时会出现下面这个界面: Abort Rebase , Continue Rebase 分别与 --continue 和 --abort 对应. 如果解决完冲突后这次 Commit 不包含任何 Changes 的话, 我们就需要 --skip 了, 很不幸的是 SourceTree 并没有提供这个选项, 只能在终端中操作. merge –no-ff 和 rebase 操作基本一致, 菜单选择 Merge B into A. 下面会弹出这个界面: Commit merged changes immediately 勾选或如果合并没有冲突的话, 会自动提交这次 Merege Commit, 否则的话, 你需要手动提交. Include messages form commits being merged in merge commit 会把这个分支上的所有的提交日志附加到 Merege Commit 的提交日志中. 二. rebase befroe merge就是在 merge 前先 rebase, 假如我们想把 B 合并进 A 中, 应当先在 B 上面 rebase A, 再切换到 A 上面 merge B. 这样可以避免出现下面这样的历史: 这样做, 还会附带一个好处, 就是会使得这次 Merege Commit 非常的纯粹, 因为在 rebase 时已经把潜在的冲突都解决完了, 所以这次 merge 一定不会有冲突, 这样 Merege Commit 的改动就会和分支 B 的改动完全一致, 不会再有其他的改动(解决冲突时的修改). 三. 合并前整理分支使用软件: GitUp Gitup 功能十分神奇, 而且还提供了很强大的 undo/redo 操作, 所以可以很不负责任的说, 大家可以随意尝试其中的各种功能, 不必担心把仓库搞挂. 如果坚持使用 rebase 话, 就会明白 rebase 的复杂度, 是与这个分支上的 commit 次数有一定关系的. 所以我们可以在 rebase 前整理这个分支: 合并相同功能的 Commit 使用 gitup 打开仓库, 随便在一次 commit 上右键, 便可以看到上图的菜单. 这里面有所有的操作, 下面我来说一下常用的: Fixup with Parent / Squash with Parent 作用都是将本次提交和上一次合并, 区别是后者可以同时修改提交日志. Swap with Parent / Child 就是讲两次提交互换位置, 比如你有 A-B-C 三次提交, 你想把 A 和 C 合并, 但是中间隔着一个 B, 这时就是把 B 和 C 的位置交换后 Squash. Split 将一次提交拆分为两次, 不过拆分粒度只能到文件级. 也很常用, 比如误将一些不属于这次提交做的改动提交了上去, 可以用这个拆分出来. 四. 后记 这个是我们坚持了一段时间之后的提交历史对比, 左侧杂乱无章, 犬牙呲互, 这是一条无法直视的提交历史, 右侧的则清晰不少. 我们可以修改筛选器中的 All Parents 为 First parent only, 这样我们住分支上的历史便只剩下了 Merge Commit ,那么只看这些 Commit 便可以知道整个分支的进化历程.","categories":[],"tags":[{"name":"neat-freak","slug":"neat-freak","permalink":"http://blog.justbilt.com/tags/neat-freak/"},{"name":"git","slug":"git","permalink":"http://blog.justbilt.com/tags/git/"}]},{"title":"多说, 再见 !","slug":"bye-duoshuo-bye-comment","date":"2017-03-25T01:30:30.000Z","updated":"2017-07-09T03:09:19.000Z","comments":true,"path":"2017/03/25/bye-duoshuo-bye-comment/","link":"","permalink":"http://blog.justbilt.com/2017/03/25/bye-duoshuo-bye-comment/","excerpt":"大约是在前几天刷微博的时候看到有人说多说要关站了, 赶紧去备份评论 balabala … , 难以置信, 赶紧去我的邮箱找了下, 果然找到了这封邮件: 震惊 !!! 依然难以置信 !!!","text":"大约是在前几天刷微博的时候看到有人说多说要关站了, 赶紧去备份评论 balabala … , 难以置信, 赶紧去我的邮箱找了下, 果然找到了这封邮件: 震惊 !!! 依然难以置信 !!! 我急忙把这个消息转发到了公司的微信群里, 却很快就被其他消息淹没, 没有激起一点浪花. 他们可能也很奇怪, 多说是什么鬼, 关闭了和我有什么关系 ? 嗯哪, 毕竟写博和读博都只是小众的需求. 将时间拨回 2013 年, 那时我刚把博客从 WordPress 切换到 hexo, 那时 hexo 的默认评论还是 disqus 呢, 由于众所周知的原因, 速度非常慢. 经过一番查找, 选择了多说, 速度快, 还支持国内的各种社交账号登录, 免费, 很良心. 我在新博客写的第一篇文章是 &lt;&lt;弯管(拐角)对方向的改变&gt;&gt; ,时间 2013/11/03, 收到的第一条评论是: 是 firedragonpzy 兄发来的[给力], 这么多年过去了, 不知他现在做什么? 最后一篇有多说评论的文章是 &lt;&lt;最近博客的一些变化&gt;&gt;, 时间 2017/02/24, 是回复山人的吐槽: 所以, 你以为多说的关闭意味着什么 ? 那时 cocos2d-x 还十分火爆,那时我还在用 c++,那年我才 21 岁. 好吧, 现在关闭装逼模式. 虽然用了这么多年的评论, 但正如 @王子亭 博主在这篇文章中所言: 12从另一个角度来看，我写了这么多年博客，收到的大部分评论都和文章内容无关 —— 他们在把文章的评论当作留言板来使用，和我打个招呼或者询问一下近况。当然我也曾收到极少部分一些认真撰写的评论，我也希望继续给这些人留出一些空间：我会以邮件的形式接受文章评论，我会挑选其中对读者有价值的部分展示在文章的末尾。 子亭同学说的特别好, 刚好借着多说关闭的机会, 我移除了博客中的评论系统, 只保留了 关于 这个灌水界面的评论, 还设立了一个小门槛, 只有拥有 github 账号的朋友才能评论. 以后便会省心不少吧.","categories":[],"tags":[{"name":"blog","slug":"blog","permalink":"http://blog.justbilt.com/tags/blog/"},{"name":"duoshuo","slug":"duoshuo","permalink":"http://blog.justbilt.com/tags/duoshuo/"},{"name":"comment","slug":"comment","permalink":"http://blog.justbilt.com/tags/comment/"}]},{"title":"最近搞 iOS 版遇到的一些问题和技巧 (四)","slug":"ios-dev-tips-4","date":"2017-03-12T02:25:47.000Z","updated":"2017-07-09T03:09:19.000Z","comments":true,"path":"2017/03/12/ios-dev-tips-4/","link":"","permalink":"http://blog.justbilt.com/2017/03/12/ios-dev-tips-4/","excerpt":"这是这半年搞 iOS 时遇到的一些问题, 写下来, 希望会帮到大家. 因为时间精力有限, 有些问题, 并没有解决方案, 只是饶了过去.","text":"这是这半年搞 iOS 时遇到的一些问题, 写下来, 希望会帮到大家. 因为时间精力有限, 有些问题, 并没有解决方案, 只是饶了过去. 一. iOS 沙盒测试 无法连接到APPSTORE确定是测试机, 沙盒账号登录的也没有问题, 就是无法充值. 解决方案换了一个测试机就好了 二. xcodebuilder -exportArchive dev 失败这个问题发生在我们的 iOS 打包脚本中, 会报错: IDEDistribution: Step failed: : Error Domain=IDEDistributionErrorDomain Code=14 “No applicable devices found.” 解决方案一开始我使用了老的 ipa 导出方案 xcrun -sdk iphoneos PackageApplication , 这样虽然可以导出了, 但是经常无法安装到测试机, 还得用 XCode 打开归档文件手动导出 dev 版本. 就这样凑活了一段时间后, 我终于下定决心解决这个问题了. 原来每次 exportArchive 会有有一个日志文件, 查看 /var/folders/…/IDEDistribution.standard.log 得知是我的 ruby 环境有问题: 12345[NOTE]You may have encountered a bug in the Ruby interpreter or extension libraries.Bug reports are welcome.Don't forget to include the above Crash Report log file.For details: http://www.ruby-lang.org/bugreport.html 在 StackOverflow 上找到了这个解决方案, 使用 xcbuild-safe.sh 替换 xcodebuilder 就好了 三. You must supply a CFBundleIdentifier for this request上传 dis 包时遇到这个错误: 解决方案在这篇文章中找到了解决方案: infor.plist表中Bundle OS Type code 栏为空或者非APPL具体设置路径为，项目的TARGETS &gt;&gt; infor &gt;&gt; Custom iOS Target Properties &gt;&gt; Bundle OS Type code，检查是否为空或者其他。将该选项设置为 APPL。自此，重新上传成功。 虽然解决了, 但是比较奇怪的是, 我好多项目没有设置也可以上传成功. 四. 连接 VPN 后有的 http 请求会失败这个很诡异呀, 不连接 VPN 没有任何问题. 解决方案我在 Exception Domain 添加对应域名之后就可以访问了. 猜测是不是果爹对大陆 ip 放宽了要求 ? 哈哈哈 五. This action could not be completed.Try again.(-22421)还是上传 dis 包到 iTunes 后台的时候, 会遇到这个错误: 解决方案在这篇文章中找到了解决方案: 暂时请使用 -Application Loader上传app程序 六. iOS 沙盒测试充值一次成功, 一次失败在沙盒测试充值时, 这次失败了, 下次就会成功, 主要发生在小面额的充值项上. 解决方案 苹果商店抽风, 没啥解决方案. 六. 苹果提交审核，因为应用名称不合法被拒，改完提交还是被拒这个是苹果的回复: We still find that your app name to be displayed on the App Store includes descriptors, which are not appropriate for use in an app name.Specifically, the following words in your app names are considered descriptors 解决方案可以查看是否在iTunes connect 后台添加了多个语言，而只修改了一种语言。 七. XCode 安装应用出错这个是错误内容: This application’s application-identifier entitlement does not match that of the installed application. These values must match for an upgrade to be allowed. 解决方案删除手机上已经安装的应用就好了","categories":[],"tags":[{"name":"iOS","slug":"iOS","permalink":"http://blog.justbilt.com/tags/iOS/"},{"name":"iOS-Dev-Tips","slug":"iOS-Dev-Tips","permalink":"http://blog.justbilt.com/tags/iOS-Dev-Tips/"}]},{"title":"Quick-Cocos2d-x 中的面向对象","slug":"quick-x-oop","date":"2017-03-04T02:04:44.000Z","updated":"2017-07-09T03:09:19.000Z","comments":true,"path":"2017/03/04/quick-x-oop/","link":"","permalink":"http://blog.justbilt.com/2017/03/04/quick-x-oop/","excerpt":"虽说现在一直提倡组合优于继承, 但是我们这帮深受 c++ 毒害的大好青年还是对继承有着深深的感情. Lua 这门语言本身并没有提供面向对象的机制, 不过我们可以很容易的通过 Lua 的 metatable 来实现一套面向对象的机制.","text":"虽说现在一直提倡组合优于继承, 但是我们这帮深受 c++ 毒害的大好青年还是对继承有着深深的感情. Lua 这门语言本身并没有提供面向对象的机制, 不过我们可以很容易的通过 Lua 的 metatable 来实现一套面向对象的机制. 一. 实现机制实现的原理很简单, 如果一个 Lua 的 table1 通过 setmetatable 函数设置了元表之后, 如果试图访问一个不存在的 属性, 就会触发这个 metatable 的 __index 元方法, 这个 __index 可以是另一个 table2 , 这样它就回去这个 table2 中去找那个属性了, 如果 table2 中还没有的话, 就会触发 table2 的元方法, 就这样一层一层的往上找. 我们可以用一个十分简单的栗子来测试下这个功能: 12345678local a = &#123;aa = 1&#125;local b = &#123;bb = 2&#125;local c = &#123;cc = 3&#125;setmetatable(b, &#123;__index = a&#125;)setmetatable(c, &#123;__index = b&#125;)print(\"aa:\", c.aa, \"bb:\", c.bb, \"cc\", c.cc) -- output: aa: 1 bb: 2 cc 3 如上, 只是加了两个 setmetatable, c 便可以访问到 a 和 b 的属性, 是不是很神奇. 二. Quick-cocos2d-x 中的实现Quick-Cocos2d-x 作为一个 framework 自然也实现了一套这样的机制, 因为函数实现比较长, 所以我就不粘贴代码了, 大家可以跳转这里查看. 纵观这段代码, 可以以最外层的 if-else 将这段逻辑分成两部分, 继承自 Cocos 的对象和继承自 Lua 的 Table, 为什么要这么分呢 ? 因为 Cocos 的对象在 Lua 中的 type 是 userdata, 是不能设置 metatable 的, 所以我们之前说的那套继承的方法就行不通了, Quick-cocos2d-x 在这里的选择是把所有的变量都复制一份, 做了一次一维的深拷贝. 所以, 抛开继承的实现不同, 这两个分支的逻辑是一致的. 我们精简下, 可以分离出下面这段简短的代码: 1234567891011121314function class(_name, _super) local cls = &#123;__cname = _name, super = _super&#125; if _super then setmetatable(cls, &#123;__index = _super&#125;) else cls.ctor = function()end end function cls.new(...) local instance = setmetatable(&#123;&#125;, &#123;__index = cls&#125;) instance:ctor(...) return instance end return clsend 这短短十几行代码几乎已经包含了面向对象的所有特性, 有实例函数 new, 有默认构造函数 ctor, 可以访问父类 super. 大家可以看到这段代码有两次 setmetatable, 第一次是在创建 cls 的时候, 是为了让 cls 能够访问到 super 中的属性; 第二次是在产生实例 instance 的时候, 是为了让实例能够访问到 cls 中的属性. 三. 要注意的地方下面这段代码是一个典型的面向对象示例: 12345678910111213141516171819202122local Animal = class(\"Animal\")function Animal:ctor(_name) self.name = _nameendfunction Animal:say() print(\"i couldn't say!\")endlocal Dog = class(\"Dog\", Animal)function Dog:ctor(_name, _age) Dog.super.ctor(self, _name) self.age = _ageendfunction Dog:say() print(string.format(\"I'm a %s, my name is %s, i'm %s years old.\", self.__cname, self.name, self.age))endDog.new(\"Jack\", 5):say() 我们重点看下第 14 行代码, 这行代码有些奇怪. 1. 为什么用类名去调用 super ?当继承到第三层的时候 self.super 从 C 跳转到 B 时 self 还是 C 的实例, 这时 B 中 self.super 其实还 B, 就会造成 stack overflow. 2. 为什么是类名 . super 而不是 : super ?首先大家要明白 Lua 中 . 和 : 调用函数的区别是什么 ? 冒号调用是 Lua 提供的一个语法糖, 默认会将函数的调用者作为第一个参数传入. 区别在于父类的函数收到的 self 是 self (即 Dog 的实例) 还是 Dog.super (即 Animal) , 很明显应该是后者. 四. 有什么改进的地方很早之前就拜读过这篇文章, 这篇文章中列举了一些作者的疑惑, 很有收获, 大家可以看一下. 文章中提出了两条: 问题1：从父类做深度拷贝问题4：创建实例时的深度拷贝 作者当时可能忽略了我们刚才做的解释: 无法向一个 userdata 设置 metatable , 那么我们这里是否真的需要一次深拷贝呢 ? 让我们先思考一个问题: 既然 Cocos 的对象是一个 userdata, 那么我们为什么可以往这个 userdata 上添加新的 Lua 属性呢 ? Quick-Cocos2d-x 为 C++ 导出 Lua 接口的工具是 tolua++ , 其中有两个接口叫: tolua.setpeer 和 tolua.gerpeer , 这个 peer 又是一个什么东西呢 ? 这张图是六月大大在 Cocos 论坛中的回复, 我们可以理解为 peer 是用来存储 C++ 对象在 Lua 中的扩展的, 他的本质是一个 table. 如果我们试图访问一个 userdata 类型的属性时, 如果这个 userdata 设置了 peer 表, 会优先从这个表中取值. 既然这个 peer 是一个 table, 那么是否可以为这个 table 设置元表, 这样在 peer 表中找不到就会触发 __index . 我们对 class 的实现做出下面的修改: 用设置 peer 表的 metatable 来代替原来的深拷贝, 重新运行我们的项目, 完美. 让我们想想下这个实现带来的优势: 更快, 更省内存, 为此我做了一个小的性能测试: 1234567891011121314151617local A = class(\"A\", function() return cc.Node:create()end)for i = 1, 100 do A[\"a_index_\"..i] = iendlocal B = class(\"B\", A)for i = 1, 100 do B[\"b_index_\"..i] = iendfor i=1,10000 do B.new()end 我设计了 A,B 两个类, B 继承自 A, 每个各有 100 个成员变量, 最后创建 10000 个 B 的实例. 统计了下内存的占用情况和耗时. 结果如下: 1234567深拷贝:耗时: 2.988687内存: 134.1Msetmetatable:耗时: 0.107388内存: 38.9M 这个相差很多呀, 感觉自己马上就要走上人生巅峰了. 既然相差这么多, 而廖大貌似也早已发现了这个问题: 为什么直到 3.3 版本还没有改动呢 ? 莫非是我哪里计算错了, 抛开测试, 我在我们的一个线上项目中做了一个真是的测试, 结果令我大跌眼镜. 相差无几 仔细想了下, 是否每一个对象都会有 100 个属性, 游戏内是否会同时存在 1w 个对象 ? 所以那份测试是没有意义的, 但是这个改动却是很有意义的. 其实在发现 peer 表之前, 我还做过另一个尝试, 对于 userdata 类型的实例, 不返回这个实例, 而是返回一个 table, 有一个属性 _cobj , 设置这个 table 的元表, 使得所有的属性都优先从 _cobj 中取, 取不到再去 super 中取, 后来因为改动太大, 就放弃了, 不过在这个改动的过程中意外的发现 peer 表的存在. 多折腾, 总会有所收获的.","categories":[],"tags":[{"name":"Quick-Cocos2d-x","slug":"Quick-Cocos2d-x","permalink":"http://blog.justbilt.com/tags/Quick-Cocos2d-x/"}]},{"title":"最近博客的一些变化","slug":"some-change-for-blog","date":"2017-02-23T16:39:14.000Z","updated":"2017-07-09T03:09:19.000Z","comments":true,"path":"2017/02/24/some-change-for-blog/","link":"","permalink":"http://blog.justbilt.com/2017/02/24/some-change-for-blog/","excerpt":"虽然最近博客的产量不高, 但是折腾的比较多. 而且每次折腾完都会有一些新的素材, 这样又可以对付一篇博客出来啦. 逃)","text":"虽然最近博客的产量不高, 但是折腾的比较多. 而且每次折腾完都会有一些新的素材, 这样又可以对付一篇博客出来啦. 逃) 一. 主题我不是在换主题, 就是在换主题的路上. 以至于子龙山人经常会问我:”你又换博客啦?”, 并没有, 只是换了个主题而已. 我换主题疯狂到什么程度呢? 几乎 Hexo 主题页的我都尝试过, 很多不好看的简单尝试了下就放弃了, 好看的呢我又会改一改, 按照自己的喜好定制一些东西. 只可惜之前的主题都没有截图留念下, 否则还能拿出来装个逼. 目前这个主题 raytaylorism 简单修改了下 配色, 字体, 和一点样式, 感觉还不错, 应该可以挺一段时间. 二. 移动端写作上篇文章我尝试了下在我的 Android 手机上书写, 用到了两个应用分别是 Pocker Git 和 JotterPad . 前者负责博客的 git 拉取和推送, 后者负责编辑, 两个应用都很给力, 配合的也很好, 虽然还有一些小瑕疵, 但着实已经是免费的解决方案中最佳之选了. 三. 访问加速说的好像很高大上, 做起来特别简单. 之前博客是托管在 github 之上的, 但是由于一些众所周知的原因, 访问速度不是很理想, 甚至可能访问不了. 国内也有类似的免费托管方案 (coding), 但是外国友人若是想看俺写的文章咱办 ? 能不能国外网络走 github, 国内走 coding 呢? 是可以的, 而且配置起来超级简单, 动动手指的功夫就解决了. 我基本上是照着这个教程搞的, 但是这个教程有些老, coding 他们改版的很快, 大家自己配合教程琢磨下就可以了. 弄完之后, 访问博客速度嗷嗷的, 感谢 coding 提供这么好的服务, 还是免费的, 良心企业. 四. 图片上传不知道大家之前博客配图是怎么搞的, 我之前是这么个流程: 准备图片 &gt; 打开 chrome 微博图床插件 &gt; 把图片拖拽上去 &gt; 复制网址 &gt; 返回编辑器粘贴网址 过程还是略繁琐, 直到我发现了神器 iPic , 复制图片后直接 cmd + shift + u 等待上传完毕就可以获得网址了. 超级方便, 超级省心, 绝对是让生命更有意义的工具. 有了这么多牛逼的东西, 还有什么理由不好好写博客呢 ?","categories":[],"tags":[{"name":"blog","slug":"blog","permalink":"http://blog.justbilt.com/tags/blog/"}]},{"title":"充实而又愉快的 2016","slug":"my-2016","date":"2017-02-18T01:39:54.000Z","updated":"2017-07-09T03:09:19.000Z","comments":true,"path":"2017/02/18/my-2016/","link":"","permalink":"http://blog.justbilt.com/2017/02/18/my-2016/","excerpt":"以往的年结大家感兴趣的话可以看这里: 我的年结, 这篇是第四篇了. 我大约是 2012 年正式开始写博客的, 时光荏苒, 已经过去5年了, 期间经历过一次大的迁移, 觉得最开始的博客太没有技术含量, 所以就都丢弃了. 值得肯定的是, 这次的年结是写的最早的一次 ! (此处应有掌声👏) 拖延病患者的一小步, 社会的一大步 !","text":"以往的年结大家感兴趣的话可以看这里: 我的年结, 这篇是第四篇了. 我大约是 2012 年正式开始写博客的, 时光荏苒, 已经过去5年了, 期间经历过一次大的迁移, 觉得最开始的博客太没有技术含量, 所以就都丢弃了. 值得肯定的是, 这次的年结是写的最早的一次 ! (此处应有掌声👏) 拖延病患者的一小步, 社会的一大步 ! 一. 工作C 公司 (2015.7 ~ 今)算下来, 我在 C 已经呆了一年半多的时间了, 如果要用一个字来形容我的感受, 那就是 爽 . 去年我对 C 的介绍并不多, 当时的体验并不久, 今年终于可以来说一说了, 仔细想来 C 这样的团队才是我心目中理想的团队: 不计考勤, 周末双休有一顿免费晚饭, 两大包 3M 口罩, 三个空气净化器技术驱动, 效率优先老板很牛逼, 团队无弱者 这里面最重要的是 老板很牛逼, 团队无弱者, 在 C 你经常可以看到策划同学在改后端战斗逻辑, 测试同学在用按键精灵写自动测试脚本, UE 妹子听得懂程序逻辑还兼着客服+运营, UI 设计师和前端讨论这个界面拼的合理性. 两位老板 (@bin, @jinbo) 更是牛逼, 他们就是我心目中的两尊神, 我就不夸他们了, 免得被认为在吹牛逼. 这一年间, 公司来了一些人, 也走了一些人, 对于有些人还是十分不舍的, 但是每个人都有自己的选择, 强扭的瓜不甜. 公司年夜饭这一天, 我喝的酩酊大醉, 为现在的这些人, 也为离开那些人 ! 二. 技术关于技术, 这一年没有往广度去发展了, 更多对之前技术的巩固和项目后期的一些理解. 这一年语言的技术栈主要还是 lua + python + shell, lua 用来做项目, python 和 shell 用来写支持. Android Studio2016 年最大收获之一就是它了, 接触它是一个很机缘巧合事情, 我们打算接入一个崩溃统计的 SDK , 但是这个 SDK 只支持 Android Studio (以后简称 AS) 接入, 我们会为了一个 sdk 改变整个 Android 项目的结构吗 ? 会 . 现在还依稀记得当时十分没底气的很 @bin 说: “我们能不能换一个 Android 的 ide ?” 当时 Android 端的项目还不是很复杂，在 bin 的支持下，很快便迁移到了 AS ，直到后面我们团队在一周之内接完 30+ 个渠道的 sdk ，才意识到了当初的选择是多么的明智. 当然这一路并不是顺风顺水，也遇到了很多坑，幸好 Google 在大力推 as ，遇到的坑在 Stack Overflow 上也都有答案。 感谢 Bugtags ，感谢 Android studio 。关于崩溃统计的问题，我有空会单独开一篇文章来写。 项目就项目来说，也可谓是 “活久见”，我工作了这么多年，第一次走到项目的大后期。之前的项目多数倒在了上线前或上线后不久，没有想到上线后竟然也有这么多的问题。 也遇到了几次重大的线上事故，可谓是心惊肉跳，我们都开玩笑说公司应该常备速效救心丸。 优化包体积，优化内存，优化性能 这些之前纸上谈兵的方案也得到了新的诠释。 而且随着项目的不断推进，之前好多技术方案都不能满足需求，比如热更新，打包，国际化与本地化等等。 团队从 16 年初，我之前和另一人负责的哪个项目遇到挫折，因为收费太过后期，加上模型产品太过强盛，没有发行公司敢于正面怼，所以就搁置了。另一个同事离职，我加入到了公司的另一个项目组内，这是一个非常年轻且有激情的团队，但是大家经验略有不足，便由我这个“老人”来带领这个团队。 工作了这么久，几乎是第一次正是的带领团队，心中难免戚戚焉。如何快速融入团队并获得大家的认可呢？和 @zengrong 大神的选择类似， 解决一个大家开发过程中的痛点 在负责一个小模块的时候， 我发现项目中有很多相似的控件，每个都得单独做，逻辑冗余且散落的到处都是，为什么不实现一个通用的控件去做呢？细节不赘述，最终这个控件成功的替换了所有的老控件，带来了极大的效率提升。 三. 生活旅行在 16 年春节前，我和媳妇开始我们的 上海-杭州-苏州 之旅，为期 2 周，这个也是我和冰子出去游玩时间最长的一次。 上海东方明珠外的玻璃栈道, 杭州的汽车真的是会主动让行人的, 苏州街边的点心真的很精致. 世界这么大, 出去走走真是好. 学车很早之前就报名了，一直没有狠下心来去学，还一直拿工作忙没时间来搪塞冰子。 直到冰子一气之下直接给我报了名，我才开始拿起手机背题，这里真的要感谢《驾考宝典》这个 APP ，它上面的易错题非常牛逼，考试的时候几乎都碰上了，就这样轻松通过科目一。 科目二的时候十分艰苦，我们报的周末上午班，每天5点就要起床，有一个多月的时间的周末早晨都是在班车上度过的。科目二考试的时候因为车型的原因差点没有过，好险！ 科目三很简单，过不过很多时候不是由自己决定的，只要科目二学的够扎实，下面就可以交给命运了，我很幸运，一次就过了。 科目四同样很简单，满分难，通过却很容易。 就这样，历时两个月，我成功拿到之前根本没有想到的驾照。而冰子，她还挂在科目二呢，哈哈哈，嘲笑她一把。 背单词我大概是在 16 年初突然决定背单词的，原因我已经记不清楚了。从此，早晨公交车上，公司厕所内，晚上等车时，你都会看到一个在背单词的身影。 作为一个花了好多钱学英语报班都没有坚持下来的愿望，这次真的能够成功吗？ 这次能坚持，完全归功于《百词斩》，宏爷很早之前就给我安利过这款产品，当时功能还很简陋，没有坚持下来。 背单词对我的帮助十分大，现在我已经可以很简单的浏览 Stack Overflow 了，能看懂每一个答案在说什么，甚至已经可以自己去回答帮助别人了。 生日这一年最大惊喜就是冰子为我准备的生日派对, 我从小都没有这样过过生日. 虽然很朴素, 但可以看到用了很多心, 听说冰子吹气球吹的腮帮疼, 哈哈 , 好傻 ! 谢谢你, 老婆, 永远爱你 ! 四. 剁手小米圈铁耳机 上一个耳机 KOSS PORTAPRO 挂掉之后, 就不打算买头戴式的了, 麻烦不说还容易坏. 在微博上看到谁说这个耳机还不错, 便入手了. 总体来说, 算不上惊艳, 但还算好用, 毕竟 99 的价位也不会对它有什么过分的要求. 小米max 买的时候想的很好, 大屏可以用来看书, 实际却很少看书. 总而言之, 质量没的说, 我对小米的手机就没有失望过, 但是大屏单手操作还是有所不便, 买的时候还是要慎重一些. 总而言之, 这是充实而又愉快的 2016 年, 工作和家庭都很顺心, 希望 17 年能继续保持下去.","categories":[],"tags":[{"name":"年结","slug":"年结","permalink":"http://blog.justbilt.com/tags/年结/"}]},{"title":"Quick-cocos2d-x 视频播放","slug":"quickx-playvideo","date":"2016-12-10T14:00:28.000Z","updated":"2017-07-09T03:09:19.000Z","comments":true,"path":"2016/12/10/quickx-playvideo/","link":"","permalink":"http://blog.justbilt.com/2016/12/10/quickx-playvideo/","excerpt":"今天我们来聊聊 Quick-Cocos2d-x 中播放视频的那些事. 这篇文章来自于日常的笔记, 年代可能会有些久远, 加上当时最开始视频播放不是我来做的, 所以有些地方我的理解也不是很深刻. 若是有什么不对的地方, 还望大家不吝赐教.","text":"今天我们来聊聊 Quick-Cocos2d-x 中播放视频的那些事. 这篇文章来自于日常的笔记, 年代可能会有些久远, 加上当时最开始视频播放不是我来做的, 所以有些地方我的理解也不是很深刻. 若是有什么不对的地方, 还望大家不吝赐教. 一. 基本用法播放一段视频: 123456789local video = ccexp.VideoPlayer:create()video:setPosition(cc.p(display.cx, display.cy))video:setAnchorPoint(cc.p(0.5, 0.5))video:setContentSize(cc.size(display.width, display.height))video:setFileName(\"res/start_video.mp4\")video:setKeepAspectRatioEnabled(true)video:setFullScreenEnabled(true)self:addChild(video) 监听视屏播放事件: 12345678910local function onVideoEventCallback(sender, eventType) print(\"onVideoEventCallback:\", eventType) if eventType == ccexp.VideoPlayerEvent.PLAYING then elseif eventType == ccexp.VideoPlayerEvent.PAUSED then elseif eventType == ccexp.VideoPlayerEvent.STOPPED then elseif eventType == ccexp.VideoPlayerEvent.COMPLETED then endendvideo:addEventListener(onVideoEventCallback)video:play() 然而你做完这一切还是可能会播放不出来视频, 没有关系, 多播放几次就出来啦. 二. 遇到的问题问题 1: iOS 播放视频完后黑屏cocos2dx 3.3 iOS端播放视频完后黑屏, 控制台中提示日志: OpenGL error 0x0506 in -[CCEAGLView swapBuffers] 324 解决方案: http://www.cnblogs.com/cc4coco/p/4188347.html 1234567891011-(void) viewDidAppear:(BOOL)animated&#123; cocos2d::Director::getInstance()-&gt;resume(); cocos2d::Director::getInstance()-&gt;startAnimation();&#125;- (void)viewWillDisappear:(BOOL)animated&#123; cocos2d::Director::getInstance()-&gt;pause(); cocos2d::Director::getInstance()-&gt;stopAnimation();&#125; 问题 2: 在 iOS 9.2 以上会崩溃解决方案: https://github.com/cocos2d/cocos2d-x/issues/14855 修改 VideoPlayer 类的析构函数, 将 dealloc 改为 release. 12345678VideoPlayer::~VideoPlayer()&#123; if(_videoView) &#123;- [((UIVideoViewWrapperIos*)_videoView) dealloc];+ [((UIVideoViewWrapperIos*)_videoView) release]; &#125;&#125; 问题 3: iOS 上播放视频有进度条, 双击可以放大缩小, Android 点击可以暂停解决方案: 这个问题挺让人啼笑皆非的, 不知道当时设计这个类的人是如何考虑的, 至少也应该提供一个关闭的接口吧. 好, 让我们看下如何解决它. 1. 隐藏 iOS 播放进度条在 UIVideoPlayer-ios.mm 的 -(void) setURL:(int)videoSource :(std::string &amp;)videoUrl 函数中, 修改 MPMovieControlStyleEmbedded 为 MPMovieControlStyleNone: 12- self.moviePlayer.controlStyle = MPMovieControlStyleEmbedded;+ self.moviePlayer.controlStyle = MPMovieControlStyleNone; 进度条隐藏了, 但是视频播放时双击缩放的问题却无法解决. 2. 禁用 Android 点击暂停修改 Cocos2dxWebView.java 中的 onTouchEvent 函数 12345678910111213 @Override public boolean onTouchEvent(MotionEvent event) &#123;// if((event.getAction() &amp; MotionEvent.ACTION_MASK) == MotionEvent.ACTION_UP)// &#123;// if (isPlaying()) &#123;// pause();// &#125; else if(mCurrentState == STATE_PAUSED)&#123;// resume();// &#125;// &#125; return true; &#125; 问题 4: vivo手机无法播放视频的bug解决方案: 经过断点跟踪, 定位到了原因, 视频的尺寸获取的有问题, 我尝试修改了 setVideoRect 函数中的两行代码: 1234- mViewWidth = maxWidth;- mViewHeight = maxHeight;+ mViewWidth = 1;+ mViewHeight = 1; 很神奇的解决了这个问题. 问题 5: 多次调用可能会遮挡 SDK 的弹出界面我们游戏中有一个重启的功能, 每次重启都会播放一个视频, 这样某些渠道的登录界面就看不到了, 另一个不播放视屏的项目就没有问题, 好像是每次播放都会提高游戏的层级. 解决方案: 遍历所有 window , 找到 SDK 的那个 window, 将它的 windowLevel 提高一级. 123456for(UIWindow * w in [[UIApplication sharedApplication]windows])&#123; if ([w isKindOfClass:NSClassFromString(@\"XSDKOriginalWindow\")]) &#123; [w setWindowLevel:[[[UIApplication sharedApplication]keyWindow]windowLevel]+1]; break; &#125;&#125; 问题 6: 还有什么问题, 都说了吧如果播放时候是黑屏，把游戏切到后台，再进入游戏就能从头播放！如果播放时候正常，切到后台再切回来就变成黑屏 http://www.cocoachina.com/bbs/read.php?tid-306892.html Cocos2d-x V3.10版本中的videoplayer问题http://www.voidcn.com/blog/sh15285118586/article/p-5989468.html 关于cocos2dx 3.x VideoPlayer的问题http://blog.sina.com.cn/s/blog_93add5520102w6n9.html cocos2d-x视频控件VideoPlayer的用户操作栏进度条去除http://blog.csdn.net/pklll000pp44/article/details/51337577 还真的是问题一大堆呢! 大家最好还是回去和策划大大商量下, 别播放视频了.","categories":[],"tags":[{"name":"Quick-Cocos2d-x","slug":"Quick-Cocos2d-x","permalink":"http://blog.justbilt.com/tags/Quick-Cocos2d-x/"},{"name":"videoplayer","slug":"videoplayer","permalink":"http://blog.justbilt.com/tags/videoplayer/"}]},{"title":"一个命令行的 TexturePacker 拆解工具  (二)","slug":"untp-2","date":"2016-10-29T15:39:18.000Z","updated":"2017-07-24T23:00:24.000Z","comments":true,"path":"2016/10/29/untp-2/","link":"","permalink":"http://blog.justbilt.com/2016/10/29/untp-2/","excerpt":"距离第一版的 untp 发布已经有一年半的时间了, 在这个项目上我收获了很多的第一次: 第一次有一个项目的 star 数超过 50第一次往 pypi 上上传项目第一次如此认真的维护一个项目… 这篇文章已经是关于 untp 的第三篇文章了, 所有的文章列表可以查看这里. 下面我来讲讲 untp 最近的几次更新以及后续的一个维护计划.","text":"距离第一版的 untp 发布已经有一年半的时间了, 在这个项目上我收获了很多的第一次: 第一次有一个项目的 star 数超过 50第一次往 pypi 上上传项目第一次如此认真的维护一个项目… 这篇文章已经是关于 untp 的第三篇文章了, 所有的文章列表可以查看这里. 下面我来讲讲 untp 最近的几次更新以及后续的一个维护计划. 一. 更新1.0.9 修复: 解析 plist 时因为数据中含有空白符号导致解析失败的 bug 1.0.8 新增: 支持 cocos2d-0.99.4 格式支持 1.0.7 修复: 解析文件返回值错误导致解析失败 1.0.6 新增: 可以将 fnt 转化为图片 修复: 将 pvr 转化为 png 时会污染原始目录 修复: 当 plist 中的图片含有路径时无法正确生成图片 修复: 当 offset 为 float 值时解析 plist 出错 1.0.5 拆解单个文件时支持 -o 参数指定输出目录 可以在 python 中 import 支持 cocos2d/cocos2d-x v3 格式 1.0.4 使用 argparse 解析调用参数, 支持更多选项 捕获图片打开异常, 程序更加健壮 支持文件夹递归查找所有 plist 拆解 1.0.3 修复依赖 Pillow 模块版本大于 3.0 时图片输出错误 1.0.2 兼容 python3 放弃之前的打包发布, 改为 pypi 发布 修复一处路径错误 根据 python code style 优化代码 pvr,pvr.czz 格式支持 (需要安装 TexturePacker 命令行工具) 二. 后续计划untp 这个项目最初来源于项目中的一个需求, 所以开始只是为了自用, 开源之后发现有能帮助一些人, 顺便实现一下他们的一些小需求, 自我更新动力并不是很足, 因此更新的频率不是很高. 之前的发展策略我一直都是按着更便捷安装, 更方便使用方向上走的, 从一开始的 PyInstaller 打包到后面的上传到 pypi , 从开始只支持单一文件到支持目录, 都是按照这个思路搞的.至于后面如何发展我也没有很好的想法, 或许让它停留在这一版也很好. 今天看到张小龙的一篇内部分享, 一个好的工具就应该只是一个工具, 想到就用, 用完就走, 不要想着把用户黏住. 所以, untp 就只是一个拆解大图的工具, 绝对不做其他的功能. 在这个原则的基础上, 有这么几个方向去搞: GUI 界面的支持 支持更多的格式 我想使用这个工具的人可能不一定是程序员, 他们不一定懂 pip , 不一定会打开终端. 所以一个 GUI 的界面就很重要了. 第二个是可以让更多引擎的开发者来使用, 现在只支持 cocos 是有些狭隘了, 对自己也是一个很好地的锻炼. 如果你还有更好的建议, 欢迎在评论里或者 issue 中提出. 三. 中文使用说明(持续更新)1. 安装现在可以采用两种方式安装, 在终端中键入 pip install untp 或者 clone 代码到本地, 在根目录 python setup install . 2. 使用当我们在终端中键入 untp -h 后, 会得到下面这段输出: 1234567891011121314151617181920usage:untp ../btn.plistuntp ../btn.plist -i ../btn.pnguntp ../datauntp ../data -rpositional arguments: path plist file name or directoryoptional arguments: -h, --help show this help message and exitFor file: -i image_file, --image_file image_file specified image file for plist -o output, --output output specified output directoryFor directory: -r, --recursive 对于单个 plist 文件, 可以 untp xxx.plist 来拆解它, 会读取 plist 中配置的图片输出到同名的目录中, 可以使用 -i 指定图片, -o 指定输出目录. 对于目录, 使用 untp path path 是包含 plist 文件的目录, 可以使用 -r 参数指定遍历子目录. (以上)","categories":[],"tags":[{"name":"Tool","slug":"Tool","permalink":"http://blog.justbilt.com/tags/Tool/"},{"name":"untp","slug":"untp","permalink":"http://blog.justbilt.com/tags/untp/"}]},{"title":"Quick-cocos2d-x utf8 支持","slug":"quickx-utf8-support","date":"2016-09-22T22:58:40.000Z","updated":"2017-07-09T03:09:19.000Z","comments":true,"path":"2016/09/23/quickx-utf8-support/","link":"","permalink":"http://blog.justbilt.com/2016/09/23/quickx-utf8-support/","excerpt":"一. 需求1. 计算玩家名字字符数对于这个需求一般情况下 string.len 或 quick 自带的 string.utf8len 就能满足, 但是如果需求是: 对于像 中文/日文/韩文 这样的方块字一个占 2 个长度, 其他字符占 1 个长度. 该如何满足呢 ?","text":"一. 需求1. 计算玩家名字字符数对于这个需求一般情况下 string.len 或 quick 自带的 string.utf8len 就能满足, 但是如果需求是: 对于像 中文/日文/韩文 这样的方块字一个占 2 个长度, 其他字符占 1 个长度. 该如何满足呢 ? 2. 屏蔽 emoji 表情我们游戏的聊天/起名都是不允许输入 emoji 表情的, 那么该如何判断玩家输入的文字中包含 emoji 表情呢 ? 在我之前的文章(Quick-Cocos2d-x EditBox 几个小技巧)中有提到过这个需求, 当时分析了下有两个解决方案: 无法输入, 弹出键盘点击表情没有反应 输入完成后, 游戏内点击提交时提示非法 本来打算是使用方法2的, 苦于无法在 lua 这边识别出 emoji , 所以只能曲线救国的使用的方法1, 每个平台得单独实现不说, 还容易出 bug, 出了 bug 亦无法热更新修复. 最近还真是遇到了 bug , 会导致在 ios 上无法使用九宫格输入法. 以上两个问题, 如果支持 utf8 的话, 我们可以遍历整个字符串, 判断每个字符的 codepoint 是否在某个码区中. 所以我们需要实现这么几个接口: utf8 长度计算 遍历 utf8 utf8 char/byte 实现 二. 实现1. 使用 clib 实现Google 搜索 lua utf8 很快发现了 luautf8 这个项目, 100 多个 star , 对于一个 lua 项目, 已经算很多了. 实现也很简单, 就 unidata.h 和 lutf8lib.c 两个文件. 下面我们在 quick 中集成这个项目, 我们在 quick-cocos2d-x/external/lua 目录先新建一个 utf8 目录, 将上面提到的那两个文件下载下来放进去, 修改 lutf8lib.c:1303 行: 123// lua_createtable(L, 0, sizeof(libs)/sizeof(libs[0]));// luaL_register(L, NULL, libs); luaL_openlib(L, \"utf8\", libs, 0); 为了在别的文件中能够访问到 luaopen_utf8 函数, 我们还需要新建一个 utf8lib.h 头文件: 123456789101112131415#ifndef LUAUTF8_H#define LUAUTF8_H#include \"lua.h\"#ifndef LUALIB_API#define LUALIB_API extern#endif/*-------------------------------------------------------------------------*\\* Initializes the library.\\*-------------------------------------------------------------------------*/LUALIB_API int luaopen_utf8(lua_State *L);#endif /* LUAUTF8_H */ 下面我们就可以注册这个库了, 修改 cocos/scripting/lua-bindings/manual/network/lua_extensions.c : 123456#include \"utf8/lutf8lib.h\"void luaopen_lua_extensions(lua_State *L)&#123; ... luaopen_utf8(L);&#125; 同时我们还需要修改编译脚本, 使得在不同平台上能够编译通过, Android 需要修改 cocos/scripting/lua-bindings/proj.android/Android.mk 文件: 123LOCAL_SRC_FILES += ../manual/network/lua_cocos2dx_network_manual.cpp \\ ../../../../external/lua/luasocket/usocket.c \\ ../../../../external/lua/utf8/lutf8lib.c 在 LOCAL_SRC_FILES 末尾加上 lutf8lib.c . iOS/Mac 的话, 在 XCode 中将整个 utf8 目录加入进来就可以呀, 如下图所示: 2. 纯 lua 实现如果一切按计划走的话, 是不会有这么一步的, 然而天意难测, 说好的冷更新变成了变成了热更新. 若是还想保留这个功能的话, 只能寻找纯 lua 的解决方案了. 虽然走了不少弯路, 浪费了大量的时间, 最终还是让我找到了: https://github.com/Stepets/utf8.lua 将项目中的 utf8.lua 下载下来放到你工程中就可以啦, 就是这么简单. 3. 兼容按说有了纯 lua 的实现后, 我们就可以放弃 c 代码的实现了, 但是想起做 python 的时候, 有好多库的实现为了提高效率, 都会有一份 c/c++ 的实现优先使用. 我们是不是也可以这样子搞, 优先使用 clib 的实现, 若是没有再考虑 lua 的实现 ? 首先, 我们要对比一下这两个库的效率对比. 设计了一个简单的测试案例, 遍历一个 utf8 的字符串, 计算耗时, 得出了这样一份数据: 字符数 耗时clib 耗时lua 倍数 10 2.0999999999938e-05 6.8000000000068e-05 3.2380952381081 138 0.00018899999999999 0.00095199999999995 5.0370370370369 2919 0.001868 0.01553 8.3137044967881 可以看到至少也有 3 倍的速度提升, 而且随着字符数越来越多, 速度差距会更大. 这个方案是可行的, 我们可用如下代码做兼容: 123if type(utf8) ~= \"table\" then utf8 = require(\"your/path/of.utf8\")end 但是两种实现遍历字符串的 api 略有不同, 需要包装兼容一下: 1234567891011121314151617181920utf8.foreach = function(_str, _func) local index = 1 if utf8.next then for pos, code in utf8.next, _str do if _func(index, utf8.char(code), code, pos) then return end index = index + 1 end elseif utf8.gensub then for char,pos in utf8.gensub(_str) do if _func(index, char, utf8.byte(char), pos) then return end index = index + 1 end else assert(false, \"no utf8 supports!\") endend 附录:附上我们判断玩家姓名和 emoji 的代码, 比较简单, 若有不对之处, 欢迎指正. 玩家姓名长度判断12345678910local length = 0utf8.foreach(text, function(index, char, code, pos) -- 中日韩文字一个字符算两个长度 if code &gt;= 0x3040 and code &lt;= 0x9fff then length = length + 2 else length = length + 1 endend) emoji 表情判断1234567891011local function checkContainsEomji(text) local contain = false utf8.foreach(text, function(index, char, code, pos) -- [^\\u0000-\\u25ff\\u27c0-\\uD7FF\\uE000-\\uFFFF] if not ((code &gt;= 0x0000 and code &lt;= 0x25ff) or (code &gt;= 0x27c0 and code &lt;= 0xD7FF) or (code &gt;= 0xE000 and code &lt;= 0xFFFF)) then contain = true return true end end) return containend","categories":[],"tags":[{"name":"Quick-Cocos2d-x","slug":"Quick-Cocos2d-x","permalink":"http://blog.justbilt.com/tags/Quick-Cocos2d-x/"},{"name":"utf8","slug":"utf8","permalink":"http://blog.justbilt.com/tags/utf8/"}]},{"title":"最近遇到的几个 Quick-cocos2d-x 真机崩溃(二)","slug":"quickx-crash-on-phone-2","date":"2016-09-10T15:28:45.000Z","updated":"2017-07-09T03:09:19.000Z","comments":true,"path":"2016/09/10/quickx-crash-on-phone-2/","link":"","permalink":"http://blog.justbilt.com/2016/09/10/quickx-crash-on-phone-2/","excerpt":"大概是 8 月中旬的时候, 我们项目发生了一个很严重的线上事故. 在版本更新之后, 部分 Android 玩家反馈点击按钮开始游戏或活动按钮会闪退. 开始收到这个反馈时, 并没有太在意, 心想是不是机型适配有问题 ? 加上当时有别的工作在忙, 就没有去理会. 大概一个小时后, 玩家的邮件像雪花一样纷纷而至, 我才开始意识到, 更新出问题了. 汇总了一下玩家的反馈: 新注册账号没有问题, 老账号会崩溃 新服务器没有问题, 老服务器崩溃 删除游戏重装后就没有问题了 看着这些条件, 有经验的老司机可能已经看出倪端了, 但当时我并没有看出. 我们平时测试的时候, 多数都会新注册一个账号, 或者将原先的老包删除掉, 所以 Q&amp;A 并没有测试出这个问题, 也没有办法复现这个我问题.","text":"大概是 8 月中旬的时候, 我们项目发生了一个很严重的线上事故. 在版本更新之后, 部分 Android 玩家反馈点击按钮开始游戏或活动按钮会闪退. 开始收到这个反馈时, 并没有太在意, 心想是不是机型适配有问题 ? 加上当时有别的工作在忙, 就没有去理会. 大概一个小时后, 玩家的邮件像雪花一样纷纷而至, 我才开始意识到, 更新出问题了. 汇总了一下玩家的反馈: 新注册账号没有问题, 老账号会崩溃 新服务器没有问题, 老服务器崩溃 删除游戏重装后就没有问题了 看着这些条件, 有经验的老司机可能已经看出倪端了, 但当时我并没有看出. 我们平时测试的时候, 多数都会新注册一个账号, 或者将原先的老包删除掉, 所以 Q&amp;A 并没有测试出这个问题, 也没有办法复现这个我问题. 我们游戏是集成了两个错误统计sdk的, 一个是 Bugtags, 一个是 umeng 错误收集, 但是这两个都是没有办法收集到 native 层面的 crash 的. 正当我一筹莫展的时候, 运营人员发来了 umeng 的这个错误列表, 我恍然大悟: 本地存档出问题了 因为我们的玩家存档是以 服务器id+玩家id 形式存入的, 所以上面列举的问题一下子就解释的通了. 一. 用 getStringForKey 去获取一个 bool 型的存档后台看到的错误日志是这个样子的: java.lang.ClassCastException: java.lang.String cannot be cast to java.lang.Boolean 这也可以? 这个错误闻所未闻, 只能说 Android 那边类型检测太严格了, 同时 cococ 读取存档时没有做异常处理. 有了方向就好办了, 我搜索了代码中所有用到 getStringForKey 的地方, 加上崩溃出现的时机, 很快定位了这个错误发生的原因. 团队的中的一位成员, 这次更新时更换过存档的类型, 之前的某一个数据是以 setBoolForKey/getBoolForKey, 现在更换成了 setStringForKey/getStringForKey, 这个问题不能怪他, 若是我也会遇到这个问题. 修改也很简单, 我换了一个新 key 去 存取/读取 这个存档. 二. setSpriteFrame(“a.png”) 传入不存在的 Sprite Frmae Name 就会崩溃这个问题以前我没有遇到过, 我甚至都不知道 setSpriteFrame 可以传入 Sprite Frmae Name, 我每次都是 从 SpriteFrameCache 中获取一个 SpriteFrame 对象传入的. 导致这个问题发生原因是我们变化了图片打包策略, 之前用的是纹理图集, 现在改为碎片纹理了. 原理这些图片都在一个纹理图集上, 在游戏开始时已经 loading 过了, 所以不会有问题. 但是改为碎图就会找不到了. 12345678910111213141516function newSpriteFrame(_name) assert(_name and _name ~= \"\") -- 尝试在大图中找 local frame = cc.SpriteFrameCache:getInstance():getSpriteFrame(_name) if not frame then local texture = cc.Director:getInstance():getTextureCache():addImage(_name) if texture then frame = cc.SpriteFrame:createWithTexture(texture, cc.rect(0, 0, texture:getContentSize().width, texture:getContentSize().height)) cc.SpriteFrameCache:getInstance():addSpriteFrame(frame, _name) else print(\"[ERROR]no such file:\", _name) end end return frameend 我们封装了这个函数来兼容这个 纹理图集/碎片纹理, 这样这个问题就解决了. 反思每经历一次事故, 总要有所收获, 除了下次同样的问题不再发生, 流程上是否还有什么值得优化的地方 ? 1. 重视线上错误由于我一开对这个错误的轻视, 导致问题没有在第一时间控制住, 损失的不只是收入, 更是玩家对我们信心, 如果一个游戏经常出事故, 你还会去玩吗? 错误率对我们而言只是一个数字, 是一个概率, 但是具体到某一个发生故障的玩家, 对他而言就是 100% , 就是焦急, 愤怒. 2. 真实的线上环境测试这个问题发生, 有很大一部分原因是我们的测试没有在一个真实的环境中去测试, 应该保证一个手机只安装线上包, 模拟真实玩家, 每天去玩一段时间. 3. 错误收集系统的选择我们采用的 bugtags 不具有完全完整的错误收集能力, 对错误的检索也很弱, 甚至不如免费 bugly . 为此我要付一定责任, 当初选择的时候, 没有完整的调研对比过, 只是看到这个还不错就选择了. 做出判断前一定要慎重思考.","categories":[],"tags":[{"name":"Quick-Cocos2d-x","slug":"Quick-Cocos2d-x","permalink":"http://blog.justbilt.com/tags/Quick-Cocos2d-x/"},{"name":"crash","slug":"crash","permalink":"http://blog.justbilt.com/tags/crash/"}]},{"title":"最近搞 iOS 版遇到的一些问题和技巧 (三)","slug":"ios-dev-tips-3","date":"2016-09-05T15:50:12.000Z","updated":"2017-04-23T04:37:20.000Z","comments":true,"path":"2016/09/05/ios-dev-tips-3/","link":"","permalink":"http://blog.justbilt.com/2016/09/05/ios-dev-tips-3/","excerpt":"","text":"一. iOS 内购返回商品无效 invalid product我使用 Quick-cocos2d-x 内置的 store 类请求商品信息时, 收到这样的错误: nvalidProductIdentifiers [CCStore_obj][CCStore_obj] productsRequestDidReceiveResponse() invalid pid: com.xxx.xxx 首先, 检查你请求的商品 id 在 iTunes 后台是否创建, 是否拼写错误. 如果没有问题, 那么就不太好办了, 会有很多原因导致这个问题. ZZB_Amoy 博客的这篇文章总结了下可能的原因, 如下: 创建的App ID是否启用了IAP功能。 商品信息是否配置到iTurn Connect，并到达“Ready to Submit”状态。 在iTurn Connect中创建Test User，并收取邮件激活。之后登录到测试用手机的设置页面中（Store选项）。 App的Bundle Id是否和后台配置的App Id一致。 是否创建相应的provisioning profile，并用此签名App。 iTurn Connect后台配置完商品信息后，是否等待若干小时生效。 SKProductsRequest请求的商品Id必须和iTurn Connect中配置的一致。（如：com.test.product.xxx） iTunes Connect中配置的银行信息是否正确。 是否先删除旧App，再重新编译生成新的。 请不要使用越狱手机测试。 下面说说我两次遇到这个问题的解决方案: 如果游戏发布区域中没有手机中 App Store 当前区的话, 需要先登陆下对应区域创建的测试账号, 将商店切换到对应区域. 完善苹果开发者账号所能完善的信息, 如付款信息呀什么的, 然后莫名其妙就解决了. 商品 id 大小写错误, 在 chrome 搜索时是忽略大小的. 注：在测试阶段，可以不用上传APP软件包，但必须创建测试用Apple Id，并在手机设置中（store选项）登录。 二. iOS 运行崩溃 unrecognized selector sent to instance运行游戏过程中收到如下错误: [1515:710439] -[AppController window]: unrecognized selector sent to instance 0x2c85c00libc++abi.dylib: terminate_handler unexpectedly threw an exception 这个在接入某一个平台 sdk 时遇到的问题, 于是便问了下他们的技术, 很快解决了问题. 1. 修改 AppController.h 中 window 变量的声明形式 2. 修改 AppController.mm 虽然问题解决了, 但是我并不明白各种缘由. Google 了下, 大概明白了, 原来如此. 从错误中我们可以看到这句 [AppController window] , 从语法来看, 这是要调用 AppController 的 window 函数, 但是在我们之前的写法中没有实现这个函数, 便出错了. 而使用 @property 这个东西, 会自动帮你实现一个 window/setWindow 函数, 这样就不会找不到这个函数了. 三. 游戏在低于 ios9 的系统启动崩溃这个也是在接入第三方 sdk 时遇到的问题, 游戏一启动就会崩溃, 收到错误如下: dyld: Symbol not found: _OBJCCLASS$_SFSafariViewController Referenced from: /var/mobile/Applications/CF4146B4-3F79-4644-86CA-F19E52E64BAA/superarmoreddivision.app/superarmoreddivision Expected in: /System/Library/Frameworks/SafariServices.framework/SafariServices in /var/mobile/Applications/CF4146B4-3F79-4644-86CA-F19E52E64BAA/superarmoreddivision.app/superarmoreddivision Google 了一下, 没有任何人遇到过这样的问题, 这就十分棘手了, 完全不知从何入手. 经过一番探索, 找到了几个有用的线索: SFSafariViewController 这个类是 ios 9 才引入的, 这和我们已知的信息相符. 所幸的是我们的游戏有多个 Scheme , 每个 Scheme 接入不同的 sdk . 其他的 Scheme 的都可以正常运行. 这就可以肯定是某个 sdk 中使用了 SFSafariViewController 这个类, 但是还是没有办法定位是那个 sdk . 我不知道是否有一个命令查找符号引用, 因此只能采用最笨的排除法了, 我将引入的 sdk 依次删除, 看是否能够运行. 最终定位到了某个广告统计 sdk , 在询问其 ios 技术人员后得到了解决方案. 原来他们 sdk 需要以 optional 的形式引入 SafariServices.framework. 都怪我没有仔细阅读文档, 白白耽误了一段时间, 下次一定要注意! 四. Facebook 登录崩溃集成 Facebook sdk 时, 调用登录接口游戏就会崩溃, 这个问题 Google 一下就能解决, 解决方案也很简单, 在 Info.plist 中加入下面几行代码即可: 1234567&lt;key&gt;LSApplicationQueriesSchemes&lt;/key&gt;&lt;array&gt; &lt;string&gt;fbapi&lt;/string&gt; &lt;string&gt;fb-messenger-api&lt;/string&gt; &lt;string&gt;fbauth2&lt;/string&gt; &lt;string&gt;fbshareextension&lt;/string&gt;&lt;/array&gt; Stackoverflow 上的答案可以移步这里, Facebook 官网上也给了解答. 五. ios9 状态栏无法隐藏隐藏状态栏在 ios9 上换了一种方式, 还是需要在 Info.plist 中进行配置: 1234&lt;key&gt;UIStatusBarHidden&lt;/key&gt;&lt;true/&gt;&lt;key&gt;UIViewControllerBasedStatusBarAppearance&lt;/key&gt;&lt;false/&gt; Stackoverflow 上的答案可以移步这里. 六. showAlert 诡异崩溃游戏内的一些弹框为了保证在游戏的最上层显示, 偷懒使用了 Quick-cocos2d-x 提供的 device.showAlert 接口. showAlert 内部使用 UIAlertView 实现, 运行一直良好, 有一天突然就不行了, 一调用就崩溃. 各种办法都试过了, 网上都说是线程安全问题, 我试了一下各种处理都不行, 打断点跟踪到最底层也无济于事. 几近绝望之时, @bin 的一句话提醒了我: 会不是屏幕方向的问题 ? 最终一番尝试, 删除了 RootViewController.mm 中几个屏幕方向相关的函数: 12345678910111213141516171819202122232425262728293031*/// Override to allow orientations other than the default portrait orientation.// This method is deprecated on ios6- (BOOL)shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)interfaceOrientation &#123; if (ConfigParser::getInstance()-&gt;isLanscape()) &#123; return UIInterfaceOrientationIsLandscape( interfaceOrientation ); &#125;else&#123; return UIInterfaceOrientationIsPortrait( interfaceOrientation ); &#125; &#125;// For ios6, use supportedInterfaceOrientations &amp; shouldAutorotate instead- (NSUInteger) supportedInterfaceOrientations&#123;#ifdef __IPHONE_6_0 if (ConfigParser::getInstance()-&gt;isLanscape()) &#123; return UIInterfaceOrientationMaskLandscape; &#125;else&#123; return UIInterfaceOrientationMaskPortraitUpsideDown; &#125;#endif&#125;- (BOOL) shouldAutorotate &#123; if (ConfigParser::getInstance()-&gt;isLanscape()) &#123; return YES; &#125;else&#123; return NO; &#125;&#125; 这个 bug 出现之诡异, 解决方案之诡异, 在我遇到的 bug 中也算是很少见了.","categories":[],"tags":[{"name":"iOS","slug":"iOS","permalink":"http://blog.justbilt.com/tags/iOS/"},{"name":"iOS-Dev-Tips","slug":"iOS-Dev-Tips","permalink":"http://blog.justbilt.com/tags/iOS-Dev-Tips/"}]},{"title":"更简洁的 lua 逻辑代码","slug":"terse-lua-code","date":"2016-06-26T06:28:11.000Z","updated":"2017-04-23T04:55:17.000Z","comments":true,"path":"2016/06/26/terse-lua-code/","link":"","permalink":"http://blog.justbilt.com/2016/06/26/terse-lua-code/","excerpt":"","text":"爱因斯坦的质能方程 E=MC^2, 用在编程界同样适用 Error = More Code ^ 2. 代码越多, 出错的可能性就更大, 这个结论很正确呀. 那么我们如何使用更少的代码实现同样的需求呢 ? 一. 普通技 1. bool 值与 if 语句的择决让我们来看一段代码: 123456local monthly_is_taken = app.player:getAttribute(\"monthly_is_taken\")if monthly_is_taken == true then self._monthly_take:setButtonEnabled(false)else self._monthly_take:setButtonEnabled(true)end 显然这个 if 语句是没有必要的, 我们可以直接使用 bool 进行函数参数传递: 12local monthly_is_taken = app.player:getAttribute(\"monthly_is_taken\")self._monthly_take:setButtonEnabled(monthly_is_taken) 我们可以看到减少了 %60 的代码, 逻辑反而变得更清晰了. 2. 减少非必须的中间变量我们都明白了中间变量的意义, 主要是为提高代码的可读性. 但是有时候中间变量的太多, 在增加码量的同时, 也会打断我们的我们的思路. 比如我们要算一个等差数列的和, 我们都知道使用公式 (首项+末项)*项数/2, 我们看一下这个实现: 12345local array = &#123;1,3,5,7,9&#125;local array_len = #arraylocal first_element = array[1]local last_element = array[array_len]local sum = (first_element+last_element)*array_len/2 就不如下面这个实现: 12local array = &#123;1,3,5,7,9&#125;local sum = (array[1]+array[#array])*#array/2 这样的话, 我们上一个示例的代码可以进一步精简: 1self._monthly_take:setButtonEnabled(app.player:getAttribute(\"monthly_is_taken\")) 3. 使用 elseif 优化 if 语句如果是逻辑相悖的判断条件, 我们可以使用 elseif 语句连接, 而不用多个 if 语句. 1234567891011if self.item_id == \"43\" then -- do some thingendif self.item_id == \"69\" then -- do some thingendif self.item_id == \"75\" then -- do some thingend 我们可以修改为: 1234567if self.item_id == \"43\" then -- do some thingelseif self.item_id == \"69\" then -- do some thingelseif self.item_id == \"75\" then -- do some thingend 这样修改后, 对逻辑的执行时间也优化哟, 因为一但有一个 if 语句命中, 后面的 elseif 都不会再去判断了. 4. 使用 config 优化 if-elseif 语句如果一个逻辑中有大量的 if-elseif 语句, 我么就可以使用 config 的形式替换掉它, 使得逻辑更加简洁. 让我们看一个示例: 1234567891011121314if _data.type == GameEnum.MailType.MAIL_TYPE_SYSTEM then self._title:setString(_data.content.content.subtype) self._name:setString(TextEnum.CNReset.SYSTEM) self.title = TextEnum.CNReset.SYSTEM_INFORMATIONelseif _data.type == GameEnum.MailType.MAIL_TYPE_ALLIANCE_KICK then self._title:setString(TextEnum.CNReset.KICK) self._name:setString(TextEnum.CNReset.SYSTEM) self.title = TextEnum.CNReset.KICKelseif _data.type == GameEnum.MailType.MAIL_TYPE_ALLIANCE_JOIN then self._title:setString(TextEnum.CNReset.JOIN_IN) self._name:setString(TextEnum.CNReset.SYSTEM) self.title = TextEnum.CNReset.JOIN_INelseif _data.type == GameEnum.MailType.MAIL_TYPE_ALLIANCE_REJECT then ... 这是一段关于邮件标题的逻辑, 这里只节选出了 1/4 的代码, 真的是又臭又长. 我们可以这样子去优化它: 12345678910111213local CONFIG = &#123; [GameEnum.MailType.MAIL_TYPE_SYSTEM] = &#123;title = XXX, name = XXX&#125;, [GameEnum.MailType.MAIL_TYPE_ALLIANCE_KICK] = &#123;title = XXX, name = XXX&#125;, [GameEnum.MailType.MAIL_TYPE_ALLIANCE_JOIN] = &#123;title = XXX, name = XXX&#125;, [GameEnum.MailType.MAIL_TYPE_ALLIANCE_REJECT] = &#123;title = XXX, name = XXX&#125;, ...&#125;local config = CONFIG[_data.type]if config then self._title:setString(config.title) self._name:setString(config.name)end 因为只是代码节选, 所以上面修改是一段伪代码, 但是看起来超级清爽的有木有! 对于一开始无法确定的数据如何配置呢? 我们可以配置一个 function, 用的时候取出来调用就可以啦. 二. 黑科技1. 数据默认值的设定当我们拿到一段数据后, 总是要先预处理数据, 后面才是使用数据. 预处理阶段很重要的一步就是某些数据的默认值. 123456789101112function sum3(_num1, _num2, _num3) if not _num1 then _num1 = 0 end if not _num2 then _num2 = 0 end if not _num3 then _num3 = 0 end return _num1 + _num2 + _num3end 很繁琐是不是, 这时候我们可以使用 and 和 or 来优化默认值的设置: 123456function sum3(_num1, _num2, _num3) _num1 = _num1 or 0 _num2 = _num2 or 0 _num3 = _num3 or 0 return _num1 + _num2 + _num3end 当 or 的前面部分是 nil 或者 false 的情况下, 返回这个表达式的值后面部分. 下面我列举一下常用类型的默认值用法: 12345678910-- numbera = a or 0-- stringa = a or \"\" -- functiona = a or function()end-- tablea = a or &#123;&#125;-- booleana = a == nil and true 这里值得一提的是 boolean 类型, 如果希望默认值是 false 话, 就不需要默认值, 因为 nil 和 false 对于判断来说以意义一致. 而如果希望默认值是 true 的话, 并不是 a = a or true, 而是 a == nil and true, 大家可以细想一下其中的含义. 2. table 中元素的初始化比如我们要统计一个列表中, 每个元素出现的次数: 12345678local list = &#123;1,2,2,3,1,3&#125;local counter = &#123;&#125;for i,v in ipairs(list) do if not counter[v] then counter[v] = 0 end counter[v] = counter[v] + 1end 因为 counter 不可能提前初始化好, 所以总是要判断存不存在这个元素, 我们也可以利用上面提到的技巧做这个事情: 12345local list = &#123;1,2,2,3,1,3&#125;local counter = &#123;&#125;for i,v in ipairs(list) do counter[v] = (counter[v] or 0) + 1end 是不是变得很简洁 ?","categories":[],"tags":[{"name":"code-style","slug":"code-style","permalink":"http://blog.justbilt.com/tags/code-style/"},{"name":"neat-freak","slug":"neat-freak","permalink":"http://blog.justbilt.com/tags/neat-freak/"},{"name":"Lua","slug":"Lua","permalink":"http://blog.justbilt.com/tags/Lua/"}]},{"title":"最近搞 iOS 版遇到的一些问题和技巧 (二)","slug":"ios-dev-tips-2","date":"2016-06-26T03:38:44.000Z","updated":"2017-04-23T04:37:20.000Z","comments":true,"path":"2016/06/26/ios-dev-tips-2/","link":"","permalink":"http://blog.justbilt.com/2016/06/26/ios-dev-tips-2/","excerpt":"","text":"一. XCode: Could not find Developer Disk Image解决方案:http://www.jianshu.com/p/3930df903a44这个问题可能是因为你 XCode 没有下载对应 iOS 的 SDK 导致, 一般情况需要同步更新 XCode. 二. XCode: 无法导出 Archive 的项目这个问题有可能是你项目 Team 选择的是一个没有开发者资格的账号导致的, 虽然可以正常开发, 真机调试, 但是是不能发布的, 所以也无法 Export .解决方案: 更换一个有开发者资格的账号重新 Archive 导出, 但是 Bundle ID 就得换一个了. 通过命令行工具导出.在 Organizer 中找到你想导出的 Archive, 右键选择在文件夹中显示, 复制路径, 打开终端:1xcodebuild -exportArchive -exportFormat ipa -archivePath your-archive-file-name.xcarchive -exportPath ~/Desktop/test.ipa 三. XCode: App Installation failed很可能是之前手机已经装过一个同 Bundle ID 的应用, 但是现在换了签名.解决方案:删掉手机已经安装的那个应用就可以啦. 四. XCode: Failed to code sign “xxxx”签名失败了, 这种情况一般发生在使用别人给的证书打包时. 这时候我们项目 Build Setting &gt; Code Signing Identity 就不能选择 iOS Developer, 而是要选择导入的签名文件. 五. 内购: 无法连接到 iTunes Store如果没有发布应用的话, 需要用沙盒测试账号来测试. 我们需要先在 设置&gt;iTunes Store 和 App Store中 注销账号, 然后打开游戏, 开始购买, 这时候输入你的测试账号. 成功后如果有跳转 App Store 的话或者绑定付款方式的话, 不同理会, 再返回应用购买就可以了. 六. 崩溃: showAlert 崩溃某一次突然, 一旦调用 Quick-cocos2d-x 提供的 device.showAlert 就会崩溃, 断点调试无果, 崩溃时提示的内容也不尽相同.解决方案:删除 RootViewController.mm 中所有和屏幕方向代码, 就解决啦. 1234- (BOOL)shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)interfaceOrientation- (NSUInteger) supportedInterfaceOrientations- (BOOL) shouldAutorotate- (void)didRotateFromInterfaceOrientation:(UIInterfaceOrientation)fromInterfaceOrientation 七. 崩溃: iOS 9.2+ 播放视频崩溃感谢 @子龙山人 大神提供的解决方案, 点击这里查看. 将 UIVideoPlayer-ios.mm 文件 ~VideoPlayer() 函数中的 dealloc 修改为 release 即可. 12- [((UIVideoViewWrapperIos*)_videoView) dealloc];+ [((UIVideoViewWrapperIos*)_videoView) release];","categories":[],"tags":[{"name":"iOS","slug":"iOS","permalink":"http://blog.justbilt.com/tags/iOS/"},{"name":"iOS-Dev-Tips","slug":"iOS-Dev-Tips","permalink":"http://blog.justbilt.com/tags/iOS-Dev-Tips/"}]},{"title":"Quick-cocos2d-x 适配 IPV6","slug":"quickx-ipv6","date":"2016-06-19T07:39:44.000Z","updated":"2017-04-23T04:37:58.000Z","comments":true,"path":"2016/06/19/quickx-ipv6/","link":"","permalink":"http://blog.justbilt.com/2016/06/19/quickx-ipv6/","excerpt":"","text":"一. IPV6 是啥 ?这两天一个运营的同事跑过来问我: 他: 咱们的游戏适配那啥 VIP6 了么?我: …. 苹果商店在儿童节之后就不允许未适配 IPV6 的应用上架了, IPV6 是啥 ? 需要做些什么呢 ? 看完这两篇文章就明白了: iOS应用支持IPV6，就那点事儿针对苹果最新审核要求为应用兼容IPv6 虽然这两篇文章是针对应用的, 但是从中我们也能了解大概的做法: 不建议使用底层的网络API 不要用IP地址 二. COCOS2D-X 适配 IPV6cocos 依赖的三方库涉及到 IPV6 问题的库为 curl, websocket, cocos 自己提供的模块需要适配的有: HttpClient AssetsManagerEx SocketIO WebSocket Console ScriptingCore cocos 官方也第一时间适配了 IPV6, 具体内容可以看这篇文章:儿童节后苹果爸爸只爱IPv6 Cocos2d-x第一时间支持, 里面描述的很简单: 如果你需要支持纯IPv6网络，只需要更新CURL和libwebsocket网络。 让我们尝试一下. 1. 下载 cocos2d-x-3rd-party-libs-bin这一步看似很简单, 实则不然. 你不会想到从 github 上下载一个 100 多 MB 的文件是多麽困难, 为此我花费了近 2个小时的时间. 我下载的是 99 版的, 解压代用. 2. 更新 curl拷贝解压出来的文件夹中的 curl 目录到 quick-cocos2d-x/external, 替换原来的 curl 目录. 打开 xcode, 编译, 发现有 100 多个错误: 12345678Undefined symbols for architecture i386: &quot;_ASN1_INTEGER_get&quot;, referenced from: _ossl_connect_common in libcocos2d iOS.a(libcurl_la-openssl.o) &quot;_ASN1_STRING_data&quot;, referenced from: _ossl_connect_common in libcocos2d iOS.a(libcurl_la-openssl.o) &quot;_ASN1_STRING_length&quot;, referenced from: _ossl_connect_common in libcocos2d iOS.a(libcurl_la-openssl.o) ... 不要惊慌, 这是因为新版本 curl 多了一些静态库, 我们需要引入它们, 在 XCode 项目输找到 cocos2d_lib &gt; external &gt; curl &gt; ios 目录上右键, 选择 Add Files to &#39;cocos2d_lib.xcodeproj&#39;: 选中 libcrypto.a 和 libssl.a, targets 选择 libcocos2d iOS, 确定, 重新编译, 搞定. 3. 更新 websocket 注: 我们项目并没有用到 websocket , 所以这里只是搞到编译通过, 运行时有木有问题就不到知道了! 和 curl 类似, 拷贝 cocos2d-x-3rd-party-libs 中的 websockets 目录到 quick-cocos2d-x/external, 替换原来的 websockets 目录. 因为最新版的 websockets api 变化挺大, 所以我们需要使用 cocos 最新的 WebSocket.h 和 WebSocket.cpp 替换 quick-cocos2d-x/cocos/network 中的 WebSocket . 编译, 会有一处错误发生在 WebSocket::WebSocket() 中, 因为 quick 中并没有 Director::EVENT_RESET 消息, 我们注释掉这段代码即可. 1234567891011121314151617&#123; // reserve data buffer to avoid allocate memory frequently _receivedData.reserve(WS_RESERVE_RECEIVE_BUFFER_SIZE); if (__websocketInstances == nullptr) &#123; __websocketInstances = new (std::nothrow) std::vector&lt;WebSocket*&gt;(); &#125; __websocketInstances-&gt;push_back(this); // std::shared_ptr&lt;std::atomic&lt;bool&gt;&gt; isDestroyed = _isDestroyed;// _resetDirectorListener = Director::getInstance()-&gt;getEventDispatcher()-&gt;addCustomEventListener(Director::EVENT_RESET, [this, isDestroyed](EventCustom*)&#123;// if (*isDestroyed)// return;// close();// &#125;);&#125; 三. QUICK-COCOS2D-X 适配 IPV61. 如何适配Quick-Cocos2d-x 中主要是 luasocket 的适配, 适配的方法就是选择性的调用 socket.tcp6() 和 socket.tcp(), udp 也是如此. Quick-Cocos2d-x 中调创建 socket 是在 SocketTCP:connect 函数中, 并没有预留 ipv6 参数, 我们需要添加一下: 1234567891011121314function SocketTCP:connect(__host, __port, __retryConnectWhenFailure, __ipv6) if __host then self.host = __host end if __port then self.port = __port end if __retryConnectWhenFailure ~= nil then self.isRetryConnect = __retryConnectWhenFailure end assert(self.host or self.port, \"Host and port are necessary!\") --printInfo(\"%s.connect(%s, %d)\", self.name, self.host, self.port) if __ipv6 then self.tcp = socket.tcp6() else self.tcp = socket.tcp() end self.tcp:settimeout(0) ... 然后, 如果要连接 ipv6 的服务器的话, __ipv6 值传 true 即可. 2. 如何判断一个服务器是 ipv6 还是 ipv4lua 中 socket 的 dns 模块提供了一个函数 getaddrinfo, 可以返回一个服务器的 dns 解析结果数组, 其中一个很重要的字段就是 family, 有 inet 和 inet6 两个值可选. 大家可以运行 dump(socket.dns.getaddrinfo(&quot;ipv6-test.com&quot;)) 看下结果: 12345678910- \"&lt;var&gt;\" = &#123;- 1 = &#123;- \"addr\" = \"5.135.165.173\"- \"family\" = \"inet\"- &#125;- 2 = &#123;- \"addr\" = \"2001:41d0:8:e8ad::1\"- \"family\" = \"inet6\"- &#125;- &#125; 我们遍历一下这个结果, 如果其中有 &quot;family&quot; = &quot;inet6&quot; 的解析, 就可以使用 ipv6 进行连接了, 代码实现如下: 12345678910111213local function isSupportIpv6(_domain) local result = socket.dns.getaddrinfo(_domain) local ipv6 = false if result then for k,v in pairs(result) do if v.family == \"inet6\" then ipv6 = true break end end end return ipv6end 我们将这个函数的结果作为 SocketTCP:connect 的最后一个参数传入即可. 四. 还有什么要注意的1. 一定要使用使用域名向苹果提审的服务器一定要使用域名, 所有的地方都是如此, 包括 http 请求, 热更新返回的 version.md 地址. 2. 做好兼容性测试测试 IPV6 ONLY 的时候使用最新的 iOS 9.3 做测试, 苹果他们审核的时候也是只审核最新的系统是否正常. 但是我们实现的时候要兼容的不同的系统, 网络环境(IPV6 兼容 和 IPV6 ONLY), 因为用户的网络可能是各种各样样, 这些组合都要测试到.","categories":[],"tags":[{"name":"Quick-Cocos2d-x","slug":"Quick-Cocos2d-x","permalink":"http://blog.justbilt.com/tags/Quick-Cocos2d-x/"},{"name":"iOS","slug":"iOS","permalink":"http://blog.justbilt.com/tags/iOS/"}]},{"title":"Quick-cocos2d-x 使用静态库加速 iOS 打包","slug":"quickx-ios-static-lib","date":"2016-05-29T13:20:58.000Z","updated":"2017-07-23T01:28:57.000Z","comments":true,"path":"2016/05/29/quickx-ios-static-lib/","link":"","permalink":"http://blog.justbilt.com/2016/05/29/quickx-ios-static-lib/","excerpt":"","text":"Quick-Cocos2d-x 项目的 iOS 工程使用 Tgarget Dependencise 依赖 cocos2d_lib 和 cocos_lua_bindings 工程. 这样子在 iOS Archive 时会重新编译这两个项目, 十分痛苦, 尤其是一次出七八个渠道的包, 好几个小时就耗在里面了. 为什么不用静态库, 编译出 .a , 使用时直接链接就可以了嘛. 一. 编译静态库找了一下, 原来早已经有小伙伴想到了这点, 这篇文章 Build cocos2d-x fat static library 就特别棒. 从中我们可以发现一个特别有用的脚本 buildstaticlib.sh, 可以直接使用 xcode 工程编译出静态库. 不过这个脚本只能编译出 Release 版, 我修改下可以传入 configuration, 这样我们可以分别编译出 Debug 和 Release 版的静态库啦, 我修改后的文件在这里. 因为我们要编译出多个静态库, 所有又写了另一个脚本 build.sh 调用 buildstaticlib.sh , 内容如下: 1234567./buildstaticlib.sh $QUICK_V3_ROOT/cocos/scripting/lua-bindings/proj.ios_mac/cocos2d_lua_bindings.xcodeproj \"libluacocos2d iOS\" \"Release\"./buildstaticlib.sh $QUICK_V3_ROOT/build/cocos2d_libs.xcodeproj \"libcocos2d iOS\" \"Release\"./buildstaticlib.sh $QUICK_V3_ROOT/cocos/scripting/lua-bindings/proj.ios_mac/cocos2d_lua_bindings.xcodeproj \"libluacocos2d iOS\" \"Debug\"./buildstaticlib.sh $QUICK_V3_ROOT/build/cocos2d_libs.xcodeproj \"libcocos2d iOS\" \"Debug\" 运行成功后会在当前目录生成 4 个 .a 文件, 下一步中将会用到.1234567.├── build.sh├── buildstaticlib.sh├── libcocos2d\\ iOS-debug.a├── libcocos2d\\ iOS.a├── libluacocos2d\\ iOS-debug.a└── libluacocos2d\\ iOS.a 二. 使用静态库使用 XCode 打开 proj.ios_mac 目录下的 xxx.xcodeproj 工程. 1. 移除 Tgarget Dependencise首先移除对 cocos2d_lib 和 cocos_lua_bindings 工程的依赖, 右键点击 Delete 然后选择 Remove reference 就可以. 2. 添加 Other Linker Flags我们静态库的依赖是在这里添加的, 在 Debug 和 Release 选项中分别加入对应的静态库. 这样就完成啦, 尝试一下 Archive 的速度吧 ! 三. 其他1. 调试环境与生产环境我们改成静态库后, 调试 cocos 引擎的代码会多有不便, 而且一旦修改了 cocos 的代码, 就得重新生成静态库, 对于开发阶段太不友好了. 我们的解决方案, 就是再建立一个 debug 工程, 这个工程依旧使用依赖项目的方式编译 cocos , 调试流程和以前一致. 上线打包时则使用我们的静态库版本, 多渠道也做在这个工程中, 享受静态库带来的编译加速. 最终我们的目录结构是这个样子的: 123456789101112.├── runtime-src│ ├── Classes│ ├── proj.android│ ├── proj.android_no_anysdk│ ├── proj.android_studio│ ├── proj.ios_mac│ ├── proj.win32│ └── proj.wp8-xaml└── runtime-src-debug ├── Classes └── proj.ios_mac 2. 生产环境工程瘦身这一步可有可无, 我的代码洁癖又犯了, 所以顺手改了一下. 这时的生产环境除静态库外的内容和调试环境几乎一致, 然而有一些东西是我们用不到的: mac 平台对应的内容 Classes/runtime 下的内容 删除这些时改动了 AppDelegate 中的东西, 这也上一步为什么从 runtimes-src 目录复制了一份. 3. 进一步加速编译这一步我们目前还没有做, 只是一个想法. 修改完使用静态库后, 编译速度得到了很大的提升, 但还没有达到极致, 因为 quick 特有的 c++ 文件还是以文件形式存在于工程中的. 所有 Archive 的时候还是有一百多个源文件需要编译. 如果我们能进一步拆分, 新建一个 lib 工程, 将 quick 的源文件添加和依赖项目添加进去, 我们的游戏只依赖这样的一个静态库, 是否可以达到一个极致的编译速度 ? 4. 静态库文件的版本管理在编译出 debug 版的静态库之前, 我还有想法将这几个静态库压缩上传到 git 上, 编译出 debug 版之后, 我就一个想法, ignore them ! 所以我最终的策略 将这几个 .a 在 git 上忽略掉, 同时在那个目录保留了一个编译脚本, 谁要用到 iOS 项目的时候, 发现没有 .a , 自己运行脚本编译一份就可以啦 ! 5. 编译脚本优化 ?现在那个编译脚本会编译出一个 fat(armv7 armv7s arm64 i386 x86_64) 版的静态库, 内部实现其实是编译了好多次, 导致现在编译时间非常长. 思考: 是否有必要编出 i386 x86_64 版本 ? 看到虾神的一篇文章貌似说可以以 armv7+arm64, i386+x86_64 组合两次打出所有版本. 6. 最终 Archive 出的包会比使用源文件大 ?看到网上有过这个说法, 我没有在修改前后分别 Archive 对比包体, 不太严谨. 但和我之前某一次的包相比, 只大了几百KB, 还不太确定是不是与使用静态库有关系, 大家在修改时可以注意对比一下.","categories":[],"tags":[{"name":"Quick-Cocos2d-x","slug":"Quick-Cocos2d-x","permalink":"http://blog.justbilt.com/tags/Quick-Cocos2d-x/"},{"name":"iOS","slug":"iOS","permalink":"http://blog.justbilt.com/tags/iOS/"}]},{"title":"cocos2d-x 优化游戏资源体积","slug":"compress-res","date":"2016-05-08T11:57:07.000Z","updated":"2017-03-12T01:22:38.000Z","comments":true,"path":"2016/05/08/compress-res/","link":"","permalink":"http://blog.justbilt.com/2016/05/08/compress-res/","excerpt":"","text":"一. 删除无用资源在我们版本迭代的过程中, 总有一些图片被废弃掉, 如果当时忘记删除的话, 久而久之也就忘记了. 如果在上线前不做一次整理的话, 它们就会残存在你的资源中, 浪费包的体积. 为避免这种情况, 我们可以做的是: 1. 废弃的图片一定要及时删除2. 编写废弃资源查找工具可以用到的系统命令是 ack, 我们可以通过 brew install ack 安装, 使用的效果: 关于 ack 的更多用法请移步这里. 二. 使用替代对象1. 使用9图大家都知道图片在拉伸的过程中会失真, 那么如何避免这个情况呢? 使用9图. 注: 配图来自http://mux.baidu.com/?p=1506 这样我们就可以将一张很大的图缩小到很小, 然后使用9图拉伸, 起到节省资源的目的. 9图在 cocos 中的对象是 Scale9Sprite, 具体用法可以参考这篇文章. 2. 通过修改色调实现资源复用知乎上有一篇问题讲的就是这个:拳皇中的人物变色是如何实现的？知乎日报上的这篇 cocos2d-x 版由 @偶尔e网事 大神实现, 对应的对象是 SpriteWithHue, 目前已经默认集成到了 cocos2d-x 中. 这样我们就可以将原来只是色调差异的图片用程序来实现啦~ 3. 使用平铺 注: 配图来自http://bullteacher.com/7-textures.html 游戏中的有些图片完全可以通过平铺实现, 这样的话我们就可以让美术只出一个平铺单元的图片,在程序中去实现平铺. 首先, 平铺的这个功能是 opengl 层面就支持的, 详情大家可以移步这里, cocos2d-x 中实现平铺很简单: 123456-- 首先, 使用平铺单元图片创建一个精灵local sprite = cc.Sprite:create(\"your_repeat_image.png\")-- 然后, 设置纹理参数sprite:getTexture():setTexParameters(gl.LINEAR, gl.LINEAR, gl.REPEAT, gl.REPEAT)-- 最后, 将这个精灵的纹理矩形设置为我们想要的大小sprite:setTextureRect(cc.rect(0,0,1024,1024)) 注意: 平铺单元图片的尺寸只能是2的幂 三. 压缩1. 无损压缩无损压缩还是十分值得推荐的, 它的原理知乎上这个答案讲的很清晰, 我节选其中的关键文字: 1.核心原理很简单，通俗的解释一下，就是由于PNG格式的灵活性，他可以有很多种方式表示同一张图片，不同方式有时就会导致文件大小不一样…2.还有一点是PNG采用的是deflate算法，也非常的灵活，他的压缩率和encoder的实现有关，不同的encoder使用的时间，压缩出来的大小都不一样…3.当然除了上面这两点是真正的无损压缩以外，还有减小PNG文件大小的方式就是去除一些对图片本身没有任何影响的metadata… 所以无损压缩纯粹是单方面的受益, 是一定要做的. 我们无损压缩主要用到的工具: ImageOptim 2. 有损压缩 有损压缩会损失一部分的图片质量, 但带来的受益还是十分可观的. 这是一个抉择的过程, 以最小的代价获取最大的受益, 甚至不能批量处理, 可能需要一张一张的人肉对比压缩. 我们有损压缩主要用到的工具: PP鸭 四. 选择正确的图片格式1. 将无 alpha 通道的 png 图片存储为 jpg2. 选用压缩率更高的图片格式五. 其他1. 圆形图片只使用 1/4然后在程序中翻转3次,得到其他角度的图片. 一般会用在图片尺寸特别大的场景. 如上图, 我们游戏中一个全屏幕的雷达就是通过这个方案减少图片体积的. 2. 缩小图片将展示精度不强的图片(比如: 游戏背景上的小装饰, 爆炸的序列帧)缩小, 在程序中放大. 3. 特殊方案分离png的透明通道用jpg和黑白色png作为遮罩实现透明用shader使图片背景透明cocos2dx中使用JPG图和只带Alpha的PNG图合成渲染 我们之前曾经采取过其中的一个方案, 将一张 png 图片拆分为 jpg+alpha.png 的形式, 整体的包体小了近 25% , 不过也带来的其他的一些副作用. 建议大家使用这类黑科技前一定要做好调研和测试用例, 评估一下实际的收益.","categories":[],"tags":[{"name":"游戏心得","slug":"游戏心得","permalink":"http://blog.justbilt.com/tags/游戏心得/"},{"name":"优化","slug":"优化","permalink":"http://blog.justbilt.com/tags/优化/"}]},{"title":"Quick-cocos2d-x EditBox 几个小技巧","slug":"quickx-editbox-util","date":"2016-05-01T00:56:03.000Z","updated":"2017-04-23T04:37:20.000Z","comments":true,"path":"2016/05/01/quickx-editbox-util/","link":"","permalink":"http://blog.justbilt.com/2016/05/01/quickx-editbox-util/","excerpt":"","text":"我们项目中的输入框使用的都是 EditBox , 但是 EditBox 还存在一些问题, 这里给大家分享一下我们的解决方案. 一. 字体过大用过 EditBox 的同学都知道这样一个情况, EditBox 在创建时是无法传入字体大小的, 字体大小默认和 EditBox 的 size 一致. 如果要修改字体大小的话, 就必须有程序的参与, 十分讨厌. 而我们聪明的设计师 @大勇同学 则想到了一个非常棒的办法, 使用一张透明的9图来创建 EditBox, 后面再放置一个真实效果的 Scale9Sprite , 这样就可以实现字体比边框小很多的输入框了. 二. 多行输入多行输入是一个很有必要的事情, 我们在写邮件, 军团公告等界面都有类似的需求, 然而 EditBox 并不能很好的支持多行输入, 不同平台间也存在差异, 一直很头疼这件事情. 然而团队中另外一位成员 @小齐同学 却用另一种十分脑洞的方案解决了这个问题, 着实让人佩服. 他的思路是这样子的: 创建一个和需求大小一致的 EditBox, 同时创建一个 LalbelTTF , 将 dimensions 属性设置为需求大小. 处理 EditBox 使之看不见, 但又能正常输入, 同时监听输入文字变化事件, 在事件中修改 LalbelTTF 的文字. 核心就是让 EditBox 承担只文字输入的功能, 而让另外一个 LalbelTTF 来承担文字显示的功能. 实现的代码如下: 1234567891011121314151617181920212223242526function EditBoxUtil.multiline(_editbox, _label, _params) _params = _params or &#123;&#125; -- 本来这个应该只是Android上的设置, 但是为了避免平台的差异性, 因此统一处理 _editbox:setCascadeOpacityEnabled(true) _editbox:setOpacity(0) if device.platform == \"android\" then -- 避免文字过大导致Android系统崩溃 _editbox:setFont(\"Helvetica\",2) elseif device.platform == \"ios\" or device.platform == \"mac\" then _editbox:setFont(\"Helvetica\",0) end _editbox:registerScriptEditBoxHandler(function(event) if event == \"began\" then _editbox:setText(_label:getString()) elseif event == \"changed\" then _label:setString(_editbox:getText()) elseif event == \"return\" then _label:setString(_editbox:getText()) end if _params.listener then _params.listener(event, _editbox) end end)end 这段代码和简单, 但背后所遇到的坑却不少, 且听我来道一道: 1. 为什么要调用 setFont如果只是想设置字体大小, EditBox 明明有提供 setFontSize 接口, 为什么要调用 setFont ? 请看 setFontSize 实现: 12345678void EditBox::setFontSize(int fontSize)&#123; _fontSize = fontSize; if (_editBoxImpl != nullptr &amp;&amp; _fontName.length() &gt; 0) &#123; _editBoxImpl-&gt;setFont(_fontName.c_str(), _fontSize); &#125;&#125; 可以看到 setFontSize 在没有设置字体名称 _fontName 时是没有作用的. 2. 为什么要分平台来实现在接入 android 前,我们是没有分平台实现的, 只是 setFont(&quot;Helvetica&quot;,0) , 在 iOS 上没有任何问题, 但是在 Android 上会 catch 到 divide by zero 崩溃, 估计是某一个地方用 fontsize 做被除数了吧 , 于是 Android 上改为设置透明度. 3. Android 输入过多文字后会崩溃(OOM)崩溃在 Cocos2dxBitmap.java 的 getPixels 函数中:1234567891011private static byte[] getPixels(final Bitmap bitmap) &#123; if (bitmap != null) &#123; final byte[] pixels = new byte[bitmap.getWidth() * bitmap.getHeight() * 4]; final ByteBuffer buf = ByteBuffer.wrap(pixels); buf.order(ByteOrder.nativeOrder()); bitmap.copyPixelsToBuffer(buf); return pixels; &#125; return null;&#125; 在 new byte 这里触发了报错的原因是 Out Of Memory 异常 ! 调试发现 bitmap 的宽高惊人的达到了 12000x600 ! 经过 @bin 的提醒, 发现这里可能是因为 EditBox 字体过大的原因, 因为 EditBox 会默认设置字体字体大小和 Scale9Sprite 的 PreferredSize 一直, 就可能设置字体大小为 100+ , 文字一多尺寸当然就上去了! 所以便有了这么一行: 123if device.platform == \"android\" then -- 避免文字过大导致Android系统崩溃 _editbox:setFont(\"Helvetica\",2) 二. 屏蔽 Emoji 输入按照要求游戏中玩家可以输入文字的地方都是不能够输入 Emoji 表情的, 原因有两点: 不同系统间表现存在差异 EditBox Android 版输入确认后会变乱码 后台搜索玩家时不太方便 因此, 我们需要屏蔽 Emoji 表情的输入, 我们有两种做法: 无法输入, 弹出键盘点击表情没有反应 输入完成后, 游戏内点击提交时提示非法 我们采用的是第二种方案, 这个无法通过纯 lua 代码实现, 需要分平台去做. 1. iOS修改 UIEditBoxImpl-ios.mm 文件的 shouldChangeCharactersInRange 函数: 12345678910111213141516171819202122232425262728293031323334353637383940414243- (BOOL)textField:(UITextField *) textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString *)string&#123; __block BOOL returnValue = NO; [string enumerateSubstringsInRange:NSMakeRange(0, [string length]) options:NSStringEnumerationByComposedCharacterSequences usingBlock: ^(NSString *substring, NSRange substringRange, NSRange enclosingRange, BOOL *stop) &#123; if ([substring rangeOfCharacterFromSet: [NSCharacterSet characterSetWithRange:NSMakeRange(0xFE00, 16)]].location != NSNotFound) &#123; returnValue = YES; &#125; const unichar high = [substring characterAtIndex: 0]; // Surrogate pair (U+1D000-1F9FF) if (0xD800 &lt;= high &amp;&amp; high &lt;= 0xDBFF) &#123; const unichar low = [substring characterAtIndex: 1]; const int codepoint = ((high - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000; returnValue = (0x1D000 &lt;= codepoint &amp;&amp; codepoint &lt;= 0x1F9FF); // Not surrogate pair (U+2100-27BF) &#125; else &#123; returnValue = (0x2100 &lt;= high &amp;&amp; high &lt;= 0x27BF); &#125; &#125;]; if (returnValue) &#123; return NO; &#125; if (getEditBoxImplIOS()-&gt;getMaxLength() &lt; 0) &#123; return YES; &#125; NSUInteger oldLength = [textField.text length]; NSUInteger replacementLength = [string length]; NSUInteger rangeLength = range.length; NSUInteger newLength = oldLength - rangeLength + replacementLength; return newLength &lt;= getEditBoxImplIOS()-&gt;getMaxLength();&#125; 这段代码是我从 https://github.com/woxtu/NSString-RemoveEmoji 中提取出来的. 2. AndroidAndroid 上的实现也很简单, 主要是需要创建一个新的 InputFilter 用来过滤 Emoji 表情. 需要修改 Cocos2dxEditBoxDialog.java 文件成员变量添加: 12345678910111213public static InputFilter EMOJI_FILTER = new InputFilter() &#123; @Override public CharSequence filter(CharSequence source, int start, int end, Spanned dest, int dstart, int dend) &#123; for (int index = start; index &lt; end; index++) &#123; int type = Character.getType(source.charAt(index)); if (type == Character.SURROGATE || type == Character.OTHER_SYMBOL || type == Character.PRIVATE_USE) &#123; return \"\"; &#125; &#125; return null; &#125;&#125;; 修改 onCreate 函数 setFilters 处逻辑: 12345if (this.mMaxLength &gt; 0) &#123; this.mInputEditText.setFilters(new InputFilter[] &#123; new InputFilter.LengthFilter(this.mMaxLength), EMOJI_FILTER &#125;);&#125;else&#123; this.mInputEditText.setFilters(new InputFilter[] &#123; EMOJI_FILTER &#125;);&#125; 关于 Emoji 的相关修改都已经推送到了 github 上, 点击这里查看.","categories":[],"tags":[{"name":"Quick-Cocos2d-x","slug":"Quick-Cocos2d-x","permalink":"http://blog.justbilt.com/tags/Quick-Cocos2d-x/"},{"name":"EditBox","slug":"EditBox","permalink":"http://blog.justbilt.com/tags/EditBox/"}]},{"title":"最近遇到的几个 Quick-cocos2d-x  真机崩溃","slug":"quickx-crash-on-phone","date":"2016-04-10T12:14:18.000Z","updated":"2017-04-23T04:37:20.000Z","comments":true,"path":"2016/04/10/quickx-crash-on-phone/","link":"","permalink":"http://blog.justbilt.com/2016/04/10/quickx-crash-on-phone/","excerpt":"","text":"最近这段时间遇到了两次比较严重的真机崩溃问题, 都是之前所没有遇到过的, 特此记录一下, 希望能帮助到遇到类似问题的朋友. 之所以强调真机, 是因为这些问题在 player 上或者 debug 版无法出现, 只有真正运行在手机上才可能遇到, 因为最后我们 Archive 出来的包都是 release 版的. 1. removeFromParentremoveFromParent() 多次会导致崩溃并闪退, 很难以想象是吧, 在我的记忆中应该只是抛出一个 lua 错误. 事实上, debug 版确实如此, 让我们看一段测试代码: 12self._btnLogin:removeFromParent()self._btnLogin:removeFromParent() player 上会收到如下的 lua 错误提示: 1LUA ERROR: [string \"xxx.lua\"]:349: invalid 'cobj' in function 'lua_cocos2dx_Node_removeFromParentAndCleanup' 让我们看下抛出这个错误的地方 lua_cocos2dx_Node_removeFromParentAndCleanup : 1234567#if COCOS2D_DEBUG &gt;= 1 if (!cobj) &#123; tolua_error(tolua_S,\"invalid 'cobj' in function 'lua_cocos2dx_Node_removeFromParentAndCleanup'\", nullptr); return 0; &#125;#endif 第一次调用完 removeFromParent(), _btnLogin 的 c++ 对象就已经被释放了, 再次调用 cobj 就是 NULL 了, 所以就会进入到这个判断中, 从而抛出错误. 但是这段代码却是运行在 COCOS2D_DEBUG 宏中的, 就意味着这段代码在 release 版是不生效的, 所以就会接着往下执行, 从而导致崩溃. 虽然我们不太可能直接会用一个对象调用 removeFromParent 多次, 但是包含 removeFromParent 的函数被调用多次却是很有可能的, 所以我们一定要养成一个好的习惯, 在 removeFromParent 之前要做判空检测, 之后要立刻置空: 1234if xxx then xxx:removeFromParent() xxx = nilend 2. Signal 13 was raised. SIGPIPE当游戏在 iOS 上不切换到后台直接锁屏一段时间, 网络资源就会被系统回收掉, 这时候解锁屏幕, 游戏并不知道 tcp 连接已经断开, 发送消息就会触发这个崩溃. 表现出来的效果是手机解锁不了, 得等好久才可以. 关于具体技术解释, 大家可以看这篇文章, Signal 13 was raised（SIGPIPE管道破裂）, 我这里重点讲解决方案. 网上说有两种解决方案(如何在 iOS 上避免 SIGPIPE 信号导致的 crash): 1. 在全局范围内忽略这个信号1signal(SIGPIPE, SIG_IGN); 2. 在一开始的时候设置 socket 不要发送 SIGPIPE 信号12int value = 1;setsockopt(sock, SOL_SOCKET, SO_NOSIGPIPE, &amp;value, sizeof(value)); 就 1 来说, cocos 早已设置了忽略, 在 socket_open 函数中, 并且这的执行到了. 我在 tcp.c 中的 tcp_create 中加入 2 方案, 确实解决了这个问题. 但是 SO_NOSIGPIPE 并不是跨平台的, 我偷懒直接用宏判断了下: 12345678910111213static int tcp_create(lua_State *L, int family) &#123; t_socket sock; const char *err = inet_trycreate(&amp;sock, family, SOCK_STREAM); /* try to allocate a system socket */ if (!err) &#123; ... #ifdef CC_TARGET_OS_IPHONE int val = 1; setsockopt(sock, SOL_SOCKET, SO_NOSIGPIPE, (void *)&amp;val, sizeof(int));#endif ...&#125;","categories":[],"tags":[{"name":"Quick-Cocos2d-x","slug":"Quick-Cocos2d-x","permalink":"http://blog.justbilt.com/tags/Quick-Cocos2d-x/"},{"name":"crash","slug":"crash","permalink":"http://blog.justbilt.com/tags/crash/"}]},{"title":"最近搞 iOS 版遇到的一些问题和技巧","slug":"ios-dev-tips","date":"2016-04-04T01:13:34.000Z","updated":"2017-03-12T04:19:57.000Z","comments":true,"path":"2016/04/04/ios-dev-tips/","link":"","permalink":"http://blog.justbilt.com/2016/04/04/ios-dev-tips/","excerpt":"","text":"一. 编译运行1. 运行时提示 identity 无效 The identity used to sign the executable is no longer valid.Please verify that your device’s clock is properly set, and that your signing certificate is not expired. (0xE8008018). 解决方案: 打开 Preferences &gt; Accounts 选中项目对应的 Apple ID &gt; 点击右下角 View Details... 点击弹出框左下角的 Download All &gt; 等待完成后点击 Done 关闭 再次运行项目, 等待弹出框, 点击 reset. 2. iPhone5 上获得的设备尺寸为 960x640表现出来是竖屏游戏上线有黑边, 跟踪发现获得的设备尺寸为 960x640, 而非 1136x640. 解决方案: 添加一张尺寸为 1136x640 名为 Default-568h@2x.png 的启动图即可. 参考资料:http://discuss.cocos2d-x.org/t/getframesize-get-wrong-screen-size/7657 3. XCode issue 页面只显示错误, 不显示警告cocos2d-x 在 XCode 中编译 warning 太多, 出错后 error 会被淹没在一大堆的警告中, 得拖动半天才能找得到. 解决方案: 在页面最下方有一个感叹号型按钮, 点击选中即可. 二. 上传应用1. 多任务支持 XCode 7 error: “A launch storyboard or xib must be provided unless the app requires full screen” 解决方案: 我们勾上全屏即可: 目前就这些, 后面会持续更新 !","categories":[],"tags":[{"name":"iOS","slug":"iOS","permalink":"http://blog.justbilt.com/tags/iOS/"},{"name":"iOS-Dev-Tips","slug":"iOS-Dev-Tips","permalink":"http://blog.justbilt.com/tags/iOS-Dev-Tips/"}]},{"title":"记一次 Quick-cocos2d-x 内存泄露排查","slug":"quickx-memery-leak","date":"2016-03-19T09:48:38.000Z","updated":"2017-04-23T04:37:20.000Z","comments":true,"path":"2016/03/19/quickx-memery-leak/","link":"","permalink":"http://blog.justbilt.com/2016/03/19/quickx-memery-leak/","excerpt":"","text":"这周 @bin 告诉我项目有比较严重的内存泄露, 任意一个界面不停的打开关闭, 内存占用会一直往上涨, 直到被系统 kill 掉. 一. 确定问题收到问题后, 我简单写了一段测试代码, 加载/移除界面 100 次, 对比内存变化: 1234567891011121314local index = 0local handler = nilhandler = scheduler.scheduleGlobal(function( ... ) -- 加载界面 app.sceneManager:pushLayer(require('app.scenes.PageShop').new()) self:performWithDelay(function( ... ) -- 移除界面 app.sceneManager:popLayer() index = index + 1 if index &gt;= 100 then scheduler.unscheduleGlobal(handler) end end, 0.5)end, 0.5) 为了方便, 我没有进行真机测试, 而是使用 xcode 启动 player 来进行测试, 在 Xcode 的 Debug Navigator/Memory Report 窗口查看结果. 在测试前的平稳内存为 194M , 测试后惊人的达到了 258M, 十分严重的内存泄露了! 二. 初步解决问题由于项目是纯 lua 的, 所以不太可能是数据和逻辑的问题, 那么很有可能是视图(cocos2d-x 对象)存在内存泄露. 而每一个界面都存在问题, 那么很可能是某个通用组件存在问题. 经过一番努力, 最终成功找到了内存持续增加的原因, 一共两处: 1. lua 垃圾没有及时回收lua 的垃圾是会自动回收的, 但我们有时候可能需要手动回收下, 比如切换场景时, 关闭界面时, 主动回收的代码很简单: 1collectgarbage(&quot;collect&quot;) 我将这段代码加到了统一关闭界面的地方. 更多关于 lua 垃圾回收的具体问题大家可以参考这个两篇文章: http://luatut.com/collectgarbage.htmlhttp://www.codingnow.com/2000/download/lua_manual.html 2. 精灵变灰和高亮的 shader 创建后一直没有释放123456789101112function GameUtils.SetSpriteGrey(sprite,is_grey) if sprite and sprite.setGLProgramState then if is_grey then local pProgram = cc.GLProgram:createWithByteArrays(ShaderData.vertDefaultSourceGrey, ShaderData.pszFragSourceGrey) ... sprite:setGLProgram(pProgram) else local pProgram = cc.GLProgramState:getOrCreateWithGLProgram(cc.GLProgramCache:getInstance():getGLProgram(\"ShaderPositionTextureColor_noMVP\")) sprite:setGLProgramState(pProgram) end endend 这段代码看起来没有任何问题, 我能想到只是没有用 GLProgramCache 缓存起来, 造成每次都会创建的效率问题, 应该不会导致泄露吗 ? 精灵被释放时难道不会自动释放所引用的 GLProgram 吗? 因为当时项目比较紧急, 我将这段代码使用 GLProgramCache 的形式修改了一下, 惊奇的发现内存泄露问题竟然解决了. 修改后的代码如下: 12345678910111213141516171819function GameUtils.SetSpriteGrey(sprite,is_grey) if sprite and sprite.setGLProgramState then if is_grey then local pProgram = cc.GLProgramCache:getInstance():getGLProgram(\"ShaderPositionTextureColor_Gray\") if not pProgram then pProgram = cc.GLProgram:createWithByteArrays(ShaderData.vertDefaultSourceGrey, ShaderData.pszFragSourceGrey) pProgram:bindAttribLocation(cc.ATTRIBUTE_NAME_POSITION, cc.VERTEX_ATTRIB_POSITION) pProgram:bindAttribLocation(cc.ATTRIBUTE_NAME_COLOR, cc.VERTEX_ATTRIB_COLOR) pProgram:bindAttribLocation(cc.ATTRIBUTE_NAME_TEX_COORD, cc.VERTEX_ATTRIB_FLAG_TEX_COORDS) pProgram:link() pProgram:updateUniforms() cc.GLProgramCache:getInstance():addGLProgram(pProgram, \"ShaderPositionTextureColor_Gray\") end sprite:setGLProgram(pProgram) else sprite:setGLProgram(cc.GLProgramCache:getInstance():getGLProgram(\"ShaderPositionTextureColor_noMVP\")) end endend 三. 隐藏在背后的秘密问题解决了, 那么是不是可以结束了呢 ? 并不能, 晚上回到家我就一直在思考这个问题, 倒是是什么原因导致了 GLProgram 内存没有释放, 而使用 GLProgramCache 就没有问题. 莫不是 cocos2d-x 的 bug ? cocos 对象是基于引用计数去自动释放内存的. 我排查了几处可疑的地方: GLProgram::createWithByteArrays 调用了 autorelease Node::setGLProgram 调用了 retain Node::~Node 调用了 release 貌似都没有问题. 那么我可以跟踪下引用计数的变化, 看看是哪一步出现的问题! 经过一番调试,最终定位到了问题, 大家请看: 1.Node::setGLProgram 进入到 GLProgramState::getOrCreateWithGLProgram, 这一步没有什么问题. 2.这里有一个新的缓存 GLProgramStateCache , 进入它到 getGLProgramState 函数. 3.这一步是 GLProgramStateCache 的核心代码了, 判断有无在缓存中, 没有则 insert 到末尾. 这里的 _glProgramStates 是一个 Map , 而这个 map 竟然是以传递进来的 glprogram 做 key , 而我们每次传递进来的 glprogram 都是新创建的, 所以在我们这个使用情况下缓存根本是无效的. 4.让我看一下, GLProgramState 的 init 函数, 这下找到 retain 地方了. 这样的话, 就讲得通了, GLProgram 会在 GLProgramState 析构的时候 release 掉. 而 GLProgramState 只会在 GLProgramStateCache:removeAllGLProgramState 释放掉. 而 removeAllGLProgramState 只有在手动或者游戏退出的时候才会调用. OK, 这下定位到了问题, 虽然我们使用有些问题, 但 GLProgramStateCache 设计确实有不合理的地方, 大家记得正确用法就好了, 就是 shader 一定要使用 GLProgramCache ! 后记 通过这次解决问题, 我有一个特别大的收获. 就是做优化工作时一定不能去猜, 要有数据和逻辑的支持.","categories":[],"tags":[{"name":"Quick-Cocos2d-x","slug":"Quick-Cocos2d-x","permalink":"http://blog.justbilt.com/tags/Quick-Cocos2d-x/"},{"name":"MemoryLeak","slug":"MemoryLeak","permalink":"http://blog.justbilt.com/tags/MemoryLeak/"}]},{"title":"在 Quick-cocos2d-x 中使用 TableView","slug":"quickx-tableview","date":"2016-03-13T00:02:53.000Z","updated":"2017-04-23T04:37:20.000Z","comments":true,"path":"2016/03/13/quickx-tableview/","link":"","permalink":"http://blog.justbilt.com/2016/03/13/quickx-tableview/","excerpt":"","text":"上篇文章说到使用 TableView 可以大幅提升界面的创建速度, 这篇文章我们来看看如何在 quick 中使用它. 一. 基本用法1. 创建对象首先, 创建一个 TableView 对象: 1local view = cc.TableView:create(cc.size(480,320)) 传入的那个 size 是 viewsize, 即可视区域的尺寸, 后期也可以通过 setViewSize 来调节. 2. 设置填充顺序下面设置填充顺序, 默认是从下往上填充, 我们习惯了使用从上往下填充, 所以需要修改下:1view:setVerticalFillOrder(cc.TABLEVIEW_FILL_TOPDOWN) 其可选值如下:12cc.TABLEVIEW_FILL_TOPDOWN = 0 -- 从上自下cc.TABLEVIEW_FILL_BOTTOMUP = 1 -- 从下自上 这个值最终会影响所有 cell 的顺序, 具体些是第 0 个元素在最上面还是在最下面. 3. 注册事件监听TableView 提供了好多事件, 具体作用如下: 123456789cc.SCROLLVIEW_SCRIPT_SCROLL = 0cc.SCROLLVIEW_SCRIPT_ZOOM = 1cc.TABLECELL_TOUCHED = 2cc.TABLECELL_HIGH_LIGHT = 3cc.TABLECELL_UNHIGH_LIGHT = 4 cc.TABLECELL_WILL_RECYCLE = 5cc.TABLECELL_SIZE_FOR_INDEX = 6 -- 获取节点尺寸的回调cc.TABLECELL_SIZE_AT_INDEX = 7 -- 获取对应位置节点的回调cc.NUMBER_OF_CELLS_IN_TABLEVIEW = 8 -- 获取节点数量的回调 但其实真正有意义的就三个, 6,7,8. 其他的根本不会回调, 注册了也没有什么用. 注册监听使用 registerScriptHandler 函数. 1). 注册节点数量回调123view:registerScriptHandler(function() return 10 -- 假如有10个节点end, cc.NUMBER_OF_CELLS_IN_TABLEVIEW) 返回节点数量. 2). 注册获取节点尺寸的回调若是每个节点一致, 则可以返回一个固定尺寸; 若不一致, 可以根据 idx 去取出对应节点的尺寸. 12345678910view:registerScriptHandler(function(table, idx) -- 默认尺寸 local size = self.defaultSize local cell = view:cellAtIndex(idx) if cell then -- cell.view 属性是在线面创建 cell 时赋值的. size = cell.view:getBoundingBox() end return size.height, size.widthend, cc.TABLECELL_SIZE_FOR_INDEX) 注意, 这里如果是纵向滚动的话,返回顺序是高,宽; 横向滚动的话则返回宽,高. 3). 获取对应位置节点的回调这个回调的名称和上面那个很像, 有时候会分不清楚. 12345678910111213view:registerScriptHandler(function(table, idx) local cell = table:dequeueCell() if nil == cell then cell = cc.TableViewCell:new() cell.view = self.class.new() :pos(self.class.designSize.width/2, self.class.designSize.height/2) :addTo(cell) end -- 如果需要刷新的话, 可能需要自己去处理, 如不需要, 就可以不用下面的这个调用 cell.view:refresh() return cellend, cc.TABLECELL_SIZE_AT_INDEX) 3. 获取/新增/修改/删除节点这些操作分别对应 cellAtIndex/updateCellAtIndex/insertCellAtIndex/removeCellAtIndex . 这些接口很好理解, 但就多数情况而言, 他们可能需要和 reloadData 配合使用. 好了, 以上就是基本用法了. 在使用时还有一些需要注意的细节: 不能使用 setNodeEventEnable, 因为和 Node 的 registerScriptHandler 有冲突. id 从 0 开始, 而大家在 lua 这边准备的数据多是以 1 开始, 这样可能需要 +1 和 -1, 需要细心一些. 二. 一些异常的解决方案1. lua 出错导致 player 崩溃TableView 回调 tableCellAtIndex 在lua这边的实现一旦出错, 就会在 c++ 那边收到一个 NULL 的 cell, 因为没有判空, 下面对 cell 的操作就会导致 Plaer 崩溃. 对应修改如下: 12345678 cell = _dataSource-&gt;tableCellAtIndex(this, idx);- this-&gt;_setIndexForCell(idx, cell);- this-&gt;_addCellIfNecessary(cell);+ if(cell)+ &#123;+ this-&gt;_setIndexForCell(idx, cell);+ this-&gt;_addCellIfNecessary(cell);+ &#125; 这时候, 不会崩溃了, 但是也看不到 lua 那边出的什么错误, 经过一番追踪, 定位到了 LuaStack::executeFunction 函数: 1234567891011121314 if (error) &#123; if (traceCallback == 0) &#123; CCLOG(\"[LUA ERROR] %s\", lua_tostring(_state, - 1)); /* L: ... error */ lua_pop(_state, 1); // remove error message from stack &#125; else /* L: ... G error */ &#123;+ CCLOG(\"[LUA ERROR] %s\", lua_tostring(_state, - 2)); /* L: ... error */ lua_pop(_state, 2); // remove __G__TRACKBACK__ and error message from stack &#125; return 0; &#125; 虽然出错了, 但是 traceCallback 的值并不等于 0, 所以没有进入输出错误的逻辑, 具体用意并不明白. 我的添加了带 + 号的哪一行, 输出了下就可以看到 lua 的错误了. 2. 滚动后导致节点上按钮触摸失效大家使用时可能会遇到这样的问题, 节点上有一个利用 quick 触摸机制实现的按钮, 在 TableView 滚动后触摸事件都会失效, 按钮无法被点击. 这个实际上是 quick 触摸机制的一个bug, 复现是很容易的. 大家创建一个按钮并调用 retain, 然后将这个按钮添加到父节点上, 在某个时候将按钮从父节点上移除 (removeFromParent) 并再次添加(addChild)上到父节点. 这时候按钮还在, 但是触摸事件已经没有了. 究其原因是我们一般会在对象的 ctor 函数中 setTouchEnable, 然后 quick 在收到 cleanup 事件后移除了对象触摸事件, 具体逻辑大家可以看 Node:EventDispatcher 函数. 而一个节点从父节点上移除时恰好会发送 cleanup 事件. 对应到 TableView 中来, TableViewCell 为了做到复用在 dequeueCell 时会调用 retain 函数, 并且在移出屏幕时会被从 Container 上移除掉的. 这样 TableViewCell 的所有子节点都会收到对应的 cleanup 事件. 这个问题的解决方案恰好是我之前写的一篇文章, 为 quick-cocos2d-x 添加析构事件, 在这篇文章中, 已经修改为收到 destroy 事件后才去移除节点的触摸事件, 非常完美的解决了这个问题. Update: 2016-04-24 3. 遮挡上层按钮触摸事件经过这几天的使用, 我发现了一个十分严重的问题. 如下图所示, TableView 中的某个按钮拖出 ViewRect 范围后会不可见, 但如果其位置恰好在 TableView 外的另一个按钮范围内, 就会优先收到点击事件. 这就会引发十分奇怪的现象, TableView 外的按钮看得见点不着, TableView 内的按钮看不见却可以响应到, 十分影响体验. 因为有着以往 cocos 2.x 的悲惨经历, 我非常武断的认为这肯定是 TableView 的 bug, 开始着手阅读 TableView 的代码实现, 却一直未果. 然而团队中另外一位成员 @小齐同学 的意外发现, 让这个问题的谜底在无意中就被揭开了. 我们在项目中大量使用了 Quick-cocos2d-x 提供的一个控件 UIScrollView, 它是一个用 ClippingRegionNode 纯 lua 实现的 CCScrollView, 一直以来工作的十分良好. 但是在某一天 测试中, @齐少 意外的发现, 某个界面的 UIScrollView 出现了和 TableView 一模一样的问题, 导致上层按钮无法点击. 经过排查, 发现是因为 UIScrollView 的创建顺序被延后的原因, 如果一个按钮先于 UIScrollView 添加到父节点, 就会被 UIScrollView 中的按钮所屏蔽, 后添加则不会. 当 @齐少 告诉我这个结论后, 我立刻意识到, TableView 遇到的问题肯定也是这个原因, 查看代码后果然如此, TableView 是最后被创建的. 解决方案也十分简单, 将 TableView 外部按钮放到 TableView 之后去创建就可以啦. 恩, 以上就是我在使用 TableView 时遇到的所有问题了, 虽然解决了这些问题, 但是在使用上还是十分的繁琐. 若是在一两个界面上使用可能还可以接受, 但若是想大规模推广就很有些困难了, 代码会变得十分冗长. 在此基础上, 我们又对 TableView 进行了一次封装, 数据驱动, 使用时不用过分关注界面的逻辑, 中心更多的落在了数据的组织上, 真正的做到了 “开箱即用” , 等我们内部进行推广并稳定后可以再和大家分享下心得.","categories":[],"tags":[{"name":"Quick-Cocos2d-x","slug":"Quick-Cocos2d-x","permalink":"http://blog.justbilt.com/tags/Quick-Cocos2d-x/"},{"name":"TableView","slug":"TableView","permalink":"http://blog.justbilt.com/tags/TableView/"}]},{"title":"游戏性能优化 - 界面篇","slug":"game-optimize","date":"2016-03-06T15:46:48.000Z","updated":"2017-03-12T01:22:38.000Z","comments":true,"path":"2016/03/06/game-optimize/","link":"","permalink":"http://blog.justbilt.com/2016/03/06/game-optimize/","excerpt":"","text":"最近几天都在做性能优化方面的事情, 关于优化, 之前的经验也都是泛泛而谈, 知道有几条路线可以走, 但一直没有去实践过. 所以刚开始搞的时候, 也是两眼一抹黑, 走了不少弯路, 最后也是受益匪浅, 这里记录一下我们的思路, 也是为下次优化提供一个可行的方案. 在测试的时候, 不少界面界面卡顿十分严重, 主要分为三个方面, 分别是 打开界面卡顿, 操作界面卡顿, 关闭界面卡顿 . 不开玩笑, 确实如此 ! 经过分析, 这些界面多有许多共同的特征: 界面包含多个页签 界面含有 ScrollView 在看具体业务逻辑的时候, 发现了很多的问题. 下面就和大家细说一下优化方案. 打开界面总结一下, 打开界面卡顿的主要原因是: 界面创建时做了太多的事情. 对于多页签界面, 为了不在点击切换标签时有卡顿的感觉, 打开界面时创建了所有标签页的内容. 如下图: 这个其实没有必要, 不这样做的话可以将加载时间分摊到每次点击标签的时候, 再优化下每个标签页的创建速度, 切换标签时就几乎感觉不到卡顿的. 然后我们缓存注这些界面, 下次切换就会更流畅了. 对于 ScrollView , 如果子节点数量很多的话, 就会奇卡无比, 因为会在初始化时创建所有的子节点! 对于这个我们做了两点优化: 1. 优化子节点 node 数量我们一个子节点可能有多个互斥的状态, 美术拼界面时会把所有的状态都拼在界面里, 程序再根据具体状态 setVisible , 这样就非常的浪费. 为此我们实现了在 ccb 中标记节点状态的功能, 所有不属于基本 ui 状态的节点树都不会被创建, 用到时候手动 init , 这个实现对性能的提升非常显著. 2. 针对性选择使用 TableView我一般情况下不建议使用 TableView, 因为它的创建方式十分复杂, 使用起来也诸多不便, 更重要的是会破坏串行的ui创建逻辑. 但不得不承认, 某些情况下它对性能的提升非常有帮助, 尤其是在子节点的数量达到 20 个以上的时候, 简直是质的飞跃. 但是基于 TableView 十分难用, 加上 lua 这边逻辑出错后并不会抛出, debug 十分痛苦. 为此我们修改了一些 TableView 的源码, 同时在 lua 这边有封装了一层, 做到了数据和界面的分离. 当然 quick-3.3 的 TableView 坑不止这些, 感觉不做些修改基本没法使用. 具体细节, 我会在下一篇文章中和大家细说. 对于其他情况, 若是界面需要加载的东西特别多, 点击后会有几近卡死的状态, 同时因为顶点数量居多, 若是同时渲染背景场景和该界面, 会进一步加剧卡顿效果. 顶点数量巨多的界面加 loading 动画 这个 loading 不同于切换场景的 loading, 可以做的非常轻, 非常简单, 用来避免同时渲染两个界面导致帧率剧降的情况. 可以是一个门, 门关上时, 前一个界面就不渲染了, 这时在门的后面加载显示新的界面, 隐藏(自动剔除)旧的界面, 门打开, 这时只有新的界面会被渲染出来了. 可能同时渲染两个界面感觉不到这么明显的变化, 但是我们的前一个界面是大基地, 有将近 4000 个顶点, 150 多渲染批次, 这样就会十分明显了. 操作界面操作界面卡顿主要发生在含有 ScrollView 的界面, 我看了下逻辑, 在数据发生变化时, 会将 ScrollView 的所有节点都移除掉, 重新创建. 这样完全就是一个偷懒的做法, 应当是哪里有数据变化就刷新哪里, 那些数据删除了, 就删除掉对应的子节点, 那些数据是新增的, 就创建一些新的节点加入进去. 这个问题高端机可能觉察不到, 一到 Android 渣机就卡成狗, 完全没法玩. 这里得出的经验就是, 平时测试的时候一定要找一个渣机. 关闭界面关闭界面时的主要问题是动画不流畅, 代码并没有太大的问题. 我们的关闭界面有一个动画, 整个层淡出并向下移动. 这样就会在动画的过程中露出下面的基地界面, 导致同时渲染顶点数剧增, 帧率骤降, 表现出来的现象就是 “三帧-咔咔咔”. 解决方案也很简单, 去掉这个动画就, 改成直接移除. 如果大家观察一下其他游戏, 在关闭界面时也多是没有动画的. 以上就是我们针对界面做的优化, 没有上代码, 多是理论思路和操作方法. 同时我针对内部小伙伴也写了一篇文章, 内容多是类似, 但是会有一些具体代码上讲解. 大家若是有兴趣的话, 也可以点击这里阅读, 若是有什么疑问及见解, 欢迎指出.","categories":[],"tags":[{"name":"游戏心得","slug":"游戏心得","permalink":"http://blog.justbilt.com/tags/游戏心得/"},{"name":"优化","slug":"优化","permalink":"http://blog.justbilt.com/tags/优化/"}]},{"title":"将 untp 发布到 Pypi 上","slug":"publish-untp-to-pypi","date":"2016-02-29T15:33:24.000Z","updated":"2017-03-12T01:22:38.000Z","comments":true,"path":"2016/02/29/publish-untp-to-pypi/","link":"","permalink":"http://blog.justbilt.com/2016/02/29/publish-untp-to-pypi/","excerpt":"","text":"上一篇年结的时候有提到 untp 这个小工具, 它是我在 github 收获 star 数最多的一个项目. 这个项目本是无心之举, 既然受大家欢迎, 那么一定要好好维护下去 ! 对于它后续的发展, 我打算从两个方面入手: 更便捷的安装 支持更多的格式 之前唯一一次发布时用 PyInstaller 打包成可执行文件来发布的, 很方便, 出来的安装包也很小! 但是我时常会收到在 Mac 上崩溃的反馈: 1illegal instruction 4 在这个错误上我花费了特别大的精力, 因为在推荐给朋友的时候吹得天花乱坠, 实际却完全运行不起来, 这也太不给我面子了吧. Google 上对于这个问题也是众说纷纭, 没有一个能帮到我. 我尝试过各种解决方案, 升降级 PyInstaller, 用 Python3 重写, 用 PyQtDeploy 打包. 但却总是无功而返. PyQtDeploy 倒是可以解决问题, 但是打的包足足有 30~40MB , 想想还是算了吧. 最后我仔细想了想, 在 Mac 上完全没有必要打包成一个可执行文件呀, 系统自带 python 环境, 直接通过 pip 安装一下就可以了嘛 ~ 关于如何制作,上传,发布自己的项目, 推荐大家阅读这篇文章 发布python的包至pypi服务器 , 文章写的很好, 里面已经提到内容我在下面就不赘述了. 1. 制作 setup.py我的 setup.py 文件如下: 12345678910111213141516171819202122from setuptools import setup, find_packagessetup( name = 'untp', version = '1.0.2', keywords = ('untp', 'texturepacker'), description = 'A command line tool to split TexturePacker publish file.', license = 'MIT License', install_requires = [ 'Pillow', 'parse' ], url = 'https://github.com/justbilt/untp', author = 'justbilt', author_email = 'wangbilt@gmail.com', scripts=['untp.py'], entry_points=&#123; 'console_scripts': [ 'untp = untp:main', ], &#125;) entry_points使用 entry_points 字段, 可以为项目添加可执行命令, 在我上面的配置中, 我就添加了 untp 这个名命令, 会执行 untp.py 的 main 函数. 关于 entry_points 的更多用法, 可以参考这篇文章 Automatic Script Creation . scripts这里面值得一提的是 scripts 字段, 这个字段好多文章都没有提, 但是在我这里却引发了一个大问题. 我的目录结构如下: 1234untp├── README.md├── setup.py└── untp.py 因为项目比较小, 我就直接将 untp.py 直接裸露在项目根目录, 开始没有添加 scripts 字段, 打包安装 import 都没有问题, 但是运行 untp 时却会报最经典的 ImportError 错误: 12345678wanghaitaodeMacBook-Air:untp bilt$ untpTraceback (most recent call last): File \"/usr/local/bin/untp\", line 9, in &lt;module&gt; load_entry_point('untp==1.0.2', 'console_scripts', 'untp')() ... File \"/usr/local/lib/python2.7/site-packages/pkg_resources/__init__.py\", line 2361, in resolve module = __import__(self.module_name, fromlist=['__name__'], level=0)ImportError: No module named untp 然后我就要疯了, 这里什么个鬼情况 !!! 直到我看到了这个问答: module-not-found-during-load-entry-point-in-python . 我才意识到, 原来我一直都没有安装对, 之所以能够 import 成功, 是因为我就在当前 (untp.py) 目录运行的 python 终端. 然后去啃官方文档, 经过一番尝试, 其他人使用的 packages = find_packages(), 在我这里并不好使, 只有手动指定 scripts 才可以 ! 2. 测试我还是推荐大家先在 testpypi.python.org 上测试正确了再上传到正式的 pypi.python.org, 因为一但在正式服务器提交了, 就必须以版本号迭代的代价来更正上次提交. 而在测试服务器上发现问题的话, 登录删除一下有问题的版本就可以了! testpypi 也是需要注册的, 和 pypi 的注册方法一致, 注册完别忘了去邮箱验证一下. 注意上传的时候不一定会成功, 说在 .pypirc 中找不到 testpypi 的配置, 解决方案可以看这里: Test PyPI Server . 123python setup.py register -r https://testpypi.python.org/pypipython setup.py upload -r https://testpypi.python.org/pypipip install -i https://testpypi.python.org/pypi &lt;package name&gt; 然后使用上面几条命令进行测试注册,发布,安装. 3. 发布这边没有什么说的, 测试没有问题之后, 发布也不会出什么问题, 只是网址不一样而已. 写这篇文章的时候, 大家已经可以使用 pip 来安装最新版的 untp 了: 1pip install untp –EOF–","categories":[],"tags":[{"name":"Tool","slug":"Tool","permalink":"http://blog.justbilt.com/tags/Tool/"},{"name":"untp","slug":"untp","permalink":"http://blog.justbilt.com/tags/untp/"}]},{"title":"手机游戏攻防(三) 网络游戏","slug":"phone-game-AND-OLgame","date":"2016-02-14T01:45:54.000Z","updated":"2017-03-12T01:22:38.000Z","comments":true,"path":"2016/02/14/phone-game-AND-OLgame/","link":"","permalink":"http://blog.justbilt.com/2016/02/14/phone-game-AND-OLgame/","excerpt":"","text":"这篇文章好早就写了, 一直放在草稿箱, 今天整理的时候发现了, 于是修改了一下就发布了出来 ! 前段时间我们的游戏公测了下, 在安全这方面遇到了不少问题, 和大家分享一下. 1. 道具负数卖出卖出道具是多数游戏都有的一个功能, 那么如果卖出一个负数量的道具呢? 卖出道具的逻辑可能是这样的: 123function sell(_id, _count) item_data[_id].count = item_data[_id].count - _countend 可以看到, 如果不做任何保护的话, 一旦 _count 是负数, 实际会变成加法. 我们遇到的第一个问题就是这个, 玩家通过八门神器或烧饼助手修改出售数量为负数, 这样就会变成增加道具. 一般情况下, 游戏后端会拦截住, 返回卖出失败的结果, 但是不巧, 他们也没有做类似的判断. 解决方案: 对于前端来说, 可以粗暴的断言一下, 因为正常肯定不会出现这个情况, 也可以温和的 Alert 一个提示. 如下: 1234567function sell(_id, _count) if _count &lt; 1 then Alert.new(\"卖出道具数量不能小于1\") return end item_data[_id].count = item_data[_id].count - _countend 但这种限制肯定是服务端做的, 毕竟客户端这里只是第一道防线, 中间还有太多的手脚可做 ! 2. 游戏加速烧饼助手有一个游戏加速的功能, 类似于变速齿轮. 可以将游戏加速到十倍甚至百倍的速度, 一般对于网游来说, 真实的时间是服务端来计算的, 客户端的计时只是一个表现. 但是由于我们的战斗模块基本上是离线的, 所以这里在加速的情况下出了问题. 我们战斗有一个特色就是主公技, 是一系列非常强大的技能. 因此在战斗中会严格控制释放次数, 通过消耗能量和冷却时间来实现. 正常情况下, 战斗中加速的话整个战斗的节奏就会加快, 因此不会有问题. 但是不知为何, 我们的人物动作加速到一定倍数后就会停止, 而主公技的能量回复和冷却速度却会无限增大, 因此表现出来的就是主公技可以无限释放, 玩家可以轻松挑战数倍强于自己的敌人! 发现这个问题后, 我和小伙伴们都惊呆了, 原来还可以这样搞!!! 解决方案: 现在我们的解决方案是将主公技的能量回复速度与人物动作联系起来, 这样不至于太变态. 同时加入了战斗的时间限制, 如果加速到10倍以上的, 时间很快会耗尽, 战斗失败! 但是我想到了一个更好的办法, 能从源头解决这个问题, 就是对比系统的时间流逝与游戏内的时间流逝速度. 一般, 变速齿轮只会改你当前游戏的时间, 没法改动系统的时间. 只要我么通过 native 的函数获取原生系统的时间, 一对比就可以发现有木有使用加速了. 但是目前还没有去实现这个想法, 有机会吧! 2. socket 抓包/发包当看到群里有玩家讨论抓包的时候, 我们都目瞪口呆, 这年头作弊都需要高科技了! 玩家通过截取客户端发送的数据包, 重复发送, 这样可以轻松避开客户端的各种限制, 从而达到作弊的目的. 解决方案: 最终的解决方案还是得靠服务端严谨的逻辑来避免, 各种检查参数, 检查返回值! 也可以通过设计来避免, 比如每次发送数据包都附加一个 id 属性, 这个 id 会以某种规则增长, 服务端哪里也有一个 id , 对比之后就可以判断是否玩家作弊了 ! 哈哈, 综上所述, 一个有经验的游戏服务端是多麽的重要.","categories":[],"tags":[{"name":"游戏心得","slug":"游戏心得","permalink":"http://blog.justbilt.com/tags/游戏心得/"},{"name":"手机游戏攻防","slug":"手机游戏攻防","permalink":"http://blog.justbilt.com/tags/手机游戏攻防/"}]},{"title":"继续进步的 2015","slug":"my-2015","date":"2016-02-11T01:57:21.000Z","updated":"2017-03-12T01:22:38.000Z","comments":true,"path":"2016/02/11/my-2015/","link":"","permalink":"http://blog.justbilt.com/2016/02/11/my-2015/","excerpt":"","text":"之前的几次年结: 2013年结2014年结 因为自己非常严重的拖延症, 之前几次年结都拖的好晚 (五月) 才写, 这次终于克服了一下, 下次一定争取元旦写, 毕竟每过一年, 都要有进步的嘛. 这次年结还是按照以往的惯例来写, 从工作, 技术, 生活这几个方面来切入来写. 工作D 公司 (2014.7 - 2015.7)这一年大半的时间都是在 D 公司度过的, 对于 D , 我的感情是很复杂的, 在 D 投入了我有史以来最大的精力, 完全可以说一腔热血都洒在上面了, 有差不多半年都是 9-11-6 的工作方式, 若说不是因为热爱这个工作, 又怎么会这样? 对于项目的最终失利, 我没有过多的话可说, 虽说这一切都在意料之中, 但为什么还是会感到失落. 图注: 晚上 10:30 , 打包前的测试 先说说 D 好的一面, 与前端团队的相处是我感到最开心的一点, 好友宏爷@imbahom , 主程也是曾经的老师 @桂老, 以及新认识古灵精怪的妹子 @小蒋童鞋 . 宏爷是我多年好基友, 打得一手好dota. 同时技术能力毋庸置疑, 绝对是团队开荒的好手. 但是随着合作的深入, 我们在某些方面的分歧很大, 加上我代码洁癖的病越来越重, 因此也有过一些争吵. 哈哈, anyway, 这些小事情, 完全不影响我们之间的情谊 ! 小蒋童鞋是团队中的唯一妹子, 身为90后, 特别刻苦, 谦虚, 经常会冒出一些神语录, 哈哈哈, 大家都很喜欢她. 不过作为行业中的新人, 若是没有一个严厉的前辈带领, 野生蛮长之下, 容易走一些弯路. 桂老最然年长一些, 但是心态特别好, 与我三观很合, 对于技术的尊重和对烂代码要即时重构的观点真是太合我心意了. 同时在他无为而治的管理观念下, 我的好多建议都能得到他的积极响应, 因为之前都是单刀独斗, 这次团队配合让我感到十分舒心. 好的一方面, 公司成员多数都是行业中老兵, 经验丰富, 从他们身上可以学到好多东西. 另一方面, 公司虽小, 但是大家的鄙视链却很长, 后端看不起策划, 策划看不起美术, 同时策划之间又互相鄙视, 完全就不是一副齐心协力干事情的样子. 团队配合让人操碎了心, 却半路又开了一个项目, 招了一批成员, 又调走了几个, 对于这些, 只能呵呵又呵呵了! 同时公司对于时间节点毫无观念, 计划一拖再拖, 代码改了又改. 我想多数有一些规模的公司可能都是和 D 差不多的情况, 这样的公司我想在我激情退却之前是不想再加入了 ! C 公司 (2015.7 ~ )啊, 不是该 E 公司了么? 没错, 我又回到了 C 公司. 在 @Bin 和我接触的时候, 我是非常纠结的, 因为在我的观点中, 分手了还做朋友是不太可能的, 更别提复合了. 同时我的选择也很多, 留在 D, D 的老板承诺加薪分股; 很早认识的一个大哥推荐我去他们公司, 用我一直想用 Unity3D , 龙图投资, 技术老大也是一个非常 nice 的人; 或者离开北京, 去一个陌生的地方重新开始. 那么在一次次纠结之后, 我为什么选择了 C ? 是因为对陌生未来的恐惧 ? 是打心底认可 C ? 或者是被 bin 的诚意打动, 或者是离别时那一句随口的承诺. 我暂时离开, 若有机会我还是会回来 ! 重新归来的 C, 浴火重生的 C, 我在 C 又将谱写出一段什么样的篇章, 我现在还无法细说, 只能说我在 C 非常快乐, 稳步进步的同时又接触到一些前所未有的东西. 技术1. Sublime Text最早接触 Sublime Text (ST), 也算是机缘巧合, 很早之前与 @Bin 聊天时无意间提及, 我便记在了心理. 下载下来时候更是惊为天人, 作为一个 IDE 狗, 从未想过编辑器竟可以如此轻便, 如此好用. 再次期间, 我尝试过 Vim, Emacs, Atom, 等多款编辑器, 但从未改变过对 ST 的喜爱. 后来, bin 竟转向 pycharm, 这个可恶的叛徒, 必须烧死!!! 逃 :) 但是这个时候, 我只是拿 ST 当做一款普通的编辑器使用, 写写 python 代码, 没有装任何插件. 接下来, 转到使用 quick-cocos2d-x 的时候, 因为 QuickXDev 的原因, 大家推荐的也是 ST 作为主力开发环境, 在这个时候, 才算是真正的使用 ST . 直到今年, 我的第一款 ST 插件 FAlign 发布, 我对 ST 的理解总算达到了全面的标准啦! 2. ccb2lua这个恐怕是我今年最得意的作品了, 实现了将 CocosBuilder 的界面文件转化为 lua 代码的功能. 因为使用 jinja2 作为模板, 全部的映射逻辑都写在模板中, 所以它的灵活性及可扩展性都极高. 哈哈, 因为代码目前还无法开源, 所以我就不细说, 免得被认为吹牛逼 ~ 3. 正则若说今年有什么特别值得一提, 那么就是终于降服了正则表达式这头猛兽了. 早在很多年就被一个好友安利过正则, 正则表达式30分钟入门教程 这篇教程也看了好几遍, 却一直没有入门. 直到我做一个小工具的时候, 才被迫又看了一遍, 写了几个表达式之后, 终于入了门. 进了这扇门之后, 才发现各种方便各种好, 从此一发不可收拾, 把之前好多写的非常蹩脚的地方都用正则重新实现了下. 果然, 只有在重压之下, 才能克服拖延症!!! 4. untp对于这个小工具, 我也很满意 ! 当时真的有帮到我好多, 为此我还特意写了一篇文章, 一个命令行的 TexturePacker 拆解工具, 这个小工具, 也成为了为 Github 上 star 数最多的一个项目, 忍不住小自豪一把. 5. 打字这也值得一提 ? 恐怕是的, 就打字方面, 我一直没有进行过系统的训练. 从最开始的 “一指禅” 到后来的两只手四五根指头打字, 错误率极高不说, 速度到一定程度之后也难以再提升. 但是这一切我一直不以为然, 认为编程最重要的是思想, 直到有一天, bin 在朋友圈发了这么一条: 虽然不是在说我, 但我仍旧感到很羞愧. 人知耻而后勇, 同时又找到了一个神器 TT , 经过一番苦练, 我的WPM (每分钟敲下多少个单词) 终于达到了 30 , 这个速度相比之前已是天翻地覆的变化了, 今年我一定要继续苦练, 争取达到 50 ! 生活今年最重要的事情就是与相恋三年的女友步入了婚姻的殿堂, 媳妇想着多省些钱, 因此婚礼办的相对比较简单, 媳妇这么懂事, 我是很开心但也很羞愧. 婚后的生活与之前并没有太大的变化, 更多是体现在心灵的变化上, 媳妇脾气越来越好, 我也更加愿意让着她, 这种感觉真的好棒. 如果不出意外的话, 接下来还有好几年悠闲的时光, 趁着这个机会, 努力提升自己, 争取技术事业上有大的进步. 关于生活, 不想多说什么, 平平淡淡, 真真切切, 这样挺好 !","categories":[],"tags":[{"name":"年结","slug":"年结","permalink":"http://blog.justbilt.com/tags/年结/"}]},{"title":"quickx-3.3 热更新若干心得","slug":"quickx-hotupdate","date":"2016-01-01T00:43:50.000Z","updated":"2017-03-12T02:22:53.000Z","comments":true,"path":"2016/01/01/quickx-hotupdate/","link":"","permalink":"http://blog.justbilt.com/2016/01/01/quickx-hotupdate/","excerpt":"关于热更新, 虽然这已经是第三次实现了, 但每一次都会有新的收获, 都会比上次更加完善一下.","text":"关于热更新, 虽然这已经是第三次实现了, 但每一次都会有新的收获, 都会比上次更加完善一下. 一. App 版本号的获取对于我们的游戏来说,其实是有两个版本配置的,一个是 versionName, 一个是 versionCode. versionName 只是一个显示, 类似于 1.2.3, 而 versionCode, 它是一个纯数字的字符串 (e.g. 4083), 它可以简单的转化为 int 去对比版本大小. 那么如何去获取app对应的版本呢 ? iOS:1234std::string Device::getAppVersionCode()&#123; return [[[NSBundle mainBundle] objectForInfoDictionaryKey:@\"CFBundleVersion\"] cStringUsingEncoding:NSUTF8StringEncoding];&#125; MacOS 上获取版本号的方式与 iOS 一致. Android:123456789101112public static String getAppVersionCode() &#123; String versionCode = \"\"; PackageInfo pInfo; try &#123; pInfo = sActivity.getPackageManager().getPackageInfo(sActivity.getPackageName(), 0); versionCode = \"\"+pInfo.versionCode; &#125; catch (NameNotFoundException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; return versionCode;&#125; 为了调用这个方法, 我们还需要额外实现一个 jni 的调用. 二. 如何修改 Mac 上 UserDefault 记录quickx-3.3 Mac 版不再像 2.x 时将 UserDefault 保存在项目的根目录, 而是使用 NSUserDefaults 将配置保存在了系统的配置目录: 1~/Library/Preferences/com.cocos.quick.apps.player.plist 双击可以使用 XCode 打开, 修改保存完毕后并不会立刻生效, 而是需要再额外运行一条命令: 1killall -SIGTERM cfprefsd 三. 如何重启游戏这个做法有好多, 纯App层面的, 纯Lua层面的, 我们使用了一个虽然很土但却很简单的做法. 因为热更新只会更新 lua 代码和资源, 因此可以通过重启 LuaEngine, 清空三大缓存来实现重启. 在 Lua 中发送重启消息, C++ 接收到消息后销毁并重新创建 LuaEngine. 关键代码如下: Lua: 1cc.Director:getInstance():getEventDispatcher():dispatchEvent(cc.EventCustom:new(\"NEED_RESTART_APP\")) AppDelegate.cpp: 123456// 监听重启事件auto callBack = [this](EventCustom* event)&#123; //do restart LuaEngine&#125;;Director::getInstance()-&gt;getEventDispatcher()-&gt;addCustomEventListener(\"NEED_RESTART_APP\", callBack); 四. 代码更新策略大体分为三类: 全量更新 相对于上一个版本增量更新 相对于渠道版本增量更新 全量更新指每一个热更新包内都含有项目全部代码, 如果项目体量较小的话勉强可以接收这种方案, 如果项目略大一些, 更新包就会很大, 随便更改一行代码都会有 3,4M 的更新, 实乃下下之策. 相对于上一个版本增量更新, 这样更新包就会小很多, 达到资源的最大利用, 缺点是如果版本相差较大就会需要下载多个更新包, 如果代码采用 zip 压缩的话, 需要将这些 zip (e.g. 1.1-1.2.zip, 1.2-1.3.zip)都加载进来. 相对于渠道版本增量更新, 这一种折中的解决方案, 对比差异是永远是基于线上渠道版本, 这种做法的优点在于游戏只用额外挂载一个 patch.zip, 玩家也只用更新一次即可到最新版, 而代价只是会增加一些服务器更新包的存储开销. 很长一段时间内, 我们都很 low 的采用了第一种解决方案, 造成这种错误的原因在于我错误的估计了增量更新的难度, 进而放宽了自我要求, 觉得全量更新还OK balabala… 多亏了 @BinStartup 童鞋强烈地需求, 才迫使我们去考虑更优解决方案, 用我们内部的一个梗来夸赞一下 Bin 童鞋: ‘牛逼呀~’ . 五. 更新包的制作相比于代码层面的热更新支持, 自动化的制作热更新包才是更为重要的事情, 因为这个操作会持续的发生, 并且随着更新次数的增多复杂度会剧增. 从大的层面来看, 更新包的制作主要有这么几个问题: 1. 如何标记并导出版本?首先我们要考虑如何标记版本, 因为要做增量更新就必须得对比不同的版本, 实现的方法有好多, 你甚至可以每次都将项目拷贝一份, 用版本号来命名. 我们项目版本控制工具是 git , 因此可以使用 git tag 来标记版本号. 至于导出版本, 一开始并没有考虑到这个, 本来打算直接使用 git diff来进行版本对比, 不幸的是我们项目中有一堆的 submodule, git diff 并不能对比子模块的变化. 同理 git archive 也不可以, 最终我们使用了: 12git checkout $taggit submodule update --init --recursive 这样当前项目的环境就到了 $tag 这次提交, 然后将 src 目录拷贝到一个临时目录, 再切换到下一个 tag . 多次之后, 就获取到了所有版本的脚本文件了. 2. 如何对比生成 diff 文件因为是拷贝到了临时的目录, 所以不能通过 git diff 来进行对比了. 简单搜索了下, 可选的是系统自带的 diff 命令, 不过它的结果不方便处理. 最终决定使用 python 的 filecmp 模块进行对比. 3. 其他后续处理diff 出来的脚本问题, 我们需要加密, 和加密 src 一样调用 compile_scripts.sh 即可. 因为热更新需要的是一个 zip 文件, 我们可能会用到 zip 命令, 需要注意的一点是不能简单的使用 zip -r xxx.zip yyy, 这样的话压缩包内会含有 yyy 目录. 正确的做法是: 1(cd yyy; zip -r ../xxx.zip *) 重启的那个方案还有一些隐患, 所以没有放出具体的代码, 等修复之后会补上.暂时就这些, 后面想到啥了再加上来.","categories":[],"tags":[{"name":"Quick-Cocos2d-x","slug":"Quick-Cocos2d-x","permalink":"http://blog.justbilt.com/tags/Quick-Cocos2d-x/"},{"name":"hotupdate","slug":"hotupdate","permalink":"http://blog.justbilt.com/tags/hotupdate/"}]},{"title":"使用 Pyqtdeploy 发布你的 Pyqt 程序","slug":"pyqtdeploy","date":"2015-11-28T00:38:12.000Z","updated":"2017-03-12T01:22:38.000Z","comments":true,"path":"2015/11/28/pyqtdeploy/","link":"","permalink":"http://blog.justbilt.com/2015/11/28/pyqtdeploy/","excerpt":"在不久前我的另一篇博文Pyqt5 MacOS 环境搭建中介绍了如何在 Mac 上搭建 PyQt 的环境, 如果你恰巧看过那篇文章, 并且照做了, 那么非常不幸, 如果你打算使用 pyqtdeploy 发布的你的程序的话, 你可能得重新来一遍了!","text":"在不久前我的另一篇博文Pyqt5 MacOS 环境搭建中介绍了如何在 Mac 上搭建 PyQt 的环境, 如果你恰巧看过那篇文章, 并且照做了, 那么非常不幸, 如果你打算使用 pyqtdeploy 发布的你的程序的话, 你可能得重新来一遍了! 我们需要准备几个几个东西: 在这里下载 python 3.x 的源码包. 在这里下载 sip 的源码包. 在这里下载与你 qt 版本对应的 PyQt 的源码包. 注: 不要下载 3.5 , 因为后面某一步骤时会出错. – 2015年11月29日 一. 安装1. 安装 python3 :因为 pyqtdeploy 要求 PyQt5 和 Python v3.2 或更高的版本, 因此我们需要安装 python3, 这里要记下你的 python 主要版本号 (e.g. 3.4), 后面会用到. 解压下载好的 python3 源码, 开启终端 cd 进这个目录:1./configure 等待结束后执行 make, 没有错误的话 make install . ##2. 安装 sip : 因为某些未知的原因, 我们需要先使用 brew 安装 sip:1brew install sip --with-python3 然后解压下载好的源码包, 打开终端 cd 进解压好的目录: 1python3 configure.py --static --target-py-version=VERSION 替换 VERSION 为你的 python3 版本号, --static 是将 sip 编译为静态库的, 我们使用 brew 安装的 sip 没有生成静态库, 因此我们需要手动安装. 等待成功后, 执行 make &amp;&amp; make install. 因为上一步会会覆盖 brew 安装的 sip 的执行文件, 所以我们需要重新 link 一下. 1brew link --overwrite sip 然后我们brew info sip, 可以找到类似的一个路径: 1/usr/local/Cellar/sip/4.16.9 在这个路径下有一个 include 文件夹, 这个文件夹的路径就是就是我们下面安装 PyQt 所需的路径. ##3. 安装 PyQt 这一步需要知道 qmake 的路径, 因此我们需将它所在目录加入到环境变量中: 1export PATH=/path/of/your/Qt/clang_64/bin:$PATH 最终我们会输入这样的一行指令:1python3 configure.py --sip-incdir=PATH --target-py-version=VERSION --static 将上面的 PATH 修改为上面获取到的路径(e.g. /usr/local/Cellar/sip/4.16.9/include), 同时 VERSION 替换为你的 python 版本. 提示 Do you accept the terms of the license? 时输入 yes. 等待成功后,执行 make, 这一步需要编译好多东西, 可能会需要好久. 若是没有什么错误的话, 执行 make install. ##4. 安装 pyqtdeploy 安装好前面那些之后, 这一步变得十分简单: 1pip3 install pyqtdeploy 到此为止, 我们 pyqtdeploy 的环境就搭建好了, 在任意目录输入 pyqtdeploy, 看到下面这个界面就算成功了: 二. 使用关于 pyqtdeploy 的使用还是建议大家看看官方文档, 写的非常详细, 开始我寻求其他人写的教程, 但竟无一篇中文教程, 英文也寥寥无几, 最后还是回去啃文档. 下面介绍一下我的配置是什么, 至于期间踩坑无数, 自不足为外人道也. 首先我要创建一个 pdy 文件, pdy 是 pyqtdeploy 的工程配置文件. 需要注意的一点是, pdy 文件一定要保存在程序入口 py 文件的同级目录. 首先在你的项目源码目录中打开终端, 键入命令 pyqtdeploy xxx.pdy,(替换xxx为你想起的文件名) 然后就会弹出一个gui界面. 1. Application Source: Name: 填入你程序的名称Main Script file: 程序的入口文件Application Package Directory: 程序的其他 py 文件 2. qmake这一页没有什么特别的设置 3. PyQt Modules这一页中你的项目中使用了什么模块就勾选什么模块就可以了. 4. Standard Library默认设置 5. Other Packages默认设置 6. Other Extension Modules默认设置 7. Locations这一页的设置是重中之重, 曾在这里浪费了很多的时间. Interpreter: python 可执行文件路径Source directory: 还记得我们之前下载的 python 源码, 解压到一个目录, 填写路径到这里就ok了 !Include directory: python 的头文件路径Python library: python 的静态库文件路径Standard python library: python 标准库文件路径Build directory: 构建用路径qmake: qmake 文件路径 8. Build 这一页必要重要的是勾选 Verbose output , 这样子出错了能够比较准确的定位. 另外勾选 Additional Build Steps, 可以帮你编译运行. 三. Q&amp;A ImportError: No module named xxx 如果这个模块是你项目的一个本地依赖模块, 那么请检查你的 pdy 文件是否保存在代码入口文件的同一级目录. error: use of undeclared identifier ‘_Py_BEGIN_SUPPRESS_IPH’ 是否使用了 python3.5 , 我切换为 python3.4 就 ok 了! 转眼间又过去了一个月多月, 每周一篇好不容易坚持了3周就这样断掉了. 主要原因是还是懒, 次要原因是公司项目即将上线, 所以工作比平时要紧张好多, 最近两周周六也开始加班了! 对目前这个项目还是比较看好的, 加油! 下次分享下我在最近这次热更新上的一些收获!","categories":[],"tags":[{"name":"PyQt","slug":"PyQt","permalink":"http://blog.justbilt.com/tags/PyQt/"},{"name":"pyqtdeploy","slug":"pyqtdeploy","permalink":"http://blog.justbilt.com/tags/pyqtdeploy/"}]},{"title":"FAlign 代码洁癖患者的福音","slug":"falign","date":"2015-11-15T12:14:37.000Z","updated":"2017-04-23T04:54:05.000Z","comments":true,"path":"2015/11/15/falign/","link":"","permalink":"http://blog.justbilt.com/2015/11/15/falign/","excerpt":"对于一个重度代码洁癖患者, 看到下面这样的代码, 心中难免奇痒难耐, 想要给它对齐了去!","text":"对于一个重度代码洁癖患者, 看到下面这样的代码, 心中难免奇痒难耐, 想要给它对齐了去! 1234local name = params.name or &quot;Arial&quot;local color = params.color or cc.c3b(255, 255, 255)local age = params.age or 0local font_size = params.font_size or 30 sublime 的代码对齐插件有很多, 大家可以看这里, 我之前一直使用的是 VAlign, 事实上它在多数的情况下还是很好使的. 但是它还是有这么几个问题: 个别情况下代码对齐的不够理想. 不能多次对齐. 就算已经对齐, 也会使得文件变为 modified 状态. 一种造轮子的冲动涌上心头. 开干之前一直没有尝试过类似的事情, 一上来有些发蒙, 从哪里入手呢? 仔细分析了下需求, 将功能切分为小块. 1. 一行代码的特征什么样的代码会需要对齐? 多行相似的代码. 怎么判断相似? 有共同的特征吗? 一行代码的特征有好多, 怎么确定那个是你想要的. 最终我选择了 缩进层级 作为第一个特征, 如果两个文字的缩进层级不一致的话, 它们就不会被对齐. 第二个特征我选择了 关键字列表, 我找出了所有关键字和它们在这一行中的位置. 1&#123; [1] = &#123;keyword : &quot;=&quot;, position: 10&#125;, [2] = &#123;keyword : &quot;,&quot;, position: 20&#125;, ...&#125; 2. 找到相似行我的做法和 Vlign 是一致的, for 循环分别加减一个游标, 代表着当前行, 获取这一行的特征数据, 如果缩进和关键字列表中的第一个元素一致的话, 则记录这一行, 否则跳出循环. 这样当 for 循环结束后, 我们就获得了一个多行数据的列表. 123456&#123; &quot;80&quot; : &#123; [1] = &#123;keyword : &quot;=&quot;, position: 10&#125;, [2] = &#123;keyword : &quot;,&quot;, position: 20&#125;, ...&#125;, &quot;81&quot; : &#123; [1] = &#123;keyword : &quot;=&quot;, position: 15&#125;, [2] = &#123;keyword : &quot;,&quot;, position: 40&#125;, ...&#125;, &quot;82&quot; : &#123; [1] = &#123;keyword : &quot;=&quot;, position: 20&#125;, [2] = &#123;keyword : &quot;,&quot;, position: 60&#125;, ...&#125;, &quot;83&quot; : &#123; [1] = &#123;keyword : &quot;=&quot;, position: 25&#125;, [2] = &#123;keyword : &quot;,&quot;, position: 80&#125;, ...&#125;,&#125; 3. 删除已经对齐的keyword按照我的设想, 应该是每调用一次对齐函数, 就找到第一个没有对齐的关键字进行对齐, 这样当一组需要对齐的文字中有多个可以对齐的关键字的话, 就需要多次调用对齐函数. 那么问题就来了? 如何判断出当前相对齐的是哪一个关键字呢? 我是这样子做的, 前面不是找到了多行数据的列表嘛, 我们遍历一下这个列表, 如果这些行的关键字列表中的第一个元素的位置是一样的, 那么这个关键字就已经对齐了, 那么我便删除它. 这样多次后, 列表中的行的关键字列表的第一个元素就是我们需要对齐的那个元素啦. 但是这样之后, 之前的行数据就会有中断的情况, 所以我们需要再次整理这些数据. 4. 去除关键字周围的空白我举个栗子, 比如下面这两行代码: 12local a = 1local bbbbbb = 1 我们以 = 为关键字对齐它, 如果不去除周围的空白的话, 对齐出来的将会是这个样子的: 12local a = 1local bbbbbb = 1 这显然不是我们需要的, 我的实现是这个样子的, 还是 for 循环使用一个游标从关键字位置分别向前后遍历, 遇到第一个非空字符停止, 这样循环结束后便会获得一个区间. 然后我们在根据这个关键字左右是否需要空格构造一个新的关键字内容去替换掉那个区间的字符串. 5. 对齐行真正昨晚上上面的那些处理后, 对齐这些行的逻辑其实十分简单, 甚至都不超过10行代码. 主要就是遍历一遍, 找出某个关键字在所有行中的最大位置, 然后给每行关键字的前面或后面补足与最大值的差值的空格即可. FAlignFAlign 是 sublime 的一个代码对齐插件, 实现了一行代码多个关键字的对齐功能. 代码开源在github: https://github.com/justbilt/sublime-falign, 大家可自行取阅. 安装两个方法安装: 如果安装了 Package Control 的话, 可以搜索 FAlign 安装 将源码 clone 到你 sublime 插件目录 使用方法⌘ + \\ 对齐第一个关键字, 再次按下对齐第二个关键字, … 示例1234Button = import(&quot;.utils.Button&quot;)AlertEx = import(&quot;.utils.AlertEx&quot;)Tips = import(&quot;.utils.Tips&quot;)Help = import(&quot;.utils.Help&quot;) 1234Button = import(&quot;.utils.Button&quot;)AlertEx = import(&quot;.utils.AlertEx&quot;)Tips = import(&quot;.utils.Tips&quot;)Help = import(&quot;.utils.Help&quot;) 1234dispatcher:addEventListener(&quot;mail_new&quot;, mail_new)dispatcher:addEventListener(&quot;mail_mark_read&quot;, mail_mark_read)dispatcher:addEventListener(&quot;mail_handle_invitation&quot;, mail_handle_invitation)dispatcher:addEventListener(&quot;mail_send&quot;, mail_send) 1234dispatcher:addEventListener(&quot;mail_new&quot;, mail_new)dispatcher:addEventListener(&quot;mail_mark_read&quot;, mail_mark_read)dispatcher:addEventListener(&quot;mail_handle_invitation&quot;, mail_handle_invitation)dispatcher:addEventListener(&quot;mail_send&quot;, mail_send)","categories":[],"tags":[{"name":"code-style","slug":"code-style","permalink":"http://blog.justbilt.com/tags/code-style/"},{"name":"neat-freak","slug":"neat-freak","permalink":"http://blog.justbilt.com/tags/neat-freak/"},{"name":"Tool","slug":"Tool","permalink":"http://blog.justbilt.com/tags/Tool/"},{"name":"FAlign","slug":"FAlign","permalink":"http://blog.justbilt.com/tags/FAlign/"}]},{"title":"MyGUI学习笔记(二) 在 MacOS 上运行MyGUI","slug":"mygui-2-run-on-osx","date":"2015-10-31T14:52:44.000Z","updated":"2017-03-12T01:22:38.000Z","comments":true,"path":"2015/10/31/mygui-2-run-on-osx/","link":"","permalink":"http://blog.justbilt.com/2015/10/31/mygui-2-run-on-osx/","excerpt":"不知大家是否还记得我的这篇文章 MyGUI学习笔记(一) 在Windows上运行MyGUI, 这篇文章讲述了在 Windows 上编译运行 MyGUI 的过程. 文中提到了在 Mac 遇到了很多坑, 确实如此, 当时的 MyGUI 虽然号称 Cross Platform , 但是在 Mac 却有好多东西没有实现, 编译起来困难重重, 以至于我不得不切换到 Windows 系统上, 因此便有了那篇文章.","text":"不知大家是否还记得我的这篇文章 MyGUI学习笔记(一) 在Windows上运行MyGUI, 这篇文章讲述了在 Windows 上编译运行 MyGUI 的过程. 文中提到了在 Mac 遇到了很多坑, 确实如此, 当时的 MyGUI 虽然号称 Cross Platform , 但是在 Mac 却有好多东西没有实现, 编译起来困难重重, 以至于我不得不切换到 Windows 系统上, 因此便有了那篇文章. 那么今天为什么又要写这个了呢? 因为这几个月内, MyGUI 团队针对 Mac 做了好多修改, 使得脱离 Ogre 之后 Demo 也能够跨平台运行了! 那么我们就来看一下如何在 Mac 上运行 MyGUI 吧! 零. 准备工作如同 Windows 一样, 我们需要做一些准备工作. 因为在这个阶段这些工作互不影响, 因此大家并行操作, 高效利用时间. 从 github 上 clone 最新的 MyGUI 源码. 下载 CMake Mac 版, 并安装. 使用 Homebrew 安装 sdl2_image. 下载已经编译好的 Mac 版 Orge Dependencise, 并解压到 mygui 的根目录. 注: 这里我偷懒使用了已经编译好的依赖库, 毕竟那不是我们的主要目的. 当然你也可以自行编译, 源码位于这里. 一. 生成 Xcode 工程首先我们运行 CMake, 然后在 Where is the source code: 栏选择你的 clone 下来的 mygui 源码路径. 在 Where to build the binaries: 选择生成目录, 我是选择生成在 mygui 的 bin 路径下. 然后点击 Configure 按钮, 如果弹出询问是否创建 bin 路径, 请同意. 在接下来的弹出界面的下拉列表中选择 Xcode, 点击确定. 等待片刻后, 会弹出一个错误提示: Error in configuration precess, project files may be invaild 在日志窗口查看错误信息可以得知我们需要修下 MYGUI_RENDERSYSTEM 的值. 为方便查找, 我们可以将 CMake 界面的 Grouped 复选框选中, 这样所有的配置都会分组显示. 在中间红色区域的 MYGUI 分类下找到 MYGUI_RENDERSYSTEM 选项, 将其值修改为 4, 鼠标悬停可以查看数字做代表的意义. 再次点击 Configure 按钮, 无任何错误提示即为成功. 接下来点击 Generate 生成 Xcode 工程. 二. 编译 MyGUI打开 bin 目录下的 MYGUI.xcodeproj 工程, 开始编译. 编译过程中会遇到如下编译错误: /Users/…/Data.cpp:136:11: No viable conversion from ‘std::__1::nullptr_t’ to ‘DataPtr’ (aka ‘shared_ptr‘) 对于这个错误说明呢大家可以看这里, 我的解决方案是把出错地方的 nullptr 都改为 NULL, 一共需要修改十几处吧. 然后就编译成功了! 三. 运行 MyGUI 示例当我们选中一个示例运行的时候, 会遇到这个崩溃错误: An exception has occured : MyGUI EXCEPTION : No root widget. [‘ColourPanel.layout] in MyGUI at /Users/bilt/Documents/mygui/Common/BaseLayout/BaseLayout.h (line 126)libc++abi.dylib: terminating with uncaught exception of type MyGUI::Exception: MyGUI EXCEPTION : No root widget. [‘ColourPanel.layout] in MyGUI at /Users/bilt/Documents/mygui/Common/BaseLayout/BaseLayout.h (line 126) 经过追踪, 是没有找到 resources.xml 没有找见的原因, 它位于 path/of/mygui/bin/bin目录, 而默认应用的工作目录不是这里, 因此我们需要设置下工作目录. 选中 Scheme 列表末尾的 Edit Scheme (或者按下cmd+shift+,), 然后再 Options 标签下将 Working Directory 选择为你的生成 bin 目录. 再次运行就可以啦! 上一张截图纪念一下: MyGUI 从07年发展到现在已有8年的历史了, 仍然有这么多人在开发使用, 真的让人敬佩不已. 同时 MyGUI 的代码简洁, 优美, 十分适合学习研究, 下面我将从浅入深的和大家分享我的学习经验!","categories":[],"tags":[{"name":"MyGUI","slug":"MyGUI","permalink":"http://blog.justbilt.com/tags/MyGUI/"}]},{"title":"Pyqt5 MacOS 环境搭建","slug":"setup-pyqt5-on-mac","date":"2015-10-17T06:46:49.000Z","updated":"2017-03-12T01:22:38.000Z","comments":true,"path":"2015/10/17/setup-pyqt5-on-mac/","link":"","permalink":"http://blog.justbilt.com/2015/10/17/setup-pyqt5-on-mac/","excerpt":"尝试过用各种 python 的 gui 库来写一些小工具, TkInter, wxPython, Pyfltk , PyQt等, 最终发现还是只有 wxPython 和 PyQt 能相对靠谱一些, 控件全, 文档丰富, 使用的人多. 因为曾经使用搞过 qt , 所以最终选择了 PyQt, 这次我们来说一下如何在 Mac 上安装.","text":"尝试过用各种 python 的 gui 库来写一些小工具, TkInter, wxPython, Pyfltk , PyQt等, 最终发现还是只有 wxPython 和 PyQt 能相对靠谱一些, 控件全, 文档丰富, 使用的人多. 因为曾经使用搞过 qt , 所以最终选择了 PyQt, 这次我们来说一下如何在 Mac 上安装. 1. 安装 qtPyQt 其实就是 qt 的 python 绑定, 所以我们首先需要安装 qt, 版本可以自行选择, 最新版 的下载地址, 历史版本的地址. 如果追求最新版的话, 最好是去 PyQt 的下载网站看那一下最新版是什么, 因为 PyQt 的更新速度会落后于 qt. 当看到这个界面时, qt 就安装成功了. 2. 安装 sipsip 是一个 python 调用 c 的工具, 官方网址在这里, 我们可以按照官网上的指南去安装, 也可以选择另一种更简单的方式: 1brew install sip 3. 安装 PyQt 我们首先去这里下载适合自己版本, 解压, 并在终端 cd 进这个目录. 执行: 1python configure.py 如果出现 Error: Use the --qmake argument to explicitly specify a working Qt qmake. 错误, 则是因为我们没有将 qmake 加入到环境变量中. 那么 qmake 在哪里呢? 根绝安装路径和版本,差不多是在这样的一个路径中: 知道了路径, 我们可以似乎可以通过 --qmake 参数指定 qmake 目录 ,但其实我们可以把它临时的加入到环境变量中, 在终端中键入: 1export PATH=/path/your/qt/version/clang_64/bin:$PATH 再次执行python configure.py, 一切顺林的话会遇到一个选择 license 的提示, 我们输入 yes 即可. 等待 configure 完成, 我们执行:1make 这次可能并没有那么顺利, 我遇到这样的错误: 1234567In file included from ../qpy/QtCore/qpycore_api.h:30:../qpy/QtCore/qpycore_public_api.h:26:10: fatal error: &apos;sip.h&apos; file not found#include &lt;sip.h&gt; ^1 error generated.make[1]: *** [qpycore_post_init.o] Error 1make: *** [sub-QtCore-make_first-ordered] Error 2 这时候我们需要传入 sip 的 include 路径, 如果是通过 brew 安装的(如果不是, 请看文章末尾的Q&amp;A), 可以通过 brew info sip获得: 12345$ brew info sipsip: stable 4.16.9 (bottled), HEADTool to create Python bindings for C and C++ librarieshttp://www.riverbankcomputing.co.uk/software/sip/usr/local/Cellar/sip/4.16.9 (10 files, 908K) * 然后重新执行 1python configure.py --sip-incdir=/path/of/your/sip/4.16.9/include 等待成功后, 我们可以执行: 1make &amp;&amp; make install 到此为止, 我们安装就完成了. 下面让我们用 zetcode 上的例题测试一下: 1234567891011121314151617181920212223242526272829#!/usr/bin/python3# -*- coding: utf-8 -*-&quot;&quot;&quot;ZetCode PyQt5 tutorial In this example, we create a simplewindow in PyQt5.author: Jan Bodnarwebsite: zetcode.com last edited: January 2015&quot;&quot;&quot;import sysfrom PyQt5.QtWidgets import QApplication, QWidgetif __name__ == &apos;__main__&apos;: app = QApplication(sys.argv) w = QWidget() w.resize(250, 150) w.move(300, 300) w.setWindowTitle(&apos;Simple&apos;) w.show() sys.exit(app.exec_()) 把上面那段代码保存在一个python文件中, 然后执行: 1python test.py 如果出现下面这个界面, 就说明你成功了! 如果你没有通过 brew 安装 sip , 你可能遇到的问题: 1. 安装 PyQt , 执行 python configure.py 时找不到 sip12sh: sip: command not foundError: &apos;sip -V&apos; did not generate any output. 解决方案:知道你安装 sip make install 时的一些信息, 比如:12$ make installcp -f sip /usr/local/Cellar/python/2.7.10_2/Frameworks/Python.framework/Versions/2.7/bin/sip 然后在终端中执行: 1export PATH=/path/of/your/python/2.7.10_2/Frameworks/Python.framework/Versions/2.7/bin/:$PATH 2. fatal error: ‘sip.h’ file not found错误:12345678In file included from qpycore_post_init.cpp:25:In file included from ../qpy/QtCore/qpycore_api.h:30:../qpy/QtCore/qpycore_public_api.h:26:10: fatal error: &apos;sip.h&apos; file not found#include &lt;sip.h&gt; ^1 error generated.make[1]: *** [qpycore_post_init.o] Error 1make: *** [sub-QtCore-make_first-ordered] Error 2 解决方案: 1python configure.py --sip-incdir=/path/of/your/Downloads/sip-4.16.9/siplib Update 2015年11月25日: 如何为 python3 安装 pyqt51. 安装 sip 时附加额外参数 --with-python31brew install sip --with-python3 2. 安装 PyQt 时附加额外参数 --target-py-version=VERSION (e.g. 3.4)1python3 configure.py --sip-incdir=/path/of/your/sip/include --target-py-version=VERSION","categories":[],"tags":[{"name":"PyQt","slug":"PyQt","permalink":"http://blog.justbilt.com/tags/PyQt/"}]},{"title":"ldoc 入门指南","slug":"ldoc","date":"2015-08-23T08:47:55.000Z","updated":"2017-03-12T01:22:38.000Z","comments":true,"path":"2015/08/23/ldoc/","link":"","permalink":"http://blog.justbilt.com/2015/08/23/ldoc/","excerpt":"最近因为服务端的一些变故, 需要一份客户端与服务器交互的 api 文档. 首先肯定是要排除掉手写的, api 文档这货肯定是要自动生成啦, 要不以后维护起来得死人的.","text":"最近因为服务端的一些变故, 需要一份客户端与服务器交互的 api 文档. 首先肯定是要排除掉手写的, api 文档这货肯定是要自动生成啦, 要不以后维护起来得死人的. 项目前端是使用 quick-cocos2d-x 来开发的, 开发语言是 lua, 找了一下 lua 的文档生成工具, 貌似只有 LuaDoc 和 LDoc 可以选. LuaDoc 已经好几年没有人维护了, 加上 LDoc 可以兼容 LuaDoc 的文档, 所以就定了 LDoc. 一. 安装因为 LDoc 依赖与 penlight 和 lfs , 所以使用 luarocks 来安装是最简单的, 不然自己还得处理依赖. 因此我们需要先安装 luarocks. 1. 安装luarocks如果已经安装过了的话,可以跳过这一步. 1.1 通过 homebrew 安装通过 homwbrew 安装是最简单的, 只需要 brew update 和 brew install luarocks 两步就可以啦! 不过 brew update 等待的时间可能会比较久, 耐心不够的话可以尝试从源码安装. 1.2 通过源码安装1). 从这里下载最新版的 luarocks 源文件, 解压. 2). 打开终端, cd 到刚才解压的目录. 3). 键入 ./configure 这一步的话比较诡异, 我在公司装的时候各种问题, 在家里装就没有问题. 比如出现了这个: Looking for Lua…lua not found in $PATH.You may want to use the flags –with-lua, –with-lua-bin and/or –lua-suffix. See –help.configure failed. 这是没有找到lua的原因, 确保你安装了lua, 可以通过which lua来找到lua的安装路径. 然后用--with-lua-bin 参数传给configure, 如: 1./configure --with-lua-bin=/usr/local Could not find a downloader helper program. Tried: curl wget fetch.Make sure one of them is installed and available in your PATH.configure failed. 其实我也不知道为什么会抽这个风, curl 和 wget 我都有安装的, 用 --with-downloader 指定一下就ok了, 如: 1./configure --with-lua=/usr/local --with-downloader=wget Could not find a MD5 checksum calculator. Tried: md5sum openssl md5.Make sure one of them is installed and available in your PATH.configure failed. 额, 还是指定一下 --with-md5-checker 吧! 1./configure --with-lua=/usr/local --with-downloader=wget --with-md5-checker=md5 4). 键入 make build 5). 键入 make install 如果一切正常的话, 那么就安装成功了. 可以通过键入 luarocks 来检测. 2. 安装 LDoc安装好 luarocks 之后, 安装 LDoc 是非常简单的, 只需要: 1luarocks install ldoc 就可以了, luarocks 会自动帮你安装依赖项. 安装好之后在终端键入 ldoc -h, 如果出现下面这个, 则代表安装成功! 12ldoc, a documentation generator for Lua, vs 1.4.3... 二. 概览让我们先通过一个简单的测试来了解下 ldoc , 先创建一个目录, 在目录下创建一个 test.lua 文件, 将下面的内容复制到里面: 1234567891011121314--- a test module-- @module testlocal test = &#123;&#125;--- this is a function-- @string param1 this is param1-- @int param2 this is param2-- @return a string valuefunction test.my_module_function_1(param1, param2) return param1 .. param2endreturn test 然后在这个目录下打开终端, 键入 ldoc test.lua, 一切正常的话, 会在当前目录下生成一个名为 doc 文件夹, 打开 doc/index.html 文件, 会看到下面这样的东西. 虽然很丑陋, 但也还不错, 该有的都有. 我们仔细看一下这个测试, 总体由 test 模块 和 my_module_function_1 函数 2部分组成. 它们都是以 --- 开始的, 这是 ldoc 的一个规则, 只有以 --- 开始的注释才会被 ldoc 解析, 这样就可以排除掉普通的注释信息. @module 是一个特殊的标签, 后面跟着模块的名字, 但其实这个标签是可选的, 没有的话默认会以文件名来定义模块名. 类似的标签还有很多, 我们在下面会一一说明. 三. 详解1. 标签 @module 模块, 一般一个文件就是一个模块. @classmod 和 @module 类似, 但是用来描述 class, 用这个标签后, 生成的文档中 Module 文字会变成 Class. @submodule 如果一个模块的内容被分到了好几个文件中, 那么就可以再其他文件中用 submodule 来定义, 后面跟上master module的名字. @script 和 @module 类似, 生成的文档中 Module 文字会变成 Script. 以上几个标签都是project-level, 意味着每个文件中只能包含它们其中的一个, 否则生成时就会提示 Module already declared! 错误. @author (multiple), @copyright, @license, @release 这几个啥意思就不必说了吧, 值得一提的是它们必须放在project-level,如 @module 标签下. @function, @lfunction. 用来描述函数. @function 一般情况下不用加, 只需要给函数加上---注释就可以. @lfunction 用来表示一个局部函数, 但是ldoc默认是不会导出局部变量和函数的. @param @int, @string, @bool, @func, @tab, @thread 用来描述函数参数, 后面几个指定了参数类型. @return 函数的返回值, 函数的返回值可能有多种, 因此 @return 在一个函数中也是可以多次使用的 @raise 这个函数可能抛出的错误 @local 最大的作用是使得一个函数不被导出, 除非使用了(unless –all) @see 引用文档的其他内容, 同一模块的话直接 @see xxx, 不同模块的话需要加上模块名 @see xxmodule.xxfunc @usage 给出函数的用例, 可以分多行来写 @fixme, @todo 和 @warning , 意思大家应该都懂. 但是必须在函数体内部并且以 --- 开头才能生效. 以上几个标签都是描述function的一些行为的 @table 描述一个table, 也可以不加, 只需要给table加上---注释就可以. @field 用来描述table中的一个字段 @section 用来把一个模块分隔成好几块 @type 和 @class 的作用差不多, 但不能与 @class 同时存在. 一个文件中可以有多处 @type , 会和 @section 似得吧文件分隔成好多份. @within 用来形容函数和table, 指定它们属于哪个section, 可以指定不存在的一个section, 会自动创建一个 哈哈, 以上就是所有的标签啦, 虽然比较多, 但是有很多都不怎么常用, 所以还是很好理解的. 2. 对于函数的一些高级用法2.1 显示参数的类型这个前面有提过, @param 是不指明具体类型的, 若想指明的话可以用 @int, @string, @bool, @func, @tab, @thread 几个标签来. 2.2 可选参数与默认值可选参数的标记是自参数标签后紧跟 [opt] 来标识, 默认值则是 [opt=xx]. 让我们看一个官方的示例: 123456789--- a function with typed args.-- @string name person's name-- @int age-- @string[opt='gregorian'] calender optional calendar-- @int[opt=0] offset optional offset-- @treturn stringfunction one (name,age,...)end----&gt; displayed as: one (name, age [, calender='gregorian' [, offset=0]]) 2.3 多种返回值一个函数不同的情况可能返回不同的值, 意义也都不一样, 那么怎么来表示呢? 答案是在 @return 后紧跟 [x] (x可以是1,2,3,…) 来标识. 生成出来的文档是用 Or 来列出这些不同的返回值的. 3. config.ld 的字段说明ldoc 运行时有一堆参数可以传递, 在终端中去做比较麻烦, 修改也不太方便. 因此我们可以创建一个 config.ld 配置文件来做这个事情, ldoc . 表示在当前目前下查找 config.ld 文件, ldoc -c path/to/myconfig.ld &lt;file&gt; 读取特殊的目录的配置文件. 其实 config.ld 就是一个lua文件, 填写时需要遵循lua语法. config.ld 文件中有一大坨的条目可以选择, 我们来看一下他们都是什么意思吧. file 可以是一个文件名或者目录名, 如: file = &#39;test.lua&#39;. file 也可以是一个table, 这时里面可以填写文件数组或目录数组, 同时也可以包含另一个特殊的数组 exclude, 表明要排除的文件或目录 project 项目的名称, 会出现在文档的左上角. 默认为 ldoc title 页面的名称, 默认为 Reference all 导出 local 的 function output 导出 html 的名字, 默认是 index dir 导出目录的名字, 默认是 doc colon 使用冒号风格代替 @ 风格的 tag boilerplate 忽略所有源文件中的首个注释(块), 比如: license 注释. ext 输出文件的后缀(默认为 html) one 文档使用单列的布局 style, template 指定模板和样式的目录. 在 config.ld 中它也可以为 true , 表示使用和配置文件同一目录的模板. merge 允许文档从不同的文件合并同名的 module , 而不是产生多个module. 其它可选的参数还有很多, 但是都不常用. 大家可以点击这里跳转到官方文档继续查看. 这篇文章到这里就差不多, ldoc 网上的中文资料不是很多, 加上我使用时遇到了一些问题, 因此我写下这篇文章, 主要是帮大家对 ldoc 形成一个大体的印象, 具体细节或者高级功能可能还是得去看官方的文档. 当然有什么问题也欢迎大家评论指出, 多多交流! 附录:官方文档: 这里github地址: 这里","categories":[],"tags":[{"name":"Lua","slug":"Lua","permalink":"http://blog.justbilt.com/tags/Lua/"},{"name":"ldoc","slug":"ldoc","permalink":"http://blog.justbilt.com/tags/ldoc/"}]},{"title":"更新 spine 的 cocos2d-x runtimes","slug":"upgrad-spine-runtime","date":"2015-08-16T11:17:03.000Z","updated":"2017-03-12T01:22:38.000Z","comments":true,"path":"2015/08/16/upgrad-spine-runtime/","link":"","permalink":"http://blog.justbilt.com/2015/08/16/upgrad-spine-runtime/","excerpt":"又是2个多月没有更新博客了, 真是不应该, 惭愧啊！其实手上已经攒了一些素材了, 只是一直没有一个很强的动力去写出来, 今天总算是有一些想法了, 先用一篇没有什么养分的文章来 “探探路”, 唤醒下自己写作的欲望吧！","text":"又是2个多月没有更新博客了, 真是不应该, 惭愧啊！其实手上已经攒了一些素材了, 只是一直没有一个很强的动力去写出来, 今天总算是有一些想法了, 先用一篇没有什么养分的文章来 “探探路”, 唤醒下自己写作的欲望吧！ 1. why ?最近的项目中用到 spine, 但是美术在spine中做的效果却与程序中得效果有些出入。比如在spine中设置翻转, 在程序中却是没有的。看了下导出的json文件, 里面是有 flipX 字段的, 于是猜想是没有解析的原因. 在spine的解析代码中搜索了一下, 果然是没有找到解析flip字段的代码的, 看来是需要更新下解析的代码了! spine 的解析库是放在 github 上的, 地址在这里 https://github.com/EsotericSoftware/spine-runtimes. 2. How ? 首先我们 clone spine-runtimes 到本地的一个目录. 复制 spine-runtimes/spine-c/include/spine/ 目录下所有文件到 cocos2d-x/cocos/editor-support/spine/ 复制 spine-runtimes/spine-c/src/spine/ 目录下所有文件到 cocos2d-x/cocos/editor-support/spine/ 复制 spine-runtimes/spine-cocos2dx/3/src/spine/ 目录下所有文件到 cocos2d-x/cocos/editor-support/spine/ 编译, 运行, 然后就没有然后了! 好吧, 这个升级远我想象的简单好多, 没有编译错误, 没有运行崩溃, 还真是令人有些不习惯, 只能说 spine 他们还是蛮认真的!","categories":[],"tags":[{"name":"cocos2d-x","slug":"cocos2d-x","permalink":"http://blog.justbilt.com/tags/cocos2d-x/"},{"name":"spine","slug":"spine","permalink":"http://blog.justbilt.com/tags/spine/"}]},{"title":"cocos2d-x AssetsManager 问题汇总","slug":"cocos-assetsmanager","date":"2015-06-05T16:42:33.000Z","updated":"2017-03-12T02:22:53.000Z","comments":true,"path":"2015/06/06/cocos-assetsmanager/","link":"","permalink":"http://blog.justbilt.com/2015/06/06/cocos-assetsmanager/","excerpt":"大家做热更新的时候都会用到 AssetsManager , 我们使用的 2.2.6 版本还存在一些问题, 在这里记录一下, 希望大家能够避开这些!","text":"大家做热更新的时候都会用到 AssetsManager , 我们使用的 2.2.6 版本还存在一些问题, 在这里记录一下, 希望大家能够避开这些! 1. “can not open destination file xxx”AssetsManager 在解压时有一定概率会出现这个错误, 让我们先定位错误发生点: 12345678FILE *out = fopen(fullPath.c_str(), \"wb\");if (! out)&#123; CCLOG(\"can not open destination file %s\", fullPath.c_str()); unzCloseCurrentFile(zipfile); unzClose(zipfile); return false;&#125; 嗯, 其实就是打开一个文件去写的时候发生了错误, 这个 fullPath 就是解压的目标路径, 但是这个目标路径的文件夹是有可能不存在的, 比如 download/res/ui/test.png, 如果 `download/res/ui 目录不存在, 就会解压失败. 这个问题也有别人遇到了, 还有具体的原因分析, 大家可以看这里: AssetsManager在下载某些特定内容的zip文件后解压缩会失败. 解决方案也比较简单, 已经在 3.x 有实现了, 就是在解压文件前, 遍历创建下每个层级的目录 就可以了, 代码如下: 12345678910111213141516171819202122232425262728293031//There are not directory entry in some case.//So we need to test whether the file directory exists when uncompressing file entry//, if does not exist then create directoryconst string fileNameStr(fileName);size_t startIndex=0;size_t index=fileNameStr.find(\"/\",startIndex);while(index != std::string::npos)&#123; const string dir=_storagePath+fileNameStr.substr(0,index); FILE *out = fopen(dir.c_str(), \"r\"); if(!out)&#123; if (!createDirectory(dir.c_str()))&#123; CCLOG(\"can not create directory %s\", dir.c_str()); unzClose(zipfile); return false; &#125; else&#123; CCLOG(\"create directory %s\",dir.c_str()); &#125; &#125; else&#123; fclose(out); &#125; startIndex=index+1; index=fileNameStr.find(\"/\",startIndex);&#125; 2. 下载进度问题AssetsManager 的下载进度会在控制台上打印出来, 但是这个进度却与我们注册监听的进度不太一致, 经常都下载完成了, 进度却只走了 10% 左右, 而解压确实是没有占用进度的, 令人十分困惑. 经过仔细阅读源码和分析, 发现了问题所在, AssetsManager 实际上是多线程的, 使用消息队列在线程间通信. 下载线程有消息了, 会压入队列中, 主线程注册了update, 不断的从队列中拿取消息, 处理, 删除. 这套设定其实还是蛮不错的, 但是却没有考虑到主线程的处理能力不足的情况. 下面是下载进度的逻辑: 1234567891011121314151617int assetsManagerProgressFunc(void *ptr, double totalToDownload, double nowDownloaded, double totalToUpLoad, double nowUpLoaded)&#123; AssetsManager* manager = (AssetsManager*)ptr; AssetsManager::Message *msg = new AssetsManager::Message(); msg-&gt;what = ASSETSMANAGER_MESSAGE_PROGRESS; ProgressMessage *progressData = new ProgressMessage(); progressData-&gt;percent = (int)(nowDownloaded/totalToDownload*100); progressData-&gt;manager = manager; msg-&gt;obj = progressData; manager-&gt;_schedule-&gt;sendMessage(msg); CCLOG(\"downloading... %d%%\", (int)(nowDownloaded/totalToDownload*100)); return 0;&#125; 举个例子, 下载线程每秒压入5个消息, 但是主线程的update回调是1秒一次, 得等5s才能处理完成. 这样就会导致下载早已完成, 但主线程却还有一大坨的消息没有处理完成, 仍旧在不紧不慢的处理着. 解决问题的方法也比较简单, 可以从两个角度入手, 提升主线程的处理能力和减少下载线程的消息制造. 由于主线程已经是注册的帧事件 update 了, 没有提升的空间, 所以只能从第二个角度入手了. 分析了下需求, 对于下载进度的索取, 其实没有必要过于精确, 精确到1%就可以了. 这样的话一共只会产生100个事件, 大大减少了事件的数量. 这个问题, 3.x 也做了处理, 和我的想法一致. 摘录实现如下: 12345678910111213141516171819int assetsManagerProgressFunc(void *ptr, double totalToDownload, double nowDownloaded, double totalToUpLoad, double nowUpLoaded)&#123; static int percent = 0; int tmp = (int)(nowDownloaded / totalToDownload * 100); if (percent != tmp) &#123; percent = tmp; Director::getInstance()-&gt;getScheduler()-&gt;performFunctionInCocosThread([=]&#123; auto manager = static_cast&lt;AssetsManager*&gt;(ptr); if (manager-&gt;_delegate) manager-&gt;_delegate-&gt;onProgress(percent); &#125;); CCLOG(\"downloading... %d%%\", percent); &#125; return 0;&#125; 在查看源码的时候, 也发现了一些非常有意思的事情. AssetsManager 有做一个这样的设定, 下载全部完成后, 会将 downloaded-version-code 字段写入到 UserDefault 中, 解压完成后删除这个字段, 为什么呢? 为了应对解压过程中出现了一些意外, 比如关闭了游戏进程, 这样重启游戏的时候就不用再下载更新包了. 这本是一个不错的设定, 但是它使用了事件队列来做这个事情, 上面说过, 下载完成后, 其实积压了一大坨的事件, 所以这个事件根本不会立刻被执行到. 但是解压的操作却不会受次影响, 会立刻执行到. 这会导致什么问题呢? 导致先删除downloaded-version-code字段, 后设置, 与预期的执行顺序完全想反. 虽然最后可能不会影响到什么, 但是却是一段非常危险的代码. Update: 2015年06月25日还是接着上面的那个问题, AssetsManager 将 downloaded-version-code 记录到了 UserDefault 中, 但是只有解压成功了才会删除, 那么解压失败了呢? 解压失败失败的原因有好多, 如果是下载的更新包有问题的话, 重启后仍然不会重新下载, 直接开始解压, 就会陷入到一个循环中, 一直出错. 解决的办法是什么呢? 舍弃掉这个优化. 将 AssetsManager 中的这几行注释掉, 就不会记录 downloaded-version-code, 出错后重启就会重新下载: 123CCUserDefault::sharedUserDefault()-&gt;setStringForKey(KEY_OF_DOWNLOADED_VERSION, ((AssetsManager*)msg-&gt;obj)-&gt;_version.c_str());CCUserDefault::sharedUserDefault()-&gt;flush(); 我们的游戏就遇到了这样的情况, 玩家热更解压失败后就一直处于解压失败的状态, 只能删除游戏重新安装了! 哈哈,正如你所想的,3.x 也做了这样的处理: 12345678910if (! uncompress())&#123; Director::getInstance()-&gt;getScheduler()-&gt;performFunctionInCocosThread([&amp;, this]&#123; UserDefault::getInstance()-&gt;setStringForKey(this-&gt;keyOfDownloadedVersion().c_str(),&quot;&quot;); UserDefault::getInstance()-&gt;flush(); if (this-&gt;_delegate) this-&gt;_delegate-&gt;onError(ErrorCode::UNCOMPRESS); &#125;); break;&#125; 解压失败后就直接清除了 downloaded-version-code 的记录. 从上述可以看到, 这些问题都已在 3.x 中解决, 所以能升级引擎的还是赶紧升级. 同时也会明白cocos的坑还是蛮多的, 大家一定要做好测试呀! –EOF–","categories":[],"tags":[{"name":"Quick-Cocos2d-x","slug":"Quick-Cocos2d-x","permalink":"http://blog.justbilt.com/tags/Quick-Cocos2d-x/"},{"name":"hotupdate","slug":"hotupdate","permalink":"http://blog.justbilt.com/tags/hotupdate/"}]},{"title":"从 C++ 到 lua 的2014","slug":"my-2014","date":"2015-05-31T13:58:42.000Z","updated":"2017-03-12T01:22:38.000Z","comments":true,"path":"2015/05/31/my-2014/","link":"","permalink":"http://blog.justbilt.com/2015/05/31/my-2014/","excerpt":"2014的年结又晚了好多, 若是用一句话去总结这一年的变化的话, 那就是: 从 C++ 到 lua 大约是元旦的时候, 到了公司 C , 放弃了使用2年多的c++, 搞起了lua, 学习了 quick-cocos2d-x. 这一年工作,生活发生了好多变化, 自己的心态也变化了好多.","text":"2014的年结又晚了好多, 若是用一句话去总结这一年的变化的话, 那就是: 从 C++ 到 lua 大约是元旦的时候, 到了公司 C , 放弃了使用2年多的c++, 搞起了lua, 学习了 quick-cocos2d-x. 这一年工作,生活发生了好多变化, 自己的心态也变化了好多. 工作入职 C入职 C 似乎是早已注定的事情, 与 C 的老大@Bin在微博上相识已久, 一直未曾谋面, 后来公司缺人, 便推荐了好友@imbahom过去, 后来听说我打算从 B 离职之后, 便多次邀请我过去共谋大业. 与其说是公司, C 其实更算是一个创业团队, 十来个人, 一套商住两用房, 扁平化管理. 其实 C 还是一个蛮有逼格的公司啦, 技术人员都配有 MBA或 MBP, 现磨咖啡机, Airport, 还有堆叠在一起的登山露营设备, 似乎都预示这是一个不一样的团队, 不像 B 一样是一个血汗工厂. 然而 C 所做的事情说起来可能有些low, 山寨与换皮. 我表示理解, 这是一个笑贫不笑娼的时代, 活下来可能才是最重要的事情. 公司除了一个主要的策略类游戏外, 还同时开着四五个山寨换皮游戏, 我过去也是负责一款, 同时顺带学习 lua 和 quick. 刚开始学习的时候总是十分痛苦的, 加上当时quick的文档不够健全, 好多东西只能自己摸索. 这个时候Bin给了我好多帮助, 他的思维跳跃极大, 总是能够想到一些奇怪的解决方案, 让人脑洞大开, 也使得苦闷的debug变得愉悦起来, 从他身上学到了好多. 小团队的好处有很多, 每天中午吃饭就是其一, 大家刚好能坐满一个桌, 每人点一个菜, 吃的不亦乐乎, 饭桌也是大家吐槽和释放压力的一个好地方! 然而快乐的日子总是短暂的, 主营的项目似乎不怎么赚钱, 换皮项目也都收不回成本, 公司的氛围变得十分的微妙! Bin经常将自己锁在会议室抽烟, 思考公司的未来, 与合伙人似乎也有些不合, 项目一个个的砍掉, 同事一个个的离职. 我也变得不安起来, 会不会next就是我? 要不要早谋出路? 好友 @imbahom 忍受不了, 先我一步离开公司, 这对我也是一个打击. 终于, 我于14年7月底从 C 离职, 在这里我感受到了小团队的灵活,高效,也明白的小团对的不稳定性, 一个项目的失败可能就会导致大家散伙. 入职 D在之前的一位老师的带领下, 我和好友@imbahom加入了 D, 与 C 相比, D 的规模能略大一些, 更加正规一些, 至少是个公司了! 我们到来是为了接手一个半成品的项目, 之前的客户端团队集体离职, 但项目又急着上线, 便想找一个现成团队, 快速接手项目! 经过评估, 我们决定重写整个项目, 这也为后来无休止的加班埋下了伏笔. 其实 D 更像是一个传统的公司, 虽然好多规矩,流程上更正规一些, 但却失去了小团队的高效,灵活. 而且公司在一些硬件设备上比较抠, 着实让人有些想不明白, 好多几百大洋就能大幅提升工作效率的东西不愿意去做. 不过在这个项目中学到了好多东西, 对于lua的理解, 对于cs结构的理解, 对于quick的理解都增加了好多, 对于我的成长帮助特别大! D 的老板也算是一个比较nice的人, 虽然有时候比较爱吹牛, 但是为人比较仗义, 人脉也广, 如果能有一个靠谱的研发团队的话, 一定能做成事的! 好吧, 工作的事情就讲到这里, 后来也发生了好多事情, 但这都是15年的了, 等明年年结的时候再说吧, 这次一定会 on time! 技术/学习这一年技术的成长并不是很大, 更多的在理解/理念/效率上的变化了! 学习了新的语言 lua, 非常简洁高效的一门语言, 读了云风的Lua 源码欣赏, 了解到了很多语言底层的东西, 有机会一定要阅读下 lua 的源码. 学习了quick-cocos2d-x, 一个非常棒的 cocos2d-x lua 框架, 集成了一堆有用的 feature, 确实能如宣传所言, 大幅提升开发效率. 只是后来被 cocos2d-x 团队收购后, 发展变得缓慢起来了, 方向我也搞不清楚是什么了, 感觉廖大应该解释一下. 终于参与了期待已久网络游戏的制作, 与单机相比, 更大的区别在于异步, 单机想要获取什么数据直接配置里读取, 而网游则需要去请求, 也不会立刻返回. 但是对于客户端数据的安全性要求就没有单机大了, 因为数据都是以服务端为准的. 终于在 MacOS 下开发了, 相比 Windows, Mac 在核心开发之外需要操心的东西真的很少, 统一的快捷键, brew , 不需要担心流氓软件等, 绝对大幅提升开发效率. 用一周业余时间开发了一款自己挺喜欢的小游戏开心消方块, 在各大 android 渠道都上了, 虽然下载量不咋地, 但是自己还是蛮开心的, 同时对于各大渠道的流程也都搞清楚了. 订阅全面转向了inoreader, 学习的重心都放到了这里, 获益匪浅! 编辑器使用了Sublime Text, 又是一个提示开发效率的利器! 购买了曲径的冬月服务, ¥130.00 元/季, 一顿吃饭的钱, 用在这个上边, 绝对是最值的了! 玩具 人体工学鼠标 号称可以预防鼠标手, 键位比较奇怪, 10分钟可以上手, 感觉还不错, 不过半年不到滚轮已经不太好使了! 小米手环 戴着还算可以, 至少不丑, 60天超长待机巨爽! 显示器支架 还算有用, 不过安装调节都不是很方便, 不建议购买这款! 生活14 年我觉得过得还是蛮快乐的一年, 4月份的时候搬到了离父母很近的地方, 有一段时间父母每天都做好饭我们回去吃, 中午还能带一顿, 感觉很棒! 虽然嘴上不说, 但是离父母近了, 心里确实能够踏实好多, 还组织过一次家庭奥森野营活动, 大家在一起特别开心, 工作这几年一直很少陪父母出去玩! 对于女友, 还是有一些亏欠的, 因为加班, 能陪她的时间变的很少, 她因此也有一些抱怨, 不过更多是对我身体上的担心. 虽然她的脾气比较大, 但是为人十分稳重谨慎, 心地善良, 这也是我特别喜欢她的一点. 这一年出去玩过三次, 京郊龙庆峡, 大同, 天津, 其实我比较宅的人, 不太愿意出去玩, 不过世界那么大, 走走也是对的. 2014 年整体也还算是比较平静吧, 自己也在稳定中成长, 加油, 希望 2015 年能有更多的东西可以写. –EOF–","categories":[],"tags":[{"name":"年结","slug":"年结","permalink":"http://blog.justbilt.com/tags/年结/"}]},{"title":"MyGUI学习笔记(一) 在Windows上运行MyGUI","slug":"mygui-1-run-on-windows","date":"2015-05-29T15:30:11.000Z","updated":"2017-03-12T01:22:38.000Z","comments":true,"path":"2015/05/29/mygui-1-run-on-windows/","link":"","permalink":"http://blog.justbilt.com/2015/05/29/mygui-1-run-on-windows/","excerpt":"最近突然对 MyGUI 燃起了一些兴趣, 打算学习一番. 第一步肯定是跑起来 Demo 吧, 我主力系统是 MacOS , 首先肯定是考虑在 Mac 上搞起. 虽然 MyGUI 号称是 Corss Platform 的, 然而脱离了 Ogre 之后的 MyGUI 就只能跑在 windows 上了. 额, 在 Mac 上的趟坑之旅我们暂且不提, 让我们来曲线救国吧 – 在Windows上运行MyGUI.","text":"最近突然对 MyGUI 燃起了一些兴趣, 打算学习一番. 第一步肯定是跑起来 Demo 吧, 我主力系统是 MacOS , 首先肯定是考虑在 Mac 上搞起. 虽然 MyGUI 号称是 Corss Platform 的, 然而脱离了 Ogre 之后的 MyGUI 就只能跑在 windows 上了. 额, 在 Mac 上的趟坑之旅我们暂且不提, 让我们来曲线救国吧 – 在Windows上运行MyGUI. 零. 准备工作在正式开搞前, 我们需要准备几样东西, 这几样东西可能在墙外, 大家自备梯子. 从 MyGUI 的 github 上下载最新代码, 解压到一个目录备用. 从 CMake 的官网下载 CMake 的最新安装包, 安装之. 从 bitbucket 上下载 ogredeps. 一. 编译 ogredeps因为 MyGUI 一开始就是为 Ogre 设计的, 所以会用到 Ogre 的一些依赖库, 我们这一步就需要编译这些依赖库. 1. 运行CMake在上方输入框中选择 ogredeps 的源码路径, 下面选择 build 路径. 如下图: build 路径可以随意设置, 一般会选择和source目录一致. 2. 生成 IDE 工程点击Configure按钮, 在弹出的框中选择自己的 VS 版本, 然后点击finish按钮. 这一步一般不会出什么问题, 成功后会刷新出一坨红色的东西, 不要担心, 那不是错误. 点击Generate按钮, 生成VS的工程文件. 3. 编译并拷贝生成文件去 ogredeps 的根目录, 运行生成的OGREDEPS.sln文件打开VS, 在Solution Explorer窗口中找到INSTALL工程,右键Build: 等待编译成功后, 去 ogredeps 根目录下找到刚生成的 ogredeps 文件夹, 里面包含有头文件和库文件, 把它拷贝到 MyGUI 的根目录下, 并重命名为 Dependencies. 好了, 这一步就算完成了. 二. 编译 MyGUI1. 生成 VS 工程第一步还是运行 CMake, 不过这次要先Delete Cach 下, 可以在File菜单下找到它: 然后选择 source 路径 和 build 路径, 完成之后, 点击Configure按钮, 在弹出的框中选择自己的 VS 版本, 然后点击finish按钮. 一番等待之后, 弹出了错误提示! 这次是确实有错误了: 从红框部分,可以看到错误细节: 1+ ogre: Support for the Ogre render system &lt;&gt; MyGUI 的设计理念确实是按照 Cross Platform 设计来搞的, 所以他的 render system 是有多套实现的, 默认是用 Ogre 的渲染. 往上看一下就能找到解决方案: – Also check that you buildind with RenderSystem that you need or set another with -DMYGUI_RENDERSYSTEM= 好的, 那我们找到 MYGUI_RENDERSYSTEM 这个宏, 给他改成 3 &lt;OpenGL&gt; 就可以了! 在 CMake 界面的一坨红色的东东中找到 MYGUI_RENDERSYSTEM, 如下图: 鼠标悬停的话会有详细介绍. 再次点击Configure按钮, 这次就不会有错误了! 完成后点击Generate按钮, 生成VS的工程文件. 2. 编译 MyGUI在 MyGUI 的根目录下找到 MYGUI.sln ,运行它! 还是在Solution Explorer窗口中找到INSTALL工程,右键Build. 这次编译会略微久一些, 不过正常情况下是不会有意外滴! 编译完成后, 会在 bin/debug 目录下看到所有的 Demo 的运行文件, 可以挨个运行看一下都是什么. 3. 调试项目如果我们想调试某个 Demo, 需要在这个Demo的工程文件上右键设为启动项Set as StartUp Project, 然后 F5 启动调试, 不过在运行时会因为找不到资源崩溃掉. 估计原因是工作目录不正确的, 我们需要修改下, 项目右键Properties: 将$(ProjectDir)改为$(OutDir), 确定, 再次启动调试, 成功! 至此为止, windows 上的运行调试已无问题, 可以开始学习了! –EOF–","categories":[],"tags":[{"name":"MyGUI","slug":"MyGUI","permalink":"http://blog.justbilt.com/tags/MyGUI/"}]},{"title":"为 Quick-cocos2d-x 添加析构事件","slug":"onDestroy","date":"2015-05-17T06:04:37.000Z","updated":"2017-04-23T04:41:25.000Z","comments":true,"path":"2015/05/17/onDestroy/","link":"","permalink":"http://blog.justbilt.com/2015/05/17/onDestroy/","excerpt":"一. 为什么会需要析构事件 ?quick 的 class 实现提供了类似c++构造函数的ctor , 却没有提供类似 c++ 的析构函数. 我们确实需要这样的一个回调,去写一些retain对象的release调用, 移除监听的事件等. 那么该怎么做呢?","text":"一. 为什么会需要析构事件 ?quick 的 class 实现提供了类似c++构造函数的ctor , 却没有提供类似 c++ 的析构函数. 我们确实需要这样的一个回调,去写一些retain对象的release调用, 移除监听的事件等. 那么该怎么做呢? 1. onEnter 与 onExitonEnter 与 onExit 确实是一个蛮不错的选择, 总是成对出现. 但是, 确实存在这样的问题: 问题1: 可能会被调用多次 确实如此, 当你以 pushScene 的形式加入一个新的场景, 原先场景的所有节点都会被调用 onExit, popScene 时又会调用 onEnter ; 或者我们想暂停一个 Node, 可以通过手动调用 onExit 来实现, 恢复时调用 onEnter, 等等. 这样子在 onExit 中写一写释放的代码似乎又不太合适. 问题2: 只有加入到渲染树的节点才会被调用 onEnter/onExit 存在这样的需求, 我们 new 一个 Node 对象, 但是却不急于将他 addChild 到另一个节点上, 而是先retain下, 这样的话就不会调用的onEnter/onExit. 或者我们有一个局部的 Node 对象, 不添加到节点树, 这样下一个回收周期会被回收掉, 但是整个过程却不会调用的onEnter/onExit. 2. ctor 与 onCleanup当我看到 onCleanup 整个名字, 我一度为我找到了最终的解决方案. 事实上, 它在多数情况下确实是能够正常工作的, 它会在 node 被 remove 时调用. 说到这里你可能会敏锐发现它会遇到与 onExit 相同的问题2, 也确实如此. 只有加入到渲染树的节点才会被调用 onCleanup. 但是如果你没有上述的要求的话, ctor 与 onCleanup 配合使用还是很不错的. 需要注意的一点是, 调用 removeFromParentAndCleanup(bool cleanup) 时如果 cleanup 不传入 true 的话是不会触发 onCleanup 事件的. 综上所述, 现在并没有一个完美的方案, 只能自己搞一个. 二. 实现要实现一个析构消息, 其实特别简单, 只用在 Node 的析构函数中分发一个消息就可以了. 这里我用 quick-3.5 实现一下. 1. 添加 kNodeOnDestroy 事件并分法打开 CCNode.h , 找到 kNodeOnCleanup 枚举, 并在下方添加 kNodeOnDestroy : 12345678enum &#123; kNodeOnEnter, kNodeOnExit, kNodeOnEnterTransitionDidFinish, kNodeOnExitTransitionDidStart, kNodeOnCleanup, kNodeOnDestroy&#125;; 打开 CCNode.cpp, 找到Node::~Node()函数, 在函数开始处添加:123456789#if CC_ENABLE_SCRIPT_BINDING if ( _scriptType != kScriptTypeNone) &#123; int action = kNodeOnDestroy; BasicScriptData data(this,(void*)&amp;action); ScriptEvent scriptEvent(kNodeEvent,(void*)&amp;data); ScriptEngineManager::getInstance()-&gt;getScriptEngine()-&gt;sendEvent(&amp;scriptEvent); &#125;#endif // #if CC_ENABLE_SCRIPT_BINDING 打开 CCLuaEngine.cpp, 修改 handleNodeEvent 函数, 添加:123case kNodeOnDestroy: _stack-&gt;pushString(&quot;destroy&quot;); break; 编译 player, c++ 这边的修改就结束了. 2. Lua 添加事件处理打开 NodeEx.lua , 在onCleanup函数下方添加:12function Node:onDestroy()end 修改setNodeEventEnabled函数, 添加调用:1234567...elseif name == \"cleanup\" then self:onCleanup()elseif name == \"destroy\" then self:onDestroy()end... 下来我们要修改一下lua这边移除事件监听的条件, 之前是收到cleanup消息, 现在应当改为destroy消息. 还是 NodeEx.lua , 找到EventDispatcher函数, 修改判断条件如下:12345if idx==c.NODE_EVENT then event = &#123; name=data &#125; if data==&quot;destroy&quot; then flagNodeCleanup = true end 3. 测试 1.我们新建一个scene, 然后添加如下代码: 12345678910111213local nodeEventTest = class(\"nodeEventTest\",function() return display.newScene(\"nodeEventTest\")end)function nodeEventTest:ctor() cc.FileUtils:getInstance():addSearchPath(\"src/\") self:setNodeEventEnabled(true)endfunction nodeEventTest:onDestroy() print(\"--nodeEventTest:onDestroy\")end 启动这个scene后,然后再进入另一个scene后,会在控制台观察到输出. 2.我们在一个Layer中添加下面这几行代码: 1234local node = display.newNode()node:setNodeEventEnabled(true, function(event) print(\"node:\",event.name)end) 可以在控制台观察到:1[LUA-print] node: destroy 因此我们的做法是成功的, 一个临时cocos对象也可以收到onDestroy事件. –EOF–","categories":[],"tags":[{"name":"Quick-Cocos2d-x","slug":"Quick-Cocos2d-x","permalink":"http://blog.justbilt.com/tags/Quick-Cocos2d-x/"}]},{"title":"入手 iMac Retina 5K","slug":"buy-imac-with-retina","date":"2015-05-08T12:45:37.000Z","updated":"2017-03-12T01:22:38.000Z","comments":true,"path":"2015/05/08/buy-imac-with-retina/","link":"","permalink":"http://blog.justbilt.com/2015/05/08/buy-imac-with-retina/","excerpt":"引子就买电脑这事来说，还是挺曲折的。大约是12年从朋友那入手了他淘汰的10年13寸Air，当时那叫一个开心啊，卧槽，苹果笔记本就是尼玛好看，恨不得睡觉都抱着。然后每天回家就抱着Air写代码，现在想起来还能够感受到当时的那种喜悦之情。","text":"引子就买电脑这事来说，还是挺曲折的。大约是12年从朋友那入手了他淘汰的10年13寸Air，当时那叫一个开心啊，卧槽，苹果笔记本就是尼玛好看，恨不得睡觉都抱着。然后每天回家就抱着Air写代码，现在想起来还能够感受到当时的那种喜悦之情。 就这样一直用着，突然有一天就发现电脑带不动了，当时十分low逼的装了的windows，一开机就起飞，电池也用的巨快。后来发现切到 Mac OS 下会好很多，于是卸了windows，开始搞 Mac。就这样又过了一段时间，Mac 升级了几次系统后，发现又有些扛不住了，而且因为分辨率不高，好多软件用着很难受，慢慢的就不爱用了。 再后来换了工作，新公司配了台新版的Air，而且非常 Nice 的可以带回家里用，相比之下就彻底放弃了原来的Air。大约过了半年吧，离开了这家公司（这个我过几天2014的年结的文章里会细说，原谅我的拖延症），不舍归不舍，电脑自然是要归还的。不过因为写代码用起了 Sublime ，相对 Xcode 和 VS 来说，要轻量好多，所以又启用了尘封已久的Air，用着倒也相安无事。 然后重点就来了，为啥又想买电脑了呢？因为QT，因为 Qt Creater 的界面太大了，编一个 960x640 的 ui 都放不全，需要滚来滚去的，太痛苦了。额，我是想过外接显示器的，不过每次选好放到购物车点下单的时候就开始犹豫了，漏光怎么办？尺寸不够怎么办？有色差怎么办？。。。。然后就没有然后了！ 就这样一直拖到了15年的5月份，有一天晚上，就蒙生了买一个 iMac 的冲动，我的想法比较简单，买一个之后主机，显示器，鼠标，键盘都有了，嘿嘿（多实在的一个人呐）。第二天我起了一大早（6点），就在苹果官网买了，用的招行信用卡，分期可以免利息，不过得从招行的官网(这里)进去。这一次非常利索，拖延君完全没有反应过来就已经剁手啦~ 哈哈哈。 不过还是要特别感谢老婆大人的大力支持，若不是如此，恐怕也不会如此顺利 ~ 说出来不怕大家见笑啦，哈哈。 开箱下完单后就各种刷快递了，从上海发的货，第二天晚上就到了。这里必须赞一下顺丰的服务，因为是限时送达，快递小哥特意打了几个电话确认时间，提前30分钟就到楼下等我了（因为我还在公司改bug，苦逼），见到我后主动要求帮我搬上6楼，非常给力的有木有~ ↑↑↑ 呐，就是这个啦，不过还真是蛮大的哎~ ↑↑↑ 拆掉外包装的样子。 ↑↑↑ 开箱ing，内部防震泡沫贴合的非常完美，下方的连个泡沫需要左右抽出。 ↑↑↑ 放到电脑桌上，屏幕上的保护套没有摘，图片加了特效，还不错吧！ ↑↑↑ 屏幕上还有一层贴膜 ↑↑↑ 背部接口特写，从左至右依次是：耳机口，SD卡,USB3x4,雷电口x2,网线口. ↑↑↑ 键鼠特写，苹果的键盘我特别喜欢，终于拥有了，开心~ ↑↑↑ 最后来一张和 Air 的合照，对比十分强烈！ 后记经过断断续续一天的使用，总体感觉还是十分给力的，大屏看着就是爽。因为是混合硬盘，虽然没有纯 SSD 快，但是直观上已经感觉不出什么差异了。打开 Sublime 后，就会有想写些什么的冲动，希望自己不是3分钟热情吧，不要最初忘记目的是什么。 –EOF–","categories":[],"tags":[{"name":"生活","slug":"生活","permalink":"http://blog.justbilt.com/tags/生活/"}]},{"title":"一个命令行的 TexturePacker 拆解工具 (一)","slug":"untp","date":"2015-04-19T00:19:17.000Z","updated":"2017-03-12T01:22:38.000Z","comments":true,"path":"2015/04/19/untp/","link":"","permalink":"http://blog.justbilt.com/2015/04/19/untp/","excerpt":"一. 起源为什么想着做这样的一个工具呢? 事情是这样的, 在游戏后期的优化过程中, 发现特效在资源的总量中占比很大, 所以打算压缩下特效的尺寸. 我们特效是由策划用 TexturePacker 打成 plist + png的形式, 因为项目经手了好多人, 所以好多特效的源文件都已丢失. 因此想到做一个这样的脚本来实现这个功能.","text":"一. 起源为什么想着做这样的一个工具呢? 事情是这样的, 在游戏后期的优化过程中, 发现特效在资源的总量中占比很大, 所以打算压缩下特效的尺寸. 我们特效是由策划用 TexturePacker 打成 plist + png的形式, 因为项目经手了好多人, 所以好多特效的源文件都已丢失. 因此想到做一个这样的脚本来实现这个功能. 首先想到的是 @偶尔e网事 同学的Anti_TexturePacker, 非常好用, 我经常推荐给有需要的朋友. 不过目前只能运行在 Windows 上, 而且不支持命令行, 我们的特效有好几百个, 一个一个来的话会死人的哦~ 下来找到的是这个, texture_unpacker_scirpt, 一看还不错, 简单测试了下集成到了开发环境中, 不过后来发现部分 trim+rotate 过的 frame 解析是不正确的. 一种造轮子的冲动涌上心头. 二. 分析试着分析下这个项目, 主要分为这几点: 1.plist 文件的解析和分析.plist 文件其实就是 xml 文件, 可以用 xml.etree.ElementTree 来解析, 恰好之前做过一个 ccb2lua 的项目, 搞起来也是轻车熟路. plsit 中关键的一个结构是: 12345678910111213&lt;key&gt;oooo_001.png&lt;/key&gt;&lt;dict&gt; &lt;key&gt;frame&lt;/key&gt; &lt;string&gt;&#123;&#123;978,582&#125;,&#123;38,40&#125;&#125;&lt;/string&gt; &lt;key&gt;offset&lt;/key&gt; &lt;string&gt;&#123;15,42&#125;&lt;/string&gt; &lt;key&gt;rotated&lt;/key&gt; &lt;true/&gt; &lt;key&gt;sourceColorRect&lt;/key&gt; &lt;string&gt;&#123;&#123;76,18&#125;,&#123;38,40&#125;&#125;&lt;/string&gt; &lt;key&gt;sourceSize&lt;/key&gt; &lt;string&gt;&#123;160,160&#125;&lt;/string&gt;&lt;/dict&gt; 字段 含义 frame 在大图上的坐标和尺寸信息 offset trim 过的图片和原图之间的偏移 rotated 是否进行了旋转 sourceColorRect 原始图上的坐标和尺寸信息 sourceSize 原始图片尺寸 我做了一张图来解释这些参数: 这里要注意: 一张图片是否旋转, 都会保存相同的frame.w,frame.h 这点比较坑. 如果没有裁剪, sourceColorRect的x,y就是0, w,h 和 sourceSize 一致. 2. 图像的切取和保存.图像 python 的还是选用了 PIL 来搞, 用到的接口也不多: Image.open(file) ⇒ image 打开图像 Image.new(mode, size) ⇒ image 创建一张图像 im.crop(box) ⇒ image 截图图像一个区域 im.paste(image, box) 将一张图像粘贴到一个区域 三. 实现这里我大概讲一下实现, 具体大家可以去看源码. 1.plist 读取cocos2d-x 的这个 plist 的格式是比较奇怪的 xml, 每一个 key 的 value 都是在下一行: 123456&lt;key&gt;format&lt;/key&gt;&lt;integer&gt;2&lt;/integer&gt;&lt;key&gt;realTextureFileName&lt;/key&gt;&lt;string&gt;oooo.png&lt;/string&gt;&lt;key&gt;size&lt;/key&gt;&lt;string&gt;&#123;1024,1024&#125;&lt;/string&gt; 所以比较方便的实现是一次获取两行, 如下: 123456789data = &#123;&#125;iterator = iter(_element)while True: try: key = iterator.next() value = iterator.next() data[key.text] = parseElement(value.tag, value) except StopIteration: break 2.图片的 trim+rotate这个着实令人蛋疼, 因为旋转之后, frame 标签记录的宽高值并没有改变, 所以还得自己去判断下有没有旋转. trim+rotate 之后更是令人发指, 因为这样 sourceColorRect 的宽高,xy偏移都会互换. 这里若是思路不清晰, 极有可能被绕晕. 因为开始参考了texture_unpacker_scirpt的实现, 所以思路一直按照它的路线走, 代码中多次判断了是否旋转. 后来发现代码过于晦涩, 于是完全抛弃了它的实现. 最终核心代码如下: 12345678910111213141516171819src_image = Image.open(_imagefile)for (name,config) in data[\"frames\"].items(): # parse config frame = parse.parse(\"&#123;&#123;&#123;&#123;&#123;x:d&#125;,&#123;y:d&#125;&#125;&#125;,&#123;&#123;&#123;w:d&#125;,&#123;h:d&#125;&#125;&#125;&#125;&#125;\",config[\"frame\"]) sourceColorRect = parse.parse(\"&#123;&#123;&#123;&#123;&#123;x:d&#125;,&#123;y:d&#125;&#125;&#125;,&#123;&#123;&#123;w:d&#125;,&#123;h:d&#125;&#125;&#125;&#125;&#125;\",config[\"sourceColorRect\"]) sourceSize = parse.parse(\"&#123;&#123;&#123;w:d&#125;,&#123;h:d&#125;&#125;\",config[\"sourceSize\"]) rotated = config[\"rotated\"] # create temp image src_rect = (frame[\"x\"],frame[\"y\"],frame[\"x\"]+(frame[\"h\"] if rotated else frame[\"w\"]),frame[\"y\"]+(frame[\"w\"] if rotated else frame[\"h\"])) temp_image = src_image.crop(src_rect) if rotated: temp_image = temp_image.rotate(90) # create dst image dst_image = Image.new('RGBA', (sourceSize[\"w\"], sourceSize[\"h\"]), (0,0,0,0)) dst_image.paste(temp_image, (sourceColorRect[\"x\"],sourceColorRect[\"y\"]), mask=0) dst_image.save(outpath + \"/\" + name) 可以看到只有两处判断了旋转. 大家点这里可以看下texture_unpacker_scirpt的实现, 就会发现它的逻辑确实略显晦涩. 四.用法用法已经更新, 大家到这里查看. 五.后记项目现已开源至github, 地址https://github.com/justbilt/untp, 并提供了 windows 和 mac 的可执行文件, 位于 Release Page, 有问题欢迎评论或 issue 告知! (–EOF–)","categories":[],"tags":[{"name":"Tool","slug":"Tool","permalink":"http://blog.justbilt.com/tags/Tool/"},{"name":"untp","slug":"untp","permalink":"http://blog.justbilt.com/tags/untp/"}]},{"title":"手机游戏攻防(二) 守护变量法","slug":"phone-game-AND-watchdog","date":"2015-04-05T02:51:34.000Z","updated":"2017-03-12T01:22:38.000Z","comments":true,"path":"2015/04/05/phone-game-AND-watchdog/","link":"","permalink":"http://blog.justbilt.com/2015/04/05/phone-game-AND-watchdog/","excerpt":"一.思路我在13年8月的时候写过一篇游戏防八门神器修改的文章(见这里), 当时介绍了一个守护策略就是变量加密法, 今天我们来介绍下另一种思路: 守护变量法.","text":"一.思路我在13年8月的时候写过一篇游戏防八门神器修改的文章(见这里), 当时介绍了一个守护策略就是变量加密法, 今天我们来介绍下另一种思路: 守护变量法. 这个最开始想法来自于我之前看到的一篇文章&lt;&lt;从外行的视角尝试讲解为什么这回丰田栽了&gt;&gt;中的一小节: 对关键变量缺乏保护。嵌入式系统，或者任何系统，都会在一定条件下发生硬件或者软件错误。客观上这是无法避免的。而且汽车作为一个时常在震动、发热、位移的系统，它的内部环境不能说不恶劣，发生硬件错误的可能性甚至更高。什么样的硬件错误呢？别忘了变量都是0和1的组合，这些0和1由存储器上的高低电平代表。由于某些不可抗原因，一个电平从高变成低，或者反过来，那么这个变量就被更改了。这被称为“位反转（Bit Flip）”。为了对抗这样的事情发生，需要对变量进行保护。保护的方法一般是镜像法。简单来说就是在两个不同的地方写入同一个变量，读取的时候两边都读，比较是不是一致。如果不一致，那么可以得知这个变量已经不可靠，需要进行容错处理。 这篇文章非常有意思, 大家不妨仔细阅读一下! 当时我看完文章后是非常震惊的, 作为一个游戏程序员, 我们出错后可能只会导致公司的一些收入损失. 但是对于开发汽车系统的程序员, 他们出错的后果可能就是一条条人命了! 这使得我之后写代码时更加谨慎, 觉得可能出错的地方都会加以处理. 言归正传, 守护变量法的核心思想是为每一个变量都建立一个守护变量, 通过守护变量去验证原始变量的合法性, 思路与原文一致, 但实现略有不同, 就是守护变量与原始变量不是单纯的镜像,而是进行加密处理! 原因很简单, 单纯镜像会使得守护变量也被修改掉, 失去守护的能力! 那么问题就来了? 同样需要加密, 守护变量法较变量加密法又有什么优势呢? 两点: 可以监测到用户修改的行为 可以对数据进行还原 可以监测到玩家修改数据的行为使得我们掌握了主动权, 接下来是杀是留全在我们掌控之中. 可以对数据进行还原又能保证进行温和的惩罚后游戏仍能正常的进行! 二.实现这里我用 quick-cocos2d-x 简单实现下: 1). CryptoNumber.lua: 1234567891011121314151617181920212223242526272829303132local CryptoNumber = class(&quot;CryptoNumber&quot;)function CryptoNumber:ctor(_value) self:setValue(_value)endfunction CryptoNumber:decode() return tonumber(crypto.decodeBase64(self.protect_data))endfunction CryptoNumber:encode(_value) return crypto.encodeBase64(_value)endfunction CryptoNumber:setValue(_value) self.data = _value self.protect_data = self:encode(_value)endfunction CryptoNumber:getValue() if not self:check() then print(&quot;error!&quot;) --这里做修改后的处理! self:setValue(self:decode()) end return self.dataendfunction CryptoNumber:check() return self.data == self:decode()endreturn CryptoNumber 2). MyApp.lua 1234local n = require(&quot;utils.CryptoNumber&quot;).new(5)print(&quot;getValue:&quot;,n:getValue())n.data = 10 -- 这里用直接赋值模拟数据修改print(&quot;getValue:&quot;,n:getValue()) 3). console 123[LUA-print] getValue: 5[LUA-print] error![LUA-print] getValue: 5 //可以看到数值被还原回去了 演示代码, 没有考虑太多. 对于 lua 来说有更简单的做法, 比如使用metamethod. 三.后记其实我是建议对修改数据的玩家进行温和处理的, 比如监测到玩家修改数据后, 弹出提示告诉玩家解锁成就, 比如游戏大师. 或者走煽情路线, 告诉玩家我们开发游戏的不易, 各种苦逼各种惨. 也可以做成一个彩蛋, 弹出开发者信息. 甚至可以给玩家一些小奖励. 核心就是: 玩家不是我们的敌人, 让玩家感受到我们的诚意.","categories":[],"tags":[{"name":"游戏心得","slug":"游戏心得","permalink":"http://blog.justbilt.com/tags/游戏心得/"},{"name":"手机游戏攻防","slug":"手机游戏攻防","permalink":"http://blog.justbilt.com/tags/手机游戏攻防/"}]},{"title":"手机游戏攻防(一) 变量加密法","slug":"phone-game-AND-encrypt-var","date":"2015-04-03T16:26:44.000Z","updated":"2017-03-12T01:22:38.000Z","comments":true,"path":"2015/04/04/phone-game-AND-encrypt-var/","link":"","permalink":"http://blog.justbilt.com/2015/04/04/phone-game-AND-encrypt-var/","excerpt":"这篇文章的前提是单机游戏,网络游戏有自己的加密方法,与单机游戏不尽相同! 游戏辛辛苦苦的做完了,但是使用八门神器可以轻松的修改你的重要数据(金币,道具数量),哈哈哈,那么恭喜您,您挣不到一分钱!说的有点危言耸听了,毕竟知道八门神器这个工具的不是非常多,而且使用条件比较苛刻,但是我们不能掉以轻心,他完全可以修改完成了,将存档放在网上,这样我们就十分被动了!","text":"这篇文章的前提是单机游戏,网络游戏有自己的加密方法,与单机游戏不尽相同! 游戏辛辛苦苦的做完了,但是使用八门神器可以轻松的修改你的重要数据(金币,道具数量),哈哈哈,那么恭喜您,您挣不到一分钱!说的有点危言耸听了,毕竟知道八门神器这个工具的不是非常多,而且使用条件比较苛刻,但是我们不能掉以轻心,他完全可以修改完成了,将存档放在网上,这样我们就十分被动了! 一.什么是八门神器不明白八门神器为何物的请自行Google!这里我引用百度百科(点击这里:http://baike.baidu.com/view/3258873.htm)中的一段话: 八门神器是安卓、iOS、塞班平台上通用的游戏修改工具，可以修改内存中的数值和参数，达到修改游戏HP、MP、金钱、等级等的作用。八门神器类似于PC平台的金山游侠等游戏修改器，是手机游戏中的金手指。但八门神器在安卓平台下需要Root权限才能正常工作，在iOS平台下需要iPhone越狱才能正常工作，并且支持中、英双语言，并且自带帮助说明。 建议大家还是亲自去使用下这个工具,效果请看下图: 二.原理知己知彼百战百胜,我们要先了解八门神器的原理: 在游戏运行时，内存和处理器都会对于游戏进行非常复杂的数据交换和变更，这是因为游戏有很多的数据，例如金钱、HP值、等级、攻击力、防御力等数据，而这些数据，就在内存和处理器的各个地址当中，玩家只需要在八门神器中搜索相关的数据值，八门神器就会将搜索出记录此数据的各个地址显示，玩家进行多次的数据变更后再次搜索，到最后就会确定此地址到底是哪一个，然后将此地址的数值进行修改，回到游戏中，相关的数据也会变化!总结下,就是八门神器会搜索出对应数值的内存地址,然后改变内存地址对应的值! 三.应对方案这样我们貌似可以从两个方面去入手解决这个问题: 让它搜不着! 让它改变不了! 我们今天先来看看第一种方法. 用过这个工具的人都明白,一般情况下,一次搜索就能准确定位内存地址的情况非常少见(除非这个数字非常大,非常奇葩),都是先搜索,获得大量(几十万)的数据,然后回到游戏中,改变这个值,再回到八门神器,会自动筛选出之前搜索到的结果有哪些改变了…直到只剩下几个结果,这个时候我们挨个去改变值会变得十分的Easy! 1.改变内存地址 想想这个过程,好像只有第一次搜索是全局搜索,后面的每次搜索都是在之前搜索的结果上进行筛选!这样如果我们游戏中每次改变这个变量的时都去改变这个变量的内存地址,这样它就搜索不到了!代码如下:123456789101112131415161718192021222324252627class DynamicInt&#123;public: DynamicInt()&#123;m_pValue=NULL;&#125; ~DynamicInt() &#123; if (m_pValue) &#123; delete m_pValue; &#125; &#125; int getValue()&#123;return *m_pValue;&#125; void setValue(int nValue) &#123; if (m_pValue) &#123; delete m_pValue; &#125; m_pValue=new int(); *m_pValue=nValue; &#125;private: int * m_pValue;&#125;; 经过尝试,这个方法并不管用,还能被破解,不知我的做法错误呢还是八门神器的原理不是这样!请懂行人指出! 注: 经过分析, 可能是因为你 delete 后立刻 new 会获取到同一块内存地址的原因~ 这样的话, 我们也好说, 我们先换下顺序可能就可以了, 不过我没有进行过测试! 2.加密数据 换个思路,我们为何不在数据上做手脚,对数据进行加密(如:表面上显示的是50,内部存的却是50^0xff),这样他搜索表面上的数字当然搜索不到!代码如下:123456789101112131415161718192021222324252627282930313233343536373839404142#ifndef _H_DYNAMICVALUE_H_#define _H_DYNAMICVALUE_H_template&lt;class T&gt;class CEncryptValue&#123;public: CEncryptValue() : m_Value(0) &#123; &#125; ~CEncryptValue() &#123; &#125; T getValue() &#123; return m_Value ^ m_EncryptKey; &#125; void setValue(T value) &#123; m_Value = value; m_EncryptKey = rand(); m_Value ^= m_EncryptKey; &#125; void offset(T value) &#123; setValue(getValue() + value); &#125;public: T m_Value; int m_EncryptKey;&#125;;typedef CEncryptValue&lt;int&gt; CDynamicValueInt;typedef CEncryptValue&lt;float&gt; CDynamicValueFloat;typedef CEncryptValue&lt;bool&gt; CDynamicValueBool;#endif 使用时: 12345678910CDynamicValueInt m_DynamicMoney;//设置金钱数m_DynamicMoney.setValue(1000);//得到金钱m_DynamicMoney.getValue()//改变金钱m_DynamicMoney.offset(-100); 这个方法经过测试,十分管用!也是我目前采取的方案!大家可以直接拿来使用! 写在后面的话: 有些人可能会骂八门神器的作者无耻之类,我非常不认同,大家都是靠手艺吃饭的,么有什么无耻不无耻的,如果你的游戏被破解了,只能说明你比较傻!还有对使用八门神器破解游戏的玩家表示同情,因为你一旦破解了,整个游戏就没有意义了!","categories":[],"tags":[{"name":"游戏心得","slug":"游戏心得","permalink":"http://blog.justbilt.com/tags/游戏心得/"},{"name":"手机游戏攻防","slug":"手机游戏攻防","permalink":"http://blog.justbilt.com/tags/手机游戏攻防/"}]},{"title":"QuickxDev插件(二) debug.log文件的处理","slug":"quickxdev-2","date":"2015-03-16T06:45:10.000Z","updated":"2017-03-12T02:22:53.000Z","comments":true,"path":"2015/03/16/quickxdev-2/","link":"","permalink":"http://blog.justbilt.com/2015/03/16/quickxdev-2/","excerpt":"上篇文章中我们说过要对debug.log文件做一些特殊处理, 这里我们来看看具体的实现.","text":"上篇文章中我们说过要对debug.log文件做一些特殊处理, 这里我们来看看具体的实现. 一. 对 debug.log 文件进行配色debug.log文件默认是没有配色的, 灰不拉几不好看. 实现这个其实非常简单, 每一个打开的文件都是一个sublime.View, sublime.View中有现成的函数set_syntax_file来设置文件句法规则, 让我们来看下定义: set_syntax_file(syntax_file)Changes the syntax used by the view. syntax_file should be a name along the lines of Packages/Python/Python.tmLanguage. To retrieve the current syntax, use view.settings().get(‘syntax’). 这个函数其实对应的是 Sublime 菜单栏中的这个: 大家可以多试几次, 挑一个好看点的, 我选中的是 Java 的语法(路径为:Packages/Java/Java.tmLanguage). 下面我们要监听文件 debug.log 的打开, 监听事件需要继承sublime_plugin.EventListener, QuickxDev 已经有了 QuickxListener, 查询 api 可以得知可以监听 on_load 事件来实现. on_load(view)Called when the file is finished loading. 实现的代码也非常的简单: 123456class QuickxListener(sublime_plugin.EventListener): ... def on_load(self, view): print(view.file_name()) if view.file_name().find(\"debug.log\") != -1: view.set_syntax_file(\"Packages/Java/Java.tmLanguage\") 让我们来张对比图: 二. 启动 Player 时打开 debug.log 文件因为种种原因, 我的 debug.log 文件没有在 Sublime 工程中, 所以每次想看日志都得在磁盘上找到这个文件, 拖进来, 略显繁琐. 因此萌生了运行 player 时顺带打开 debug.log 文件的需求. 实现起来也十分简单, 查询 api 得知: 123456open_file(file_name, &lt;flags&gt;) Opens the named file, and returns the corresponding view. If the file is already opened, it will be brought to the front. Note that as file loading is asynchronous, operations on the returned view won&apos;t be possible until its is_loading() method returns False. The optional flags parameter is a bitwise combination of: sublime.ENCODED_POSITION. Indicates the file_name should be searched for a :row or :row:col suffix sublime.TRANSIENT. Open the file as a preview only: it won&apos;t have a tab assigned it until modified file_name文件名不说, 后面的 flags 比较有意思: sublime.ENCODED_POSITION 选项可以再在打开文件的同时定位到某一行/某一列,非常有用. sublime.TRANSIENT 选项意思是只是预览它, 直到手动改变内容前不创建标签 . 下面我们找到启动 Player 的地方, 因为file_name是全路径, 所以我们需要找到工程的路径. 启动 player 时需要传入 -workdir 参数, 我们用这个就行. 实现同样十分简单: 1234567workdir = os.path.split(path)[0]args.append(\"-workdir\")args.append(workdir)...view.window().open_file(workdir+\"/debug.log\") 三. 错误堆栈/dump 的跳转当我查看debug.log 文件时, 经常会看到类似的语句: 123456781.lua 语法错误/Users/XXXX/scripts/app/MyApp.lua:117: &apos;=&apos; expected near &apos;a&apos;2. lua 运行时错误Cocos2d: [LUA ERROR] [string &quot;/Users/XXX/app/MyApp.lua&quot;]:118: attempt to index local &apos;a&apos; (a nil value)3. dump 信息Cocos2d: [0.0724] dump from: [string &quot;/Users/XXX/scripts/app/MyApp.lua&quot;]:117: in function &apos;ctor&apos; 他们之中都包含了文件名+行号信息, 联想到上面提到打开文件时可以跳转到某一行, 是不是隐隐感觉可以做些什么? 没错, 基于这个, 我们能够很容易的实现双击错误信息后跳转到错误位置. 1. 添加鼠标双击的响应这个比较简单, 我们需要在 QuickxDev 文件夹中创建 Default.sublime-mousemap 文件, 内容如下: 12345678[ &#123; &quot;button&quot;: &quot;button1&quot;, &quot;count&quot;: 2, &quot;press_command&quot;: &quot;drag_select&quot;, &quot;press_args&quot;: &#123;&quot;by&quot;: &quot;words&quot;&#125;, &quot;command&quot;: &quot;my_special_doubleclick&quot; &#125;] 这样在双击左键的时候会发送 my_special_doubleclick 事件, 我们在 quickx.py 中定义它: 1234567class MySpecialDoubleclickCommand(sublime_plugin.TextCommand): def run(self, edit): if not self.view.file_name(): return file_path, file_name = os.path.split(self.view.file_name()) if file_name == \"debug.log\": print(file_path, file_name) 我们双击 debug.log 文件的某一行就会收到MySpecialDoubleclickCommand命令, 进而打印出文件名, 路径! 2. 获取鼠标双击的所在行因为双击会选中某个单词, 所以我们可以使用sublime.View.sel()来获取当前选中的行: 123456for region in self.view.sel(): if not region.empty(): line = self.view.substr(self.view.line(region.a)) breakprint(\"line:\",line) 3. 计算跳转的文件和行号因为不会正则, 只能用一些土办法来计算文件和行号, 代码如下, 比较简单: 123456789101112131415161718192021222324252627282930313233def parseLuaError(line): key = &quot;.lua:&quot; posKeyStart = line.find(key) if posKeyStart == -1: return False,&quot;&quot; posKeyEnd = posKeyStart + len(key) filename = line[:posKeyStart].strip(&quot; \\t&quot;)+&quot;.lua&quot; fileline = line[posKeyEnd:line.find(&quot;:&quot;,posKeyEnd)] return True, filename+&quot;:&quot;+filelinedef parseCocosErrorAndDump(line): filename = &quot;&quot; fileline = 1 keyHead = &quot;[string \\&quot;&quot; posHeadStart = line.find(keyHead) if posHeadStart == -1: return False,&quot;&quot; posHeadEnd = posHeadStart + len(keyHead) key = &quot;.lua\\&quot;]:&quot; posKeyStart = line.find(key,posHeadStart) if posHeadStart == -1: return False,&quot;&quot; posKeyEnd = posKeyStart + len(key) filename = line[posHeadEnd:posKeyStart]+&quot;.lua&quot; fileline = line[posKeyEnd:line.find(&quot;:&quot;,posKeyEnd)] return True, filename+&quot;:&quot;+fileline 想想还是正则会比较简单, 以后有机会在改吧! 3. 跳转在上面的步骤中我们拿到了文件名和行号, 现在我们只需要跳转就OK了! 12345678910def parseLine(self, line): re,string = self.parseCocosErrorAndDump(line) if re: return re,string return self.parseLuaError(line)re,filename = self.parseLine(line)if re: self.view.window().open_file(filename,sublime.ENCODED_POSITION) 是啦,就是这么简单! 意外的发现这个功能对错误堆栈的跳转十分给力! 录了几个小 GIF, 感受一下吧! 演示一,演示二,演示三,演示四 其实这些功能实现起来都不难, 但是却能令自己感觉很爽很有成就感, 这恐怕就是做游戏所不能体会到的吧! 哈哈! (本文完)","categories":[],"tags":[{"name":"Quick-Cocos2d-x","slug":"Quick-Cocos2d-x","permalink":"http://blog.justbilt.com/tags/Quick-Cocos2d-x/"},{"name":"QuickxDev","slug":"QuickxDev","permalink":"http://blog.justbilt.com/tags/QuickxDev/"}]},{"title":"QuickxDev插件(一) 简介","slug":"quickxdev-1","date":"2015-03-16T01:49:20.000Z","updated":"2017-03-12T02:22:53.000Z","comments":true,"path":"2015/03/16/quickxdev-1/","link":"","permalink":"http://blog.justbilt.com/2015/03/16/quickxdev-1/","excerpt":"一. QuickxDevQuickxDev是一个极其好用的Sublime插件, 主要用来开发quick-cocos2d-x, 提供了特别实用的功能:","text":"一. QuickxDevQuickxDev是一个极其好用的Sublime插件, 主要用来开发quick-cocos2d-x, 提供了特别实用的功能: 1.Run With Player 非常实用的功能,这样就不用手动启动Player, 然后选中目录配置参数了. Player自带的Create Launcher一定程度上能够加速启动, 但是因为需要暂时离开开发环境, 所以还是不如这个方便. 这个功能必须在scripts目录上右键才有这个菜单选项. 2.Goto Definition 选中一个字段, ctrl+shift+g 或者右键选择 ‘Goto Definition’ ,就可以跳转到这个字段的定义, 是不是顿时有种IDE的感觉了呢? 如果这个字段多处都有定义, 就会弹出一个列表供你选择, 非常棒的功能. 这个功能必须选中这个字段才会生效. 3.Code Snippets 代码提示可能是我们对一个代码编辑器最基本的需求. 如果大家看过QuickDev的源码, 可以在QuickDev/quickxlib下发现代码分为三类 quick-cocos2d-x_api 这里是quick-cocos2d-x的提示文件,包含cocos2d-x的提示和framework的提示 snippets 这里是lua一些控制语句的提示,如:if else, while system_api 这里是lua的关键字和常用库的提示,如:io,math 简直业界良心的有木有!!! 4.Compile Scripts 这个功能可以将lua脚本用luajit编译成字节码,运行效率数倍提升.同时可以进行脚本加密, 需要在插件的设置中填写秘钥. 二. 安装QuickxDevsublime 安装插件十分容易 1.Package Control如果安装了Package Control, Cmd+Shift+P打开命令输入框, 输入 Install Package, 回车, 稍等片刻, 在弹出的框中输入QuickxDev回车后等待安装成功. 2.源码安装我们也可以直接从 github 上下载 QuickxDev 的源码到Sublime的插件目录, Subilme会自动识别, 十分方便. 其实我的建议多数插件从Package Control安装, 方便, 不需要自己维护, 需要修改的插件从源码安装, 这样可以避免Sublime自动升级插件带来的问题, 而且Sublime3从 Package Control 安装的插件是二进制的,根本无法修改查看. 3.插件设置 按照上图打开QuickXDev.sublime-settings:123456789101112&#123; // quick_cocos2dx_root &quot;quick_cocos2dx_root&quot;: &quot;/Users/.../quick-cocos2d-x-2.2.5&quot;, // you name and email &quot;author&quot;: &quot;wangbilt&lt;wangbilt@gmail.com&gt;&quot;, // lua template attributes &quot;date_format&quot;: &quot;%Y-%m-%d %H:%M:%S&quot;, // i.e. peter or peter (peter@gmail.com) &quot;author&quot;: &quot;justbilt&quot;, // compile_scripts encrypt key,no encrypt when empty &quot;compile_scripts_key&quot;: &quot;&quot;&#125; 这里必须要配置就是quick_cocos2dx_root,是你quickx的绝对路径. 三. 定制功能QuickxDev 已经十分牛逼了, 但还是无法满足每一个人需求, 这时候就需要我们自己去定制一些功能了, 我计划添加以下功能. 1.快捷键启动Player虽然通过右键菜单在Sublime中启动Player已经很方便的了, 但还是感觉欠一些, 必须需要 手离开工作区到指定位置-&gt;右键-&gt;找到菜单项-&gt;选中, 这个操作的时间消耗至少是快捷键启动的5倍以上! 这个功能最新的QuickxDev已经支持了,十分赞! 2.对debug.log文件的处理1).debug.log现在是没有配色的,看着不是很方便.2).启动player的时候自动打开debug.log文件.3).堆栈的跳转,dump的跳转. 这几点现在已经完全实现, 等整理好后会向官方提交PR. 3.生成一个Java文件的函数签名平时我们要生成一个Java文件的函数签名比较麻烦,要在命令行中使用javac,javap什么的,比较麻烦,不如通过插件来实现,同时还有生成java native函数的C++实现. 四.后记上面说的这几个功能我都会单独写文章来讲具体的实现. 但在这之前可能是需要大家了解 Sublime 插件开发的一些知识, 因此我会同时会开始写 Sublime 插件开发的系列文章 . (本文完)","categories":[],"tags":[{"name":"Quick-Cocos2d-x","slug":"Quick-Cocos2d-x","permalink":"http://blog.justbilt.com/tags/Quick-Cocos2d-x/"},{"name":"QuickxDev","slug":"QuickxDev","permalink":"http://blog.justbilt.com/tags/QuickxDev/"}]},{"title":"搭建自己的 wiki 之 jingo 篇","slug":"jingo","date":"2015-01-29T14:13:47.000Z","updated":"2016-02-14T05:21:11.000Z","comments":true,"path":"2015/01/29/jingo/","link":"","permalink":"http://blog.justbilt.com/2015/01/29/jingo/","excerpt":"一. Why jingo ?一直想搭wiki好久了,这期间试了好多个wiki项目,如:dokuwiki, simiki, torchpad, 也慢慢地弄明白了自己真正的需求是什么.","text":"一. Why jingo ?一直想搭wiki好久了,这期间试了好多个wiki项目,如:dokuwiki, simiki, torchpad, 也慢慢地弄明白了自己真正的需求是什么. git + markdown + (Python or nodejs) 来说明下为什么: git,wiki特别重要的一点就是历史版本,方便回滚,这个用git来简直天作之合. markdown,也不必多说, 当时从离开Wordpress就是因为厌倦了文章排版. Python or nodejs, 根据我的经验,安装方便,配置简单,坑少. jingo就符合这些要求, 同时还支持在线编辑的功能,使得你可以随手记,随时记录wiki. 但是jingo没有提供静态界面的生成,也就意味着无法托管到github上. 二. 安装 jingo文档说的是npm install jingo, 不过我推荐加上-g参数,安装到全局,不然会找不到jingo命令, 同时要考虑是否加sudo. 1npm install jingo -g 安装好之后随便找一个目录: 1jingo -s &gt; config.yaml 生成默认配置, 同时由于jingo需要一个git仓库,所以我们需要在当前目录: 1git init 打开生成的config.yaml,找到repository改为.,使用当前目录作为仓库: 1repository: &quot;.&quot; 保存,然后就可以启动了: 1jingo -c ./config.yaml 三. 登录启动之后是不可以修改的, 必须先登录,点击右上角You&#39;re not logged in, 会切换到登录页面: 上面显示不全是什么情况吗? 而且不能注册? 让我们回到终端,Ctrl-c停掉刚才启动的的jingo,继续打开config.yaml看authentication组的配置: 1234567891011121314authentication: google: enabled: true clientId: replace me with the real value clientSecret: replace me with the real value github: enabled: false clientId: replace me with the real value clientSecret: replace me with the real value alone: enabled: false username: &quot;&quot; passwordHash: &quot;&quot; email: &quot;&quot; 可以看到默认只开启了google的授权登录, 让我们改为用户名密码登录:12345alone: enabled: true username: &quot;XXXX&quot; passwordHash: &quot;XXXXX&quot; email: &quot;xxxx@gmail.com&quot; 需要注意下这个passwordHash,这里不是填密码,而是密码的hash值,jingo提供了生成密码hash的功能,非常方便,终端中键入jingo -# &quot;你的密码&quot;: 12jingo -# &quot;xxxx&quot;4ad583af22c2e7d40c1c916b2920299155a46464 类似于4ad583af22c2e7d40c1c916b2920299155a46464这个就是你的passwordHash.同时可以关掉google的授权登录,google: enabled: false. 完成后然我们再次启动jingo -c ./config.yaml, 点击登录就可看到这个界面了: 登录之后的操作比较简单,就不做特殊说明了.右上部位有一个蓝底白字Tools, 鼠标放上去之后可以显示工具栏, 啥意思也猜的出来. 四. 同步到 github/oschinajingo的一个特色是修改wiki后会自动帮你push到远端仓库, 十分方便. 首先我们要添加remote,在github上或者其他托管网站建立一个repository,复制url,然后在wiki的git目录: 1git remote add origin git@xxxx.git 这里要注意一点,一定要使用ssh协议来add remote/clone, 可以避免每次pull/push都需要输入用户名密码, 那样会导致在线编辑的时候网页会卡死. 开启自动push只需要修改application-&gt;remote字段.这里有一个非常坑的地方,我一直以为这里要填远端的url,结果会一直报错: 1Error: Remote does not exist (git@xxxx.git) 跟踪js代码才发现,这里要填的是remote的name,如origin之类的,配置如下: 123application: remote: &quot;origin&quot; pushInterval: 30 pushInterval是push的间隔时间,单位为秒,这个有需求的话可以自己改. 上一张oshina commit记录的截图,这些都是自动提交的哦. 四. 解决中国特色问题测试了一下,发现在不翻墙的情况下, 本地访问都会加载好久, 用chrom的分析工具: 可以看到,因为国情的原因,有两个条目加载失败了,让我来解决掉它,打开jingo/views/layout.jade: 第9行:1link(rel=&quot;stylesheet&quot;, href=&quot;//fonts.googleapis.com/css?family=Ubuntu|Ubuntu+Condensed&quot;) 删除掉. 第61行1script(src=&quot;http://ajax.googleapis.com/ajax/libs/jquery/1/jquery.min.js&quot;) 改为: 1script(src=&quot;http://lib.sinaapp.com/js/jquery/1.8/jquery.min.js&quot;) 五. 总结jingo 总体来说还是很不错的, 在线编辑功能十分给力, 配置起来比较简单, 也蛮漂亮的. 但是有一些设定也是比较二的, 有下面几点: 不能直接修改目录中的文件, 只能在线编辑 经常出现此网页包含重定向循环 界面跳转有逻辑问题,经常出现url拼接错误. 不能自动生成侧边栏, 得自己手动改md文件. 综上, jingo 有能力的同学自己改改还何以用, 挂在自己服务器也是可以的, 要不只能用来玩玩了. (本文完)","categories":[],"tags":[]},{"title":"svn commit 守则","slug":"svn","date":"2014-12-14T16:58:31.000Z","updated":"2017-03-12T01:22:38.000Z","comments":true,"path":"2014/12/15/svn/","link":"","permalink":"http://blog.justbilt.com/2014/12/15/svn/","excerpt":"晚上实在是睡不着, 起来把这个坑填了. 其实想写这篇文章好久了, 因为一些不好的习惯吃了一些亏, 加上团队中发现的一些问题, 记下来, 时刻提醒下自己.","text":"晚上实在是睡不着, 起来把这个坑填了. 其实想写这篇文章好久了, 因为一些不好的习惯吃了一些亏, 加上团队中发现的一些问题, 记下来, 时刻提醒下自己. 1. 提交日志必要性:这个我想应该不需要强调吧, 最基本的东西, 一般稍微严格些的团队都会有硬性的要求. 这是一个利人利己的工作, 想知道自己几周前干了什么, 看log是最佳的方式了. 准确性:提交信息应该是准确的描述你这次提交干了些什么, 其他的前戏和废话则不要有. 如果有需要强调的地方, 还应该备注出来. 而且一个团队应该有约定的格式, 比如 fix issue xxx, add xxx,这样会在后期日志定位时非常的方便. 2. 一次提交只做一件事这样子是为了方便以后revert 和 merge 操作, 举个栗子,比如你一次提交了两个功能, 但是其中的一个功能可能被砍掉或者会引发一个非常严重的bug, 改动的文件非常多, 必须使用revert操作, 然后就傻逼了, 另外一个功能也被回滚掉了.再比如, 你需要merge同事的代码, 但他的一个功能目前你不需要或者合并后会出现问题, 这时候肯定会在内心问候对方的. 因此, 需要我们掌握的一个技巧就是分多次提交工作区的更改, 是的, 我见过一个同事每次必须一次性吧所有更改都提交完, 然后在日志里写: 1.xxx 2.xxx 3.xxx, 何必呢! 分多次提交可能会导致某一个版本无法正常运行, 因此一定要仔细检查. 3. review 你的更改这点中的十分重要, 但也是最容易忽略的一些. 一定要在提交前挨个对比文件的每一处更改, 这个可能会花费你的一些时间, 但相比与带来的好处这的不值一提. 在这一步你会发现一些隐藏的bug. 4. 避免无意义的提交这是什么意思呢, 就是某些更改可能是没有意义的, 包扩一些空格, 换行, 测试代码. 这些都应该在提交前的review中删除掉. 举个栗子,比如工程的config文件中DEBUG变量,默认值为1,你可能在这次提交时改成2, 那次提交时改成3, 最后又改回成1, 这样莫名的config文件在svn上就莫名多了3次版本,而且毫无意义, 这种情况下就不应该提交这个文件. 5. 确保你的程序能够运行你可能会说这当然了, 但是你在提交前有运行过你的程序吗? review之后呢? 我想没有什么比更新下来的代码不能运行更蛋疼的事情了. 而且真的有的人在没有做完一个功能运行报错的情况下就提交代码. 6. clear 你的工作区对于提交完还存在于你的工作区更改列表的文件, 你的选择有ignore/revert/delete, 总有一个适合你. 我曾经见到一个同事提交完后svn中还充斥着数十个更改文件, 分散在各个目录中. 导致每次提交都得”精挑细选”下. 一个干净的工作区绝对是一天好心情的开始!!! 因此, 一个最佳的commit流程应该是: test –&gt;&gt; review –&gt;&gt; test again –&gt;&gt; commit –&gt;&gt; clear 我希望被我提到的同事不要生气或愤怒, 因为我坚信一句话: 和聪明的人一起共事最大的好处是不用顾忌对方的自尊心!","categories":[],"tags":[{"name":"游戏心得","slug":"游戏心得","permalink":"http://blog.justbilt.com/tags/游戏心得/"}]},{"title":"Quick-Cocos2d-x CCGraySprite 消失坑 (已更新解决方案)","slug":"quickx-CCGraySprite-invisible","date":"2014-10-29T05:01:33.000Z","updated":"2017-04-23T04:39:17.000Z","comments":true,"path":"2014/10/29/quickx-CCGraySprite-invisible/","link":"","permalink":"http://blog.justbilt.com/2014/10/29/quickx-CCGraySprite-invisible/","excerpt":"前几天团队中小A遇到了一个非常诡异的问题, 特此记录一下.","text":"前几天团队中小A遇到了一个非常诡异的问题, 特此记录一下. 大家看上图中的一个灰色的精灵, 这个是由CCGraySprite创建出来的, 它被添加了到了CCNode中, 当第一次进入界面是正常, 退出界面, 再次进入改界面就看不见了, 但是只要一移动这个界面就又可以看见了. 这个问题十分的诡异, 出现的条件十分苛刻, 但是复现率是100%, 就比较好解决了. 我猜测有可能是一下几个原因: 第一个可能, 精灵的问题的被释放掉了, 但是这个无法解释 只要一移动这个界面就又可以看见了. 第二个可能, lua这边的内存被释放掉了,同样无法解释上边的现象 第三个可能, CCGraySprite的内部实现又问题, 这个比较好证明, 换一种变灰的实现就可以验证了. 于是我们改用zrong贡献的滤镜来实现变灰的功能: 1234-- 创建灰度精灵_spr = CCFilteredSpriteWithOne:createWithTexture(_texture, _rect)local filters = filter.newFilter(\"GRAY\")_spr:setFilter(filters) 验证结果果然是CCGraySprite的问题,用CCFilteredSprite替换可以解决. 因为比较着急, 虽然最后解决了, 但没有具体去分析原因, 希望有知道原因的同学可以告知一下. Update 12月20日:今天又遇到了这个bug, 看来得好好研究下了! Google了一下, 看来不止我一个人遇到了这个问题, 谁用过CCGraySprite，移除再新建就不会显示了, 虽然没有解决, 但是知道怎么重现了. 谁用过CCGraySprite，移除再新建就不会显示了，不知道大家用什么灰态精灵，求解. 这个确实容易重现, 测试代码: 1234567891011121314151617function MainScene:ctor() ui.newMenu(&#123;ui.newTTFLabelMenuItem(&#123;text = \"删除&amp;创建\", listener = handler(self, self.init)&#125;)&#125;) :pos(display.cx, display.cy - 100) :addTo(self) self:init()endfunction MainScene:init() if self.spr then self.spr:removeFromParent() end self.spr = CCNodeExtend.extend(CCGraySprite:create(\"start.png\")) :pos(display.cx, display.cy) :addTo(self)end 我们新建一个CCGraySprite, 点击按钮后删除再重新创建, 就真的看不见了! 起初我们猜测是因为删除后立刻创建的问题, 在加了定时器后依然如此, 排除! 然后我们去看CCGraySprite的实现, 既然第二次创建会出现问题, 那么很可能是init的实现有问题, CCGraySprite 的实现最终都会调用 initWithTexture 1234567891011121314151617CCGLProgram* pProgram = CCShaderCache::sharedShaderCache()-&gt;programForKey(kCCShader_PositionTextureGray);setShaderProgram(pProgram);CHECK_GL_ERROR_DEBUG();//为渲染的顶点流增加属性（顶点属性： position, texCoord, color, normal 等）getShaderProgram()-&gt;addAttribute(kCCAttributeNamePosition, kCCVertexAttrib_Position);getShaderProgram()-&gt;addAttribute(kCCAttributeNameColor, kCCVertexAttrib_Color);getShaderProgram()-&gt;addAttribute(kCCAttributeNameTexCoord, kCCVertexAttrib_TexCoords);CHECK_GL_ERROR_DEBUG();//链接生成shaderProgram，初始化完毕后调用生成才能够在程序中使用 getShaderProgram()-&gt;link();CHECK_GL_ERROR_DEBUG();//更新2dx自带的几个uniform 值（使之与shader中的变量值同步）getShaderProgram()-&gt;updateUniforms();CHECK_GL_ERROR_DEBUG(); 因为在CCShaderCache::loadDefaultShader中看到过一样的代码, 就怀疑是因为多次初始化的原因. 经过排查, 将 1getShaderProgram()-&gt;link(); 这行代码注释掉之后成功! 附图: (EOF)","categories":[],"tags":[{"name":"Quick-Cocos2d-x","slug":"Quick-Cocos2d-x","permalink":"http://blog.justbilt.com/tags/Quick-Cocos2d-x/"}]},{"title":"我花在互联网服务上的钱","slug":"spend-money-on-network","date":"2014-10-17T07:31:31.000Z","updated":"2017-03-12T01:22:38.000Z","comments":true,"path":"2014/10/17/spend-money-on-network/","link":"","permalink":"http://blog.justbilt.com/2014/10/17/spend-money-on-network/","excerpt":"瞎逛的时候看到了这篇文章, 一个程序员一年会在互联网产品上花多少钱, 作为离互联网最近的一批人, 作为一群有钱又巨抠无比的人, 我们到底回为什么(服务)付费呢?","text":"瞎逛的时候看到了这篇文章, 一个程序员一年会在互联网产品上花多少钱, 作为离互联网最近的一批人, 作为一群有钱又巨抠无比的人, 我们到底回为什么(服务)付费呢? 这里说说我的情况, 我是一个不会随便为服务花钱的, 我的零花钱基本全部花费在了购买硬件和外设上, 所以能让我付费的服务已经很厉害了! 曲径(翻墙代理)用官网上的一句话就是:”生命短暂，即买即用”, 这是我买了最不后悔的服务了, 最省心的代理(没有之一). 费用: 130 元/季 * 4 = 520 万网域名服务(域名)本博客 (http://post.justbilt.com/) 和另外一个域名的费用. 我的博客是托管在github上的, 所以没有花钱. 费用: 2个 * 一年 55 元 = 110 迅雷白金会员(下载加速)作为一个电影爱好者(不专指岛国), 迅雷会员怎么能少? 费用: 年费149元（原价180） 共计: 520 + 110 + 149 = 779 RMB Feedly Pro (RSS)作为一个重度的rss患者, Feedly我现在已经离不开了, 尤其是在购买了曲径之后. 现在来说免费功能足够使用, 考虑付费. 费用: $45 yearly = 276 新浪微博会员 (装B)这个准备弃坑了, 感觉没有什么实际作用, 还不如买个迅雷绿钻或者优酷会员什么的呢! 费用: 108 元 这些服务加起来一年也就一千多块, 平均到每一天也就几块钱, 与它们所带来的价值来说, 还是十分划算的!","categories":[],"tags":[{"name":"生活","slug":"生活","permalink":"http://blog.justbilt.com/tags/生活/"}]},{"title":"Quick-Cocos2d-x addTo导致tag无效坑","slug":"quickx-addto","date":"2014-09-11T11:59:57.000Z","updated":"2017-04-23T04:39:03.000Z","comments":true,"path":"2014/09/11/quickx-addto/","link":"","permalink":"http://blog.justbilt.com/2014/09/11/quickx-addto/","excerpt":"前几天遇到了一个十分诡异的bug,分享出来大家看看,代码是这个样子的: 12345local a = display.newNode()local b = display.newNode()b:setTag(10)b:addTo(a)print(b:getTag())","text":"前几天遇到了一个十分诡异的bug,分享出来大家看看,代码是这个样子的: 12345local a = display.newNode()local b = display.newNode()b:setTag(10)b:addTo(a)print(b:getTag()) 这个程序正常的结果应该是10,但实际却是0.这个问题十分诡异,如果是-1的话还说的过去,但0是个什么情况嘛? 仔细想想,大家应该很快能把异常的位置定位到b:addTo(a)这行中,让我们看下下addTo函数的实现: 1234function CCNodeExtend:addTo(target, zorder, tag) target:addChild(self, zorder or 0, tag or 0) return selfend 不难看出,当你调用addTo函数不传入zorder, tag时会自动帮你设置为0! 知道了原因,解决起来十分容易: 使用addChild函数代替addTo 在addTo调用时传入tag 在addTo调用之后调用setTag函数 是不是很简单呢? 这主要是测试代码比较简单的原因,我当时的 setTag 和 addTo 都没有在一个文件里!!!找死我了!! 平复下心情,我们来想想造成这个bug的原因: 首先, shortcodes系列的函数设计的初衷可能是为了连续的调用函数,不建议分开单独使用! 但是我觉得最主要的原因是addTo函数的实现是不够健壮的,如果参考C++ addChild函数的话应该是这样子: 1234function CCNodeExtend:addTo(target, zorder, tag) target:addChild(self, zorder or self:getZOrder(), tag or self:getTag()) return selfend 以上","categories":[],"tags":[{"name":"Quick-Cocos2d-x","slug":"Quick-Cocos2d-x","permalink":"http://blog.justbilt.com/tags/Quick-Cocos2d-x/"}]},{"title":"在mac上搭建python环境","slug":"setup_python_on_mac","date":"2014-07-01T22:12:54.000Z","updated":"2017-03-12T01:22:38.000Z","comments":true,"path":"2014/07/02/setup_python_on_mac/","link":"","permalink":"http://blog.justbilt.com/2014/07/02/setup_python_on_mac/","excerpt":"这两天重新搞了下python的环境，发现好多地方还是容易忘记，因此有了这篇文章，以后方便查看。","text":"这两天重新搞了下python的环境，发现好多地方还是容易忘记，因此有了这篇文章，以后方便查看。 一. 安装python 其实mac自带的python完全够用, 这一步可以跳过. – by Bin mac系统自带了一个python的执行执行环境，但为了获取最新版的python，我们需要重新安装python。这里有两种方案安装： 1.homebrew 1brew install python 这个方案比较简单,如果出错的话可以给前面加sudo试试,这个安装的python可能不是最新版. 2.从官网下载安装大家可以从https://www.python.org/download下载安装最新版的python,安装比较无脑,一路按下去就OK,缺点是以后升级,卸载都得自己维护. 这两个方法安装的python的位置是不一样的,大家可以用: 1which python 来查看安装位置.安装完成后在终端中键入python来验证安装是否成功. 二. 安装pip这里好多文章中说要先安装easy_install, 其实是不用的. 1.我们先获取pip安装脚本:1wget https://bootstrap.pypa.io/get-pip.py 如果没有安装wget可以去这里将所有内容复制下来,新建get-pip.py文件,将内容拷进去就OK了. 2.安装pip1sudo python get-pip.py 用python执行刚才获取的脚本,这里sudo可以选择使用,若遇到类似这个报错则必须加sudo:123456789Exception:Traceback (most recent call last):...OSError: [Errno 13] Permission denied: &apos;XXX/pip-0.7.2-py2.7.egg/EGG-INFO/dependency_links.txt&apos;Storing debug log for failure in /Users/bilt/.pip/pip.log 安装成功后可以在终端中键入pip来检测,如果不行重启终端后尝试. 3.修改pip源在天朝,由于功夫网的原因,使用pip安装一些模块会特别慢甚至无法下载,因此我们需要修改pip的源到国内的一些镜像地址,特别感谢国内无私奉献的组织~ 首先进入HOME路径: 1cd ~ 创建.pip目录: 1mkdir .pip 创建pip.conf文件:1touch pip.conf 大家可以用自己喜欢的编辑器打开pip.conf文件,我现在使用的时v2ex的源,所以添加:12[global]index-url = http://pypi.v2ex.com/simple 大家可以把index-url的值设置为自己实际源的地址. 至此pip源修改成功,以后使用pip安装模块时都会从这个源去下载安装,大家可以自行测试一下. 三. 其他模块安装1.Pillow/PIL想用python处理图片,自然少不了PIL这个模块, 由于PIL长期没有更新了, 所以有了Pillow这个模块, 依赖于PIL, 新版的pip安装后会自带Pillow, 但是好像没有zlib模块, 所以会报错: 123456789101112File &quot;/Library/Python/2.7/site-packages/PIL/Image.py&quot;, line 1105, in paste im.load() File &quot;/Library/Python/2.7/site-packages/PIL/ImageFile.py&quot;, line 190, in load d = Image._getdecoder(self.mode, d, a, self.decoderconfig) File &quot;/Library/Python/2.7/site-packages/PIL/Image.py&quot;, line 389, in _getdecoder raise IOError(&quot;decoder %s not available&quot; % decoder_name)IOError: decoder zip not available 因此我们需要手动重新安装:1sudo pip install -U Pillow (完)","categories":[],"tags":[{"name":"python","slug":"python","permalink":"http://blog.justbilt.com/tags/python/"}]},{"title":"在Player中保存CCRenderTexture到文件","slug":"rtt_savetofile_in_player","date":"2014-06-10T09:42:36.000Z","updated":"2017-04-23T04:39:17.000Z","comments":true,"path":"2014/06/10/rtt_savetofile_in_player/","link":"","permalink":"http://blog.justbilt.com/2014/06/10/rtt_savetofile_in_player/","excerpt":"在 player 中调用 CCRenderTexture 的 saveToFile 函数会导致player崩溃,crash log 如下:","text":"在 player 中调用 CCRenderTexture 的 saveToFile 函数会导致player崩溃,crash log 如下: 从日志中我们可以找到这句话: Assertion failed: (false), function saveToFile, file /Users/bilt/Documents/quick-cocos2d-x/lib/cocos2d-x/cocos2dx/platform/mac/CCImage.mm, line 921. 说的很清楚,CCImage.mm 的 921 行触发了断言失败,嗯,一定是我的用法不太对. 我们打开CCImage.mm看到下面这段代码: 12345bool CCImage::saveToFile(const char *pszFilePath, bool bIsToRGB)&#123; assert(false); return false;&#125; 喂,不带这样子的,分明是没有实现嘛. 好吧,我们试着把ios/CCImage.mm中的实现搬过来试试,这里我就不贴大段的代码了,拷过来编译时会出错(预料之中),我OC学的不好大家不要见怪,错误如下: 1234567CGImageRef iref = CGImageCreate(m_nWidth, m_nHeight, bitsPerComponent, bitsPerPixel, bytesPerRow, colorSpaceRef, bitmapInfo, provider, NULL, false, kCGRenderingIntentDefault);UIImage* image = [[UIImage alloc] initWithCGImage:iref]; 这里通过CGImageRef 创建一个 UIImage, 但是 Mac os 上是没有 UIImage 的,首先想到的是可以寻找一个接口替换掉它,短暂Google后放弃. 后来想着能否直接将CGImageRef保存为文件,还真让我找到了,见stackoverflow的这个(戳我)问题:1234567891011void CGImageWriteToFile(CGImageRef image, NSString *path) &#123; CFURLRef url = (CFURLRef)[NSURL fileURLWithPath:path]; CGImageDestinationRef destination = CGImageDestinationCreateWithURL(url, kUTTypePNG, 1, NULL); CGImageDestinationAddImage(destination, image, nil); if (!CGImageDestinationFinalize(destination)) &#123; NSLog(@\"Failed to write image to %@\", path); &#125; CFRelease(destination);&#125; 大家可以看到关键的函数是CGImageDestinationCreateWithURL ,大概查了一下这个函数支持的格式还真不少,如下: 1234567891011extern const CFStringRef kUTTypeImage __OSX_AVAILABLE_STARTING(__MAC_10_4,__IPHONE_3_0);extern const CFStringRef kUTTypeJPEG __OSX_AVAILABLE_STARTING(__MAC_10_4,__IPHONE_3_0);extern const CFStringRef kUTTypeJPEG2000 __OSX_AVAILABLE_STARTING(__MAC_10_4,__IPHONE_3_0);extern const CFStringRef kUTTypeTIFF __OSX_AVAILABLE_STARTING(__MAC_10_4,__IPHONE_3_0);extern const CFStringRef kUTTypePICT __OSX_AVAILABLE_STARTING(__MAC_10_4,__IPHONE_3_0);extern const CFStringRef kUTTypeGIF __OSX_AVAILABLE_STARTING(__MAC_10_4,__IPHONE_3_0);extern const CFStringRef kUTTypePNG __OSX_AVAILABLE_STARTING(__MAC_10_4,__IPHONE_3_0);extern const CFStringRef kUTTypeQuickTimeImage __OSX_AVAILABLE_STARTING(__MAC_10_4,__IPHONE_3_0);extern const CFStringRef kUTTypeAppleICNS __OSX_AVAILABLE_STARTING(__MAC_10_4,__IPHONE_3_0);extern const CFStringRef kUTTypeBMP __OSX_AVAILABLE_STARTING(__MAC_10_4,__IPHONE_3_0);extern const CFStringRef kUTTypeICO __OSX_AVAILABLE_STARTING(__MAC_10_4,__IPHONE_3_0); 这下可爽了,保存png和jpg都可以,我对这个函数进行了微小的改造,将kUTTypePNG作为参数传入,一番修改之后saveToFile函数的关键代码变成了这个样子:123456789101112131415CGDataProviderRef provider = CGDataProviderCreateWithData(NULL, pixels, myDataLength, NULL);CGColorSpaceRef colorSpaceRef = CGColorSpaceCreateDeviceRGB();CGImageRef iref = CGImageCreate(m_nWidth, m_nHeight, bitsPerComponent, bitsPerPixel, bytesPerRow, colorSpaceRef, bitmapInfo, provider, NULL, false, kCGRenderingIntentDefault);if (saveToPNG)&#123; CGImageWriteToFile(iref,[NSString stringWithUTF8String:pszFilePath], kUTTypePNG);&#125;else&#123; CGImageWriteToFile(iref,[NSString stringWithUTF8String:pszFilePath], kUTTypeJPEG);&#125; 重新编译运行player,运行samples/cocos2dx_luatest,找到RenderTextureTest 点击 SaveImage ,这下不会崩溃了,在例题的根目录可以找到保存的图片. 这个更改已经提交pr并且已经merge到了develop分支,详情可以戳这里. 这里说下我的感悟: Quick-Cocos2d-x 的 player 真的是个特别棒的东西,这里不得不佩服@廖大 ,绝对是提高效率的利器, 但是我们经常会看到player的一些行为和真机不太一样, 这时不能放弃player, player的本质就是cocos2d-x的Mac版, 根据这个去找寻解决方案会非常的方便. 这个问题是发生在quick 2.2.2 中的, 因为quick的最新版是2.2.3, 所以我会先去那里找看有没有解决这个问题, 发现没有, 然后我会去cocos2d-x 的2.2.3找解决方案,因为本是一家东西, 发现还是没有没有, 接下来我发现cocos2d-x 3.x 版本解决了这个问题, 3.x完全用C++ 实现了保存png,jpg的功能, 在各个平台都管用, 这个非常赞, 但是迁移过来成本太高, 会有一堆依赖改变的地方, 所以不到迫不得已是不会自己实现的. 这个问题好像遇到的人特别少,唯一在官网有一个人提问(看这里),但是没有回答,看版本是2.1.4,这应该算是历史遗留问题了. (全文完)","categories":[],"tags":[{"name":"Quick-Cocos2d-x","slug":"Quick-Cocos2d-x","permalink":"http://blog.justbilt.com/tags/Quick-Cocos2d-x/"},{"name":"CCRenderTexture","slug":"CCRenderTexture","permalink":"http://blog.justbilt.com/tags/CCRenderTexture/"}]},{"title":"盘点 Quick-cocos2d-x Player 粗线的问题","slug":"some_problem_of_player","date":"2014-05-17T04:04:10.000Z","updated":"2017-04-23T04:40:29.000Z","comments":true,"path":"2014/05/17/some_problem_of_player/","link":"","permalink":"http://blog.justbilt.com/2014/05/17/some_problem_of_player/","excerpt":"一. Mac版日志显示不完整不知道大家有没有遇到这样的问题,在输出大量log的时候,Player的日志窗口有时会只输出一部分内容,后面补上..., 而且之后的log就再也无法输出了, 对后面的调试造成很大的不便.","text":"一. Mac版日志显示不完整不知道大家有没有遇到这样的问题,在输出大量log的时候,Player的日志窗口有时会只输出一部分内容,后面补上..., 而且之后的log就再也无法输出了, 对后面的调试造成很大的不便. 打开Player的工程,搜索...,可以定位到 ConsoleWindowController.m 的 trace 函数,让我们看下这个代码片段: 123456if (traceCount &gt;= SKIP_LINES_COUNT &amp;&amp; [msg length] &gt; MAX_LINE_LEN)&#123; msg = [NSString stringWithFormat:@\"%@ ...\", [msg substringToIndex:MAX_LINE_LEN - 4]];&#125;traceCount++; 大家把这几行注释掉重新编译运行即可解决这个问题. 二. Mac版 CCClippingNode 无效又到了做新手引导的时候了,之前发过两篇关于新手引导的文章: cocos2d-x-游戏实战经验三-多分辨率的自适应(上)cocos2d-x-游戏实战经验三-多分辨率的自适应(下) 看过的朋友应该知道,想实现屏幕中某一部分高亮需要用到CCClipingNde, 这是一个非常实用的功能类.这设置stencil之后会抠空stencil的内容 但是当我在quick-cococs2d-x中用player中运行CCClipingNde时,却发现没有任何的变化. 网上搜索 CCClippingNode无效 会找到几篇文章,都一直的指向OpenGL初始化的地方: 试着用xocde启动项目工程,意外的发现CCClipingNde在ios的模拟器是好使的,这样看来问题是出在了Player的身上,打开quick的player工程,不难发现player实质上就是在cocos2d-x的Mac版的基础上做成的,这样的话造成这个问题的原因不外乎有两个: cocos2d-x 的Mac不支持 CCClipingNde quick-cocos2d-x 的Playe 的openGL初始化有问题 运行官方2.2.1版cocos2d-x的mac项目,发现CCClippingNode是没有问题的,正常运行. 在对比两个项目的AppController.mm发现了不一致的地方: 123456789101112// playerglView = [[EAGLView alloc] initWithFrame:rect];//coco2d-x for macNSOpenGLPixelFormatAttribute attributes[] = &#123; NSOpenGLPFADoubleBuffer, NSOpenGLPFADepthSize, 24, NSOpenGLPFAStencilSize, 8, 0&#125;;NSOpenGLPixelFormat *pixelFormat = [[[NSOpenGLPixelFormat alloc] initWithAttributes:attributes] autorelease];glView = [[EAGLView alloc] initWithFrame:rect pixelFormat:pixelFormat]; 用官方的实现替换Player的实现,编译运行,一切正常,下面上张图! 未完暂时只遇到了这两个问题,都比较容易解决,以后遇到问题还会在这里补充!","categories":[],"tags":[{"name":"Quick-Cocos2d-x","slug":"Quick-Cocos2d-x","permalink":"http://blog.justbilt.com/tags/Quick-Cocos2d-x/"}]},{"title":"我的2013","slug":"my-2013","date":"2014-05-01T02:44:14.000Z","updated":"2017-03-12T01:22:38.000Z","comments":true,"path":"2014/05/01/my-2013/","link":"","permalink":"http://blog.justbilt.com/2014/05/01/my-2013/","excerpt":"是的,你没有看错,今天是2014年5月1日,我却在写2013的总结,这篇文章无论怎么讲都是有些姗姗来迟的.其实早在2月份就想写了,只是一直苦于没有时间,现在却是有了~","text":"是的,你没有看错,今天是2014年5月1日,我却在写2013的总结,这篇文章无论怎么讲都是有些姗姗来迟的.其实早在2月份就想写了,只是一直苦于没有时间,现在却是有了~ 工作A2013年5月,我离开了呆了快两年(2011.9~2013.5)的公司A,A是我的第一家公司,是一个相对较大的公司,对A我有着很深的感情,在这里我从一个刚学会写代码的新手慢慢的成长了起来,有几个特别好的朋友. 至于离开A的原因,在一个地方呆久了就会想着出去走走,虽然外面不一定好. 上一张照片,左一是我,依次是宏ppt,超ppt,还有照相的菲ppt,找到一个一起2的朋友已非易事,我找到了一群. 技术上呢巩固了学校里学的c++,跟着老大学习了一些架构方面的东西,做了一个多人联网的坦克游戏,顺带学习了MFC,做了个地图编辑器.然后跟朋友学会了cocos2d-x,一起做了一两个游戏. B下面我到了公司B,B是一个小公司,之前主要做美术/动画外包,一共不到10个人,程序呢只有我一个人,哈哈,这简直是虎入羊群啊,在这里我获得了极大的自由和极大的权利,程序上的什么东西能做与否都是我一句话,我很享受这种感觉~ 在B,公司氛围极好,我真的感觉是为自己做游戏,为了一个功能经常大家加班至深夜,大家为了一个系统会吵得面红耳赤,然后下楼吃饭~ 另一面,B的缺点,决策失误,没有运营~ 这直接导致的后果就是产品出来了上不去,在B我们不到3个月就做了一个类似&lt;保卫萝卜&gt;的游戏,但是在发了移动基地后就沦入一个无线修改,无限增删功能,无限立项的循环中~ 在B的后面几个月是十分轻松的,大家看到的blog.justbilt.com的大部分文章都是在这端时间写的,在B的这段时间中,我对2dx有了更加深入的了解,一些之前没有关注的问题也有了研究~写博客真的是一件极好的事情,通过博客认识了好多朋友. 种种原因,决定在2013年元旦离开B,有想学习更高技术的原因,也有心凉了的原因~ 如果说有一张图能代表我在B的这段经历的话,那么就是这张了,感谢你们伴我走过这些天~ 技术上呢2dx运用更加熟练,全面,全平台打包,jni,ios混编,ios发布,多分辨率适应~工具制作上我放弃了MFC,学习了下C#,用C#做一些小工具比MFC方便好多,再后来发现用Python写小工具更Easy,就自学了Python,现在已经能用来写小工具了.博客呢放弃了wordpress,投奔了hexo,项目管理改用了git. 生活有人说,生活就像一杯白开水,平平淡淡最好,我觉得也是. 2013年最重要的事情就是我订婚啦,和我相处了两年的女友我们的关系终于又进了一步,女友的性格和我十分互补,十分懂事,我们一定会幸福的~ 其次就是了解并重视了pm2.5,于是在下半年停止了每周的篮球活动,买了3M的口罩,基本上每天都戴,想起以前夏天开着窗户睡觉,大雾天去打篮球,感觉自己真TM在作死~ 其他行业我说不上,但作为一个程序员,你如果不重视pm2.5的话,那就等同于用百度,用ie,对自己好一些吧! 恩,2013年就这样过去了,这一年发生了很多变化,我也成熟了很多,2014一定会更好.","categories":[],"tags":[{"name":"年结","slug":"年结","permalink":"http://blog.justbilt.com/tags/年结/"}]},{"title":"友盟渠道包工具","slug":"umeng_apk_tools","date":"2014-03-19T02:18:22.000Z","updated":"2017-03-12T01:22:38.000Z","comments":true,"path":"2014/03/19/umeng_apk_tools/","link":"","permalink":"http://blog.justbilt.com/2014/03/19/umeng_apk_tools/","excerpt":"游戏做完了,在国内发android包是一件很痛苦的事情,应用市场多达100多家,不说都上吧,就是上10来个也够咱们喝一壶的了,而且每次更新版本都得这么做:(,想想还是应该有个批量打包的工具!","text":"游戏做完了,在国内发android包是一件很痛苦的事情,应用市场多达100多家,不说都上吧,就是上10来个也够咱们喝一壶的了,而且每次更新版本都得这么做:(,想想还是应该有个批量打包的工具! 1.问题之前在微博上看到王峰的一张表,里面大概有百八十个渠道,后来找不到了,只找到了下面这张图: 实现自动化的思路的大概有两个: 使用ant工具,写编译脚本 打出一个Apk包,使用拆包工具分解Apk,修改AndroidManifest.xml 文件后，再重新打包 2.下载安装友盟渠道打包工具就是按照第二个思路实现的,官方github仓库在这里,windows版的下载地址在这里,现在貌似只有windows7版的(偷乐)! 如果你恰好接入了友盟的统计,那么就可以爽了! 下载完成后,解压,运行UmengTools.exe后会检测Java环境,需要安装JDK,可以去这里下,然后把类似这个路径C:\\Program Files\\Java\\jdk1.7.0_45\\bin加入到环境变量中去. 3.使用启动UmengTools后你就会看到一个非常高大上的界面: 然后点击1位置的扳手图标,会弹出配置界面,如图: KeyStore中填入你签名文件的路径,password栏填入创建签名文件时的密码 Alias栏填入这个应用的名称,password栏填入密码 要添加,删除渠道在渠道栏配置 在配置文件栏填入配置文件名称 点击保存 然后将你通过eclipse导出的签名包拖拽到2的位置,点击一键打包可以冲杯咖啡等待成功了!","categories":[],"tags":[{"name":"Tool","slug":"Tool","permalink":"http://blog.justbilt.com/tags/Tool/"},{"name":"批量打包","slug":"批量打包","permalink":"http://blog.justbilt.com/tags/批量打包/"}]},{"title":"convert2fnt: 将一堆图片转化为BMFont工具","slug":"images_to_bmfont","date":"2014-02-01T00:34:33.000Z","updated":"2017-07-09T06:36:41.000Z","comments":true,"path":"2014/02/01/images_to_bmfont/","link":"","permalink":"http://blog.justbilt.com/2014/02/01/images_to_bmfont/","excerpt":"学习了Python也有一段时间了,一直在看书啊什么的,没有写些东西,感觉这样不太好,刚好项目中需要一个CCLabrlTTF但美术妹纸只给了一堆散图,自己写一个小工具吧!","text":"学习了Python也有一段时间了,一直在看书啊什么的,没有写些东西,感觉这样不太好,刚好项目中需要一个CCLabrlTTF但美术妹纸只给了一堆散图,自己写一个小工具吧! 2014年4月11日更新: 去除了ImageMagick的依赖,改用PIL 用Pyinstaller打包出了win32和mac的可执行程序,不用安装任何东西了! 发现之前写的那个脚本依赖的东西太多了,加上最近对Python的了解又有所增加,所以重写了这个工具,变得更加易用了,小伙伴赶紧更新下吧~ 一.使用新版的工具已经不需要安装任何附属的东西了,只需两步,就可解脱~ 1).修改图片名这一步十分容易,我们约定一个规则,规定图片的命名为x_y.png,这样x就是最终.fnt和.png的名字,而y就是对应字符的ASCII码,这样我的图片最后命名是这个样子的: 1234567891011fighting_header_shuzi_48.png #0fighting_header_shuzi_49.png #1fighting_header_shuzi_50.png #2fighting_header_shuzi_51.png #3fighting_header_shuzi_52.png #4fighting_header_shuzi_53.png #5fighting_header_shuzi_54.png #6fighting_header_shuzi_55.png #7fighting_header_shuzi_56.png #8fighting_header_shuzi_57.png #9fighting_header_shuzi_109.png #m 最后一个m是因为我的图片中包含了一个m字样的图片,具体ascii码表可以在这里查. 2).下载可执行程序 这两个文件的同级目录我放了一组测试图片,大家可以一并下下来测试~ windows: 从这里下载images2fnt.exe,在你的碎图目录双击运行 mac: 从这里下载images2fnt,在你的碎图目录启动终端,键入./images2fnt 然后…然后就神奇的东西出现了呢,在output目录下会找到你想要的东西~ 二.项目工程已开源到github上,点击这里查看,项目采用Python编写,主要依赖了这几个库: Pillow Pyinstaller Pillow是Python的图片处理库,前身是Pil,项目使用Pillow拼接图片,获取图片信息.Pyinstaller是Python的一个发布工具,会将代码打包成可执行文件,十分方便. (全文完)","categories":[],"tags":[{"name":"Tool","slug":"Tool","permalink":"http://blog.justbilt.com/tags/Tool/"},{"name":"convert2fnt","slug":"convert2fnt","permalink":"http://blog.justbilt.com/tags/convert2fnt/"}]},{"title":"在 MacOS 上搭建 mafiagame 版的 Quick-cocos2d-x","slug":"quickx_on_mac","date":"2014-01-26T10:15:44.000Z","updated":"2017-04-23T04:40:14.000Z","comments":true,"path":"2014/01/26/quickx_on_mac/","link":"","permalink":"http://blog.justbilt.com/2014/01/26/quickx_on_mac/","excerpt":"一.Why mafiagame?为什么要用mafiagame版的quick-cocos2d-x(以下简称quick)呢?我在使用quick时候遇到了很多坑,改了quick好多代码,主要还是cocosbuilder(以下简称ccb)方面的,为了方便其他同事,就在quick的基础上做了一个分支,提交我的这些修改,修改基于quick的最新2.2.1-rc,关于具体的坑会单独开一篇文章来写,这里就不做赘述了.","text":"一.Why mafiagame?为什么要用mafiagame版的quick-cocos2d-x(以下简称quick)呢?我在使用quick时候遇到了很多坑,改了quick好多代码,主要还是cocosbuilder(以下简称ccb)方面的,为了方便其他同事,就在quick的基础上做了一个分支,提交我的这些修改,修改基于quick的最新2.2.1-rc,关于具体的坑会单独开一篇文章来写,这里就不做赘述了. 二.克隆仓库到本地Ps:如果你比较熟悉git和github的话,这部分可以跳过了,没有什么技术含量. 1.工具选择 Github For Mac,好多git的新手会选择使用Github For Mac,我不太推荐这么做,因为Github的客户端隐藏了好多东西,非常容易误操作并且对git的使用一点帮助也没有, git command tool,我也不推荐一上来就使用git的命令行工具,一来上手难度太大,二来效率太低. SourceTree,在使用SourceTree之前我用过gitGUI,感觉差距太大了,SourceTree绝对是Mac上最好用的git GUI工具,没有之一.下面我详细讲述一下使用SourceTree获取最新代码 2.安装SourceTree工具大家可以从这里获取,下载完成后安装打开,该同意的同意,能跳过的跳过,大家就能见到这个画面了: 忽略我上面的东西,点击左上角有+号字样的第一个图标添加仓库,就会看到下面这个画面: 在地址栏填入https://github.com/mafiagame/quick-cocos2d-x.git这个地址,选择clone到/Users/xxxx/Documents/quick-cocos2d-x这个路径下,书签名设置为quick-cocos2d-x,推荐打开下面的高级选项,在brunch框中填入mafiagame,这样可以只迁出mafiagame分支,减少clone的时间: 漫长的等待时间结束后,双击书签quick-cocos2d-x就可以进入这个画面了,进到这里就结束了克隆代码的步骤就结束了. 3.切换到mafiagame分支如果你上步在brunch框中填入了mafiagame,这步就可略过了,但是如果没有,就需要切换分支了. 点击工具栏的Checkout 在弹出框中点击Checkout New Branch 选择远端的origin/mafiagame分支 点击OK,等待,切换成功,步骤图如下 三.搭建Sublime开发环境关于Sublime的简介大家可以自行搜索,我们用它作为开发环境的主要原因是lonewolf小伙伴为Sublime做了非常实用的插件QuickXDev,非常屌,大家可以慢慢体会. 1.下载安装大家在这里可以很轻松的获取Sublime的最新版本,安装后打开,可以看到这个画面: 2.安装package control组件 按Ctrl+` 调出console 粘贴以下代码到底部命令行并回车：import urllib2,os;pf=’Package Control.sublime-package’;ipp=sublime.installed_packages_path();os.makedirs(ipp) if not os.path.exists(ipp) else None;open(os.path.join(ipp,pf),’wb’).write(urllib2.urlopen(‘http://sublime.wbond.net/&#39;+pf.replace(‘ ‘,’%20’)).read()) 等待一段时间 重启Sublime Text 2。 如果在Perferences-&gt;package settings中看到package control这一项，则安装成功。 3.安装QuickXDev 按⌘+Shift+P键打开package control,在弹出的框中输入Install Package,选择对应条目回车. 稍等片刻后会弹出另一个输入框,输入QuickXDev回车,等待安装成功. 重启Sublime,在Perferences-&gt;package settings中看到QuickXDev这一项，则安装成功。 打开Perferences-&gt;package settings -&gt;QuickXDev -&gt;QuickXDev.sublime-settings,在打开的文本中输入quick_cocos2dx_root,如下图: 4.运行示例项目 按⌘+k,b键打开左侧Side Bar 在Finder中找到quick-cocos2d-x目录,拖拽到Side Bar上 在Side Bar上展开quick-cocos2d-x -&gt; samples -&gt; coinflip,在scripts文件夹上右键Run With Player,如下图: 然后就会看到官方的这个示例了,下面开始lua之旅吧 四.后记这里并没有讲Android环境的搭建,是因为quick官网上已经有了详细的教程了,大家去看这篇文章就OK,至于为什么不给官方提交pull request,有以下几个原因: 我的代码习惯,提交规范和quick不知有无差异 我做的更改多数在ccb方面,quick官方明显排斥ccb 我添加了一些工具类,比较个人化,推广开来可能不适用 综上,我没有提交给quick仓库,但是如果quick有需要的话,我还是十分乐意合并过去的. (全文完)","categories":[],"tags":[{"name":"Quick-Cocos2d-x","slug":"Quick-Cocos2d-x","permalink":"http://blog.justbilt.com/tags/Quick-Cocos2d-x/"}]},{"title":"在Command Line中使用TexturePacker","slug":"use_tp_on_command_line","date":"2013-12-12T02:33:02.000Z","updated":"2017-03-12T01:22:38.000Z","comments":true,"path":"2013/12/12/use_tp_on_command_line/","link":"","permalink":"http://blog.justbilt.com/2013/12/12/use_tp_on_command_line/","excerpt":"TexturePacker是一个非常好用的小图合并工具,介绍它的文章非常多,多数都是使用GUI工具的,但是: 如果原始图片发生了改变,我们就需要重新手动拼接一下,麻烦. 使用GUI界面非常不高端,我高大猿族绝对首选使用Command Line啊. 安装TexturePacker会附带一个command line工具,让我们一起学习一下如何使用吧.","text":"TexturePacker是一个非常好用的小图合并工具,介绍它的文章非常多,多数都是使用GUI工具的,但是: 如果原始图片发生了改变,我们就需要重新手动拼接一下,麻烦. 使用GUI界面非常不高端,我高大猿族绝对首选使用Command Line啊. 安装TexturePacker会附带一个command line工具,让我们一起学习一下如何使用吧. ##环境搭建我一般首选在Windows下开发(不要打我),这里就只讲Windows环境的配置 1.先去这里下载安装文件,完成后一路无脑下一步,OK. 2.大家在C:\\Program Files\\TexturePacker\\bin目录下可以看到两个exe文件,TexturePacker.exe和TexturePackerGUI.exe,前者是命令行工具,后者是GUI工具. 3.默认TexturePacker是没有加到环境变量中的,我们需要手动来,右键点击计算机-&gt;属性-&gt;高级系统设置-&gt;环境变量,找到PATH后将C:\\Program Files\\TexturePacker\\bin添加到末尾,注意要在前面加;. 4.运行cmd,输入TexturePacker大家应该能够看到下面的内容:如果不能的话请检查拼写和第2步.大家可以仔细阅读一下内容,写的十分详细,用过TexturePacker的话基本上都能对应起来. ##小试牛刀你过你看完打印出的信息的话可以发下末尾部分有三个示例,如下:看起啦十分简单,让我们试一下吧,感谢微博小伙伴@sosoayaen发现的小秘密,使得我们可以快速的在任意位置打开命令行.找一个有这一堆图片的文件夹的上层目录,按住Shift点击右键,会发现一个菜单项在当前目录打开命令行,打开后按照示例输入TexturePacker 001/*.png,然后如示例说的: creates out.plist and out.png from all png files in assets trimming all files and creating a texture with max. 2048x2048px 实际情况却不完全是这样的,你可能会得到这样的错误: 卧槽,这是什么情况啊,明明就是按照官方的示例来的嘛,google完全没有任何答案啊,经过一番痛苦的实验后,终于发现了原因所在,这里不能输入:1TexturePacker 001/*.png 而应该是这个样子:1TexturePacker 001 这个问题可能是由于我使用的版本太旧或使用Windows导致的,如果你没有遇到,那么最好! ##参数详解本想着把所有参数都讲一遍,写到一半发现卧槽太多了,而且好些都用不到,这里挑一些常用的分析下,以下内容都有进行测试,还是比较准确的,如果有问题,欢迎指出.注: 选项含有&lt;...&gt;的选项表示含有参数需要填写. 粗体表示比较重要的选项. ####输出–sheet &lt;filename&gt;+生成的图片名,支持png,jpg,pvr,pvr.czz,pvr.gz格式+示例:--sheet out.png –data &lt;filename&gt; 生成的plist文件名 示例:--data out.plist –format &lt;format&gt; 生成的plist格式,我们使用cocos2d格式 示例:--format cocos2d 注:其他支持格式见下图: –auto-sd 自动生成sd资源 示例:--auto-sd 注:这个要注意一点,如果要使用这个参数,你输入的sheet和data名必须含有-hd或@2x,TP会自动生成不带后缀的sd数据. –texturepath &lt;path&gt; 在生成的sheet文件的路径前加你 示例:--texturepath image/tower 这样在plist文件中realTextureFileName的值为image/tower/out.png 注:这个参数主要用在当你的图片与plist文件不再同一个目录时使用,不会改变out.png的目录 –trim-sprite-name 剪裁掉拼接图片的后缀名 示例:--trim-sprite-name 这样在plist文件中&lt;key&gt;001.png&lt;/key&gt;会变成&lt;key&gt;001&lt;/key&gt; 注:是剪裁用来拼接的文件而不是生成文件,如果你的资源管理类似于android那样,使用图片时不加后缀名,那么打包时可以使用这个选项 –replace &lt;regexp&gt;=&lt;string&gt; 按照原文的翻译是使用&lt;string&gt;替换掉拼接图片的文件名中正则表达式匹配的字符串 卧槽,正则表达式啊一听就尼玛高大强啊,可惜老夫不会啊,怎么办呢?回家去翻翻金瓶梅改天告诉大家. 这个TM太有用了,后面我遇到的那个问题,用这个来解决最好不过了 –ignore-files &lt;regexp&gt; 按照原文的翻译是忽略所有满足给定条件的图片(可以使用时间作为条件),你可以使用*或?,但在使用bash时应避免使用通配符. ####尺寸先上一张cocos2d-x支持的最大图片尺寸:还有官方的这句话: For the developers, if you want to cross platforms and run your games smoothly, you should keep your texture size less than 1024*1024, that is the lowest restriction for most machines. –width/–height &lt;int&gt; 两个参数,放在一块说了,设置输出图片的宽度/高度 示例:--width 100 --height 100 注:这个值设置的大了无所谓,会产生空白区域,但是如果太小,就会报错:1error: Could not fit all sprites into the sprite sheet. –max-width/–max-height/–max-size &lt;int&gt; 设置输出图片的最大宽度/高度/尺寸 示例:--max-width 1024 --max-height 1024 前面两个等价于后面 --max-size 1024 注: 1.和上面两个参数的区别在于告诉TP实际值别超过这个值就OK,而上边那两个参数告诉TP实际值一定是这个. 2.默认值为2048 3.如果实际值大于设置的最大值会产生错误:1error: Sprite sheet size is too small. –allow-free-size 允许输出图片不是2的幂,以最小尺寸输出 示例:--allow-free-size 注:这个一般开启,cocos2d-x2.0开始就已经支持图片不是2的幂了 ####间距和旋转–shape-padding &lt;int&gt; 图块之间缝隙的宽度,默认值是2 示例:--shape-padding 100 –border-padding &lt;int&gt; 可以理解为边框的宽度,默认值为2 示例:--border-padding 100 –padding 间距,这个参数等价于上面两个参数同时同时作用 示例:--padding 100 注:如果没有开启--allow-free-size可能和你想象的不太一样 –inner-padding 试了一下,这个参数的作用应该是给每个sprite的周围加一个边框,默认值为0 示例:--inner-padding 100 注:上面的这几个参数作用都不是很大 –enable-rotation/diable-rotation 开启/关闭旋转,默认值和输出的格式有关系,cococ2d格式默认enable 示例--enable-rotation --diable-rotation 注:这个很好理解,为了排版更密集些,有的图片会被旋转 –trim/no-trim 剪裁图片,即移除图片周围的透明像素,保留原始尺寸,默认开启 示例:--trim no-trim 注:这个要格外注意一下,这个参数略微有些问题,如果没有了解带来的后果的话还是使用--no-trim更安全些,我会在后面的仔细讲一下. –crop 与上面的一条类似,移除图片四周的透明像素,不保留原始尺寸,保存为一张更小的图片 示例:--crop 注:同上,要小心使用,尽量不在这里使用,而是改为前期用其它工具处理 –trim-threshold 与Trim类似,只是这个选项有一个参数,表示剪裁掉alpha值小于这个参数的像素,取值0~255,默认为0. 示例:--trim-threshold –disable-auto-alias 关闭自动命名,什么意思呢?TP在打包时会自动识别相同的图片,最终在大图里只会保留一张,这样会更加的节省资源,这个参数将会关闭这个功能 示例:--disable-auto-alias 注:这样参数还是不要设置的好 ####其他常用选项–opt 设置输出图片的像素格式 一般默认RGBA8888 示例:--opt RGB444 注:这个选项一般不做更改,如果想压缩资源体积的话,可以改为RGBA4444这样图片可以减小一半的体积.具体大家可以看下面这张图: ##常见问题 错误: error: Error in sprite: .png: Failed to load image!解决方案: 去掉目标路径末尾的.png试试. 错误: error: Could not fit all sprites into the sprite sheet.解决方案:1.查看有无设置--width or --height,这个错误通常是由于输出图片的尺寸太小导致的.2.查看有无--max-width/--max-height/--max-size,没有的话加上,有的话将参数值改大一些. 错误: error: Sprite sheet size is too small.解决方案:参见上个错误中的解决方案2,--max-width/--max-height/--max-size默认值为2048,试着改成4096试试,如果解决了,不要高兴,因为大多数移动设备都不支持这个尺寸,可以考虑分开打包. 错误: error: Unknown argument –XXX - please check parameters or visit http://www.texturepacker.com for newer version解决方案: 检查XXX的拼写是否正确 问题: 程序中获得图片的尺寸与打包前不一致解决方案: 检查参数是否含有--crop,有的话删除,有没有--no-trim,没有的话加上. ##后记讲了那么多参数,其实常用的没有几个,下面这个是我最终使用的命令:1TexturePacker --sheet out.png --data out.plist --allow-free-size --no-trim --max-size 1024 --format cocos2d animation 文章到这里就要结束了,但其实还没有完,--trim到底为什么不建议使用?使用了会发生什么问题?它和--crop的具体区别在哪里?plist文件中frame的路径和其他plist的重复了怎么办?程序中怎么做才能做到打包和不打包的差异最小化?金瓶梅你什么时候看完? 我后面会再写一篇文章来讲这些东西(逃). 全文完","categories":[],"tags":[{"name":"Tool","slug":"Tool","permalink":"http://blog.justbilt.com/tags/Tool/"},{"name":"TexturePacker","slug":"TexturePacker","permalink":"http://blog.justbilt.com/tags/TexturePacker/"}]},{"title":"修改SimpleAudioEngine在win32下的实现","slug":"cocos2dx_simpleaudio","date":"2013-11-29T08:07:51.000Z","updated":"2017-03-12T01:22:38.000Z","comments":true,"path":"2013/11/29/cocos2dx_simpleaudio/","link":"","permalink":"http://blog.justbilt.com/2013/11/29/cocos2dx_simpleaudio/","excerpt":"###2013年12月6日更新试着跟OAE的作者联系了下,向他诉苦必须装vs2013的运行库的问题,没想到作者竟然回复了,而且很快出了一新的版本: I’ve updated the package on: OAE_1_6_0_7,It’s still with Visual Studio 2013, but linked statically. So you don’t need anymore Visual C++ redistributable to run Open Audio Engine.Now it should really more portable :P 哈哈哈,实乃业界良心啊,这下小伙伴们再也不用去安装vs2013的运行库了,实测无误,大家快些更新吧!","text":"###2013年12月6日更新试着跟OAE的作者联系了下,向他诉苦必须装vs2013的运行库的问题,没想到作者竟然回复了,而且很快出了一新的版本: I’ve updated the package on: OAE_1_6_0_7,It’s still with Visual Studio 2013, but linked statically. So you don’t need anymore Visual C++ redistributable to run Open Audio Engine.Now it should really more portable :P 哈哈哈,实乃业界良心啊,这下小伙伴们再也不用去安装vs2013的运行库了,实测无误,大家快些更新吧! ###2013年12月3日更新感谢微博小伙伴@Hewen_Xie的纠正,在检测缓冲时没有使用FullPath,可能导致缓冲检测失效,已上传至github,大家更新下就OK! ###2013年12月2日更新之前文章有两个错误,更正下,小伙伴们对不住了!1.必须装vs2013的运行库,之前说的那个不用装的方法是错误的,引擎作者很早就使用vs2013开发了,用别人的东西就是蛋疼,改天研究下openAL吧! 2.大量测试后发现OAE引擎最大支持缓存256个声音,一旦超出后会卡死程序,我写了缓冲池修复了这个问题,效率也有所提升. ##问题在上篇文章中抱怨了下SimpleAudioEngine在win32下的实现,总结一下,有这么几个缺点: 1.循环播放音效的返回id有问题,与其他平台存在差异. 2.每次播放音效都会开启一个线程,io操作,声音一多,卡的不成样子 其中第2点是致命的,保卫萝卜1出过一个桌面版,由于声音的问题,开着声音几乎不可玩,大家可以下一个感受一下: 这样来看,难道真如王哲大神所说,桌面版只是一个用来调试的版本? 其实不然,因为cocos2d-x是开源的,而SimpleAudioEngine在不同平台下又有不同的实现,这样我们可以很容易的去修改win32下的实现. ##解决方案想了下,决定先放出解决方案,下面的文章其实可看可不看的,最终我采用的是免费不开源的OAE声音引擎,基于OpenAL的二次封装,OOP,简单易用.大家只需几个步骤即可完美解决win32下的声音问题! 由于最新版的OAE使用vs2013开发,必须装vs2013的运行库! (已不用安装) 注意:OpenAE有一个缺点,就是只支持ogg文件. 1.解压缩从github将这个拽下来! 2.32位系统将lib/x86目录下的OpenAE.dll,OpenAL.dll拷贝到Debug.win32目录下,64位类似. 3.用win32/ 替换掉你工程CocosDenshion/win32目录下的所有文件. 4.大功告成,播放一堆声音试试吧. 5.游戏结束的时候一定要在AppDelegate的析构函数中调用SimpleAudioEngine::end(),不然会因没有释放内存而崩溃,如下: 1234AppDelegate::~AppDelegate()&#123; CocosDenshion::SimpleAudioEngine::end();&#125; 6.将OpenAE.dll,OpenAL.dll拷贝到cocos2dx/platform/third_party/win32/libraries中,这样重新编译时会自动拷贝到Debug.win32目录下. 好了,是不是十分容易,下面的内容是写当时考虑的一些东西及实现的一些细节,如果有什么错误和疑问,请指出,谢谢! ##声音引擎的选择好的,如果你对win32下的声音播放比较熟悉的话,你可以看下SimpleAudioEngine现在的实现,试试能否改的更高效些!否则我们只能找一个现成的声音引擎了. ###FMOD说起声音引擎,FMODE必须是首选啊,功能强大,跨平台,个人使用免费,简单易用,久经考验,好多牛逼的游戏引擎都使用它的,官方网址,下面是使用它的引擎: 但是由于商用是收费的,而且我们用不到那么多牛逼的功能,所以这个就pass掉咯~ ###OpenAL另一个特别有名的就收OpenAL(Open Audio Library)了,这个也是大名鼎鼎啊,让我们看看维基百科的介绍: OpenAL（Open Audio Library）是自由软件界的跨平台音效API。它设计给多通道三维位置音效的特效表现。其 API 风格模仿自 OpenGL。penAL 最初是由 Loki Software 所开发。是为了将 Windows 商业游戏移植到 Linux 上。Loki 倒闭以后，这个项目由自由软件／开放源始码社区继续维护。不过现在最大的主导者（并大量发展）是创新科技，并得到来自 苹果公司 和自由软件／开放源代码爱好者的持续支持。 现在官方网站貌似打不开,感兴趣的同学可以去这里看看.OpenAL十分强大,这就意味着要在短时间弄懂它并不容易,这里我们就不考虑它了. ###OpenAE最终我选择了OpenAE(Open Audio Engine),一个基于OpenAL的声音引擎,面向对象,上手十分容易(我只用了10分钟就会用了),虽然不开源但是免费啊,这已经足够了.官方网站在这里,同时大家可以看看codeproject上的这个示例. ##改动其实要改动的地方很多,之前的实现基本要重写,下面我介绍下要点: 1.首先我们要初始化引擎,由于SimpleAudioEngine是单例,所以它的构造函数就挺好: 1234567891011121314151617181920212223242526272829303132SimpleAudioEngine::SimpleAudioEngine()&#123; HINSTANCE lib = LoadLibrary(\"OpenAE.dll\"); //加载引擎 //得到设备列表地址 oae::Renderer* (*driver)(const char*,const unsigned&amp;) = nullptr; driver = (oae::Renderer*(*)(const char*,const unsigned&amp;)) GetProcAddress(lib, \"GetRenderDevice\"); //得到设备列表 const char* (*available)(unsigned int&amp;) = nullptr; available = (const char*(*)(unsigned int&amp;)) GetProcAddress(lib, \"GetDeviceName\"); //打印可用设备的列表 for(unsigned j=0; available(j)!=nullptr; j++) &#123; CCLog(available(j)); &#125; //默认使用第一个设别去创建Renderer,48000是端口号随便填 unsigned choice=0; oae::Renderer* dev = driver(available(choice), 48000); //这行代码十分诡异,貌似没有什么用处,但是不调用就是无法播放声音 oae::Listener* lis = dev-&gt;GetListener(); //由于创建声音和最终释放资源会用到这两个指针,所以我以static方式存在的MciPlayer中 MciPlayer::lib=lib; MciPlayer::dev=dev;&#125; 2.更改MciPlayer的实现,对oae,每一个声音的实例是oae::Screamer,我们在open中去创建它: 12345678void MciPlayer::Open(const char* pFileName, UINT uId)&#123; m_scr=dev-&gt;GetScreamer(pFileName); assert(m_scr!=NULL &amp;&amp; \"Only suppost .ogg file!\"); m_strFileName=pFileName; m_nSoundID=uId;&#125; 3.更改playEffect返回值streameID的生成方式,变为递增的就OK:1234567unsigned int _StreameID()&#123; static unsigned int nSteameID=0; ++nSteameID; return nSteameID;&#125; 其他改动的地方也很多,大家可以直接去看源码,下面有下载地址. ##后话 具体实现什么的都在源码里,大家可以看一下,经过本人测试,没有发现任何问题,并且已经应用到了现在的项目中,如果遇到了什么问题,留言告诉我. (全文完)","categories":[],"tags":[{"name":"cocos2d-x","slug":"cocos2d-x","permalink":"http://blog.justbilt.com/tags/cocos2d-x/"},{"name":"音效","slug":"音效","permalink":"http://blog.justbilt.com/tags/音效/"}]},{"title":"从保卫萝卜看cocos2d-x循环播放音效的问题","slug":"cocos2dx_loop_sound","date":"2013-11-28T00:28:03.000Z","updated":"2017-03-12T01:22:38.000Z","comments":true,"path":"2013/11/28/cocos2dx_loop_sound/","link":"","permalink":"http://blog.justbilt.com/2013/11/28/cocos2dx_loop_sound/","excerpt":"##起因保卫萝卜2前几天上ios平台了,立刻下了一个玩,卧槽,各种呆萌蠢贱啊,有一个塔挺有意思,魔法球:","text":"##起因保卫萝卜2前几天上ios平台了,立刻下了一个玩,卧槽,各种呆萌蠢贱啊,有一个塔挺有意思,魔法球: 这种塔的攻击力虽然低,但是攻击速度快啊,而且升级后还能攻击多个目标,用在对付血少速度快的怪物再适合不过了.玩了挺久发现这个塔的音效有些问题: 屏幕中有多个魔法球塔时,卖掉其中一个可能会导致所有魔法球塔的音效停止. 有时候卖掉所有的魔法球塔,但是声音还在播放! 一般情况下我是不会mind这种细节的,但由于保卫萝卜是用cocos2d-x制作的,所以我稍微多想了一下: 猜想1:由于攻击速度十分快,所以我假设魔法球这个塔的音效播放和其他的塔不太一样,可能是这个样子的:切换为攻击模式时循环播放音效,切换为待机模式时停止音效!猜想2. 如果假设成立,这个音效由于会循环播放,如果声音太吵的话,会十分的吵,萝卜显然注意到了这点.猜想3. 所有的魔法球塔会公用一个特效声音,要不造的塔多了就根本没法开声音玩了! 细思极恐,其实这座塔的音效播放逻辑十分的复杂! ##验证下面让我验证下我的猜想,看看能否帮萝卜解决这个问题! ###验证1:循环播放音效这个十分简单,我在保卫萝卜2的资源中找到了CarrotFantasy.app\\Music\\Towers\\Ball.mp3,看了时长1s左右,但是魔法球塔的攻击速度绝对大于2次,开2倍速的会大于4次,1s播放4次音效,没有人会这么做!所以魔法球塔是循环播放音效的! ###验证2:音效的特性这个大家听一下就会知道了,魔法球的塔混在其他塔的音效里实在是太弱了!为此,我还假装很专业的用GoldWave查看了一下:图中上面的声音是瓶子炮的声音,下面是魔法球的声音,从图上可以看出,虽然魔法球的声音很长,但是只有在0.65s时声音较大,其他时候声音都很小! ###验证3.公用一个音效 开启循环播放音效十分简单,只需在playEffect(&quot;1.ogg&quot;,true)时第二个参数填true即可,这时playEffect会返回一个unsigned int类型的id,这个id会用于stopEffect(id),如下: 123unsigned int uID=SimpleAudioEngine::sharedEngine()-&gt;playEffect(\"1.ogg\", true);//开始循环播放SimpleAudioEngine::sharedEngine()-&gt;stopEffect(nID);//停止播放 这样看起来似乎很简单嘛,攻击的时候播,顺带记下ID,待机的时候停,这么简单,萝卜的程序太差了吧,这都能写错!其实不然,这只是场景中只有一座塔时的情况! 下面我们来试一下如果我们连续调用多次playEffect,会发生什么问题?我做了测试项目,将每次playEffect的返回ID打在屏幕上,win32截图如下: 额,你没有看错,win32下播放同一个音效返回的id都是一样的,只要点击一下停止就全部都停了,为什么呢?让我们看一下win32下声音的id是怎么生成的吧,在SimpleAudioEngine中我们可以看到这段代码:123456789101112131415161718192021222324252627282930//播放音效的函数unsigned int SimpleAudioEngine::playEffect(const char* pszFilePath, bool bLoop)&#123; unsigned int nRet = _Hash(pszFilePath);//可以断定nRet就是返回的id preloadEffect(pszFilePath); EffectList::iterator p = sharedList().find(nRet); if (p != sharedList().end()) &#123; p-&gt;second-&gt;Play((bLoop) ? -1 : 1); &#125; return nRet;&#125;//生成id的函数unsigned int _Hash(const char *key)&#123; unsigned int len = strlen(key); const char *end=key+len; unsigned int hash; for (hash = 0; key &lt; end; key++) &#123; hash *= 16777619; hash ^= (unsigned int) (unsigned char) toupper(*key); &#125; return (hash);&#125; 这下明白了吧,win32下的id是根据音效的路径pszFilePath算出来的,这一点确实比较坑,大家以后要注意一下!下面我看一下在android上的效果吧! adnroid版是正常的,每次playEffect返回的id会递增,可以明显的听出又多了一个音效,当我音效叠了5层之后已经很乱了,但是萝卜的显然不是如此,所以所有的魔法球共用一个音效是正确的! 注意:这里一定要提前preloadEffect,不然第一次返回的id是0,这样那个音效就永远停不下来了! ##分析基于以上猜想,我们来分析下魔法球塔的逻辑:1.对于单个的魔法球塔,由于多目标,所以要监听目标数量的变化,当target_count&gt;0时,开始播放音效,当target_count=0时,停止播放音效.2.卖掉塔时,如果处于攻击状态,应该调用停止播放音效.3.对于所有的魔法球塔,音效应该采用类此引用计数的方法,每调用一次++m_uReference;,每停止一次--m_uReference;,当m_uReference==0时调用真正的停止音效方法. 嘿嘿,以上纯属个人见解,本人不对此负任何责任! ##总结综上所述,我们在编写游戏音效逻辑的代码时,要注意:1.循环音效多次播放在windows上有问题,可以考虑在android或ios端调试.2.音效一定要preloadEffect. (全文完)","categories":[],"tags":[{"name":"cocos2d-x","slug":"cocos2d-x","permalink":"http://blog.justbilt.com/tags/cocos2d-x/"},{"name":"音效","slug":"音效","permalink":"http://blog.justbilt.com/tags/音效/"}]},{"title":"弯管(拐角)对方向的改变","slug":"elbow","date":"2013-11-03T00:28:03.000Z","updated":"2017-03-12T01:22:38.000Z","comments":true,"path":"2013/11/03/elbow/","link":"","permalink":"http://blog.justbilt.com/2013/11/03/elbow/","excerpt":"相信大家玩过类似用接水管的游戏: 水流顺着水管的一头流向另一头,但是直管通过,遇到弯管改变方向,那么究竟是如何改变方向的呢?仔细观察一下,不难发现,弯管只是将水流的方向旋转了90度,有了规律就好办了!","text":"相信大家玩过类似用接水管的游戏: 水流顺着水管的一头流向另一头,但是直管通过,遇到弯管改变方向,那么究竟是如何改变方向的呢?仔细观察一下,不难发现,弯管只是将水流的方向旋转了90度,有了规律就好办了! 1.让我们先定义一个方向的枚举,表示当前水流的方向: 12345678enum ETileDirection&#123; ED_UP, ED_RIGHT, ED_DOWN, ED_LEFT, ED_TICK_COUNT,&#125;; 这个枚举定义可以是顺时针,也可以是逆时针,但一定要是连续的! 2.当地图编辑好后,我们会获得一个二维数组,通过一个x,y参数就能取得某个坐标上的图块,根据图块的功能,我们可以讲图块分为:入口, 出口, 直管, 弯管, 于是我们可以再定义一个枚举:1234567enum ETileType&#123; ET_ENTRANCE, ET_EXIT, ET_STRAIGHT, ET_ELBOW,&#125;; 3.仔细想想,除了直管每一种类型的图块都会有,都会有四个方向,对于入口,会有向左的,向右的,向下的,向上的,终点,弯管也是如此!这样的话,我们一个图块的属性都会有两个,类型 和 方向,我们用一个结构体来表示:12345struct STile&#123; ETileType eType; ETileDirection eDirection;&#125;; 4.如下面这个砖块: 当水流从右侧进入时水流的方向也是ED_LEFT,出去的水流方向是什么呢?是ED_LEFT+1,因为方向的可能只有4个,所以我们需要和方向的总数量取余,即(eDir+1)%ED_TICK_COUNT为ED_UP. 当水流是从上方进入时方向为ED_DOWN,出去时的方向为ED_DOWN-1,但是减完有可能会出现负数,所以我们先扩大一个周期在减然后取余,即((eDir+ED_TICK_COUNT)-1)%ED_TICK_COUNT为ED_RIGHT. 那么如何区分是顺时针还是逆时针呢?我们之前Tile的eDirection属性就派上用场了,我们将这个图块的方向属性设置为ED_LEFT,细思之后会发现当图块的方向和水流方向一致时+1,不一致时-1. 好吧,说了这么久,让我们来看看具体的逻辑如何写吧? 1234567891011ETileDirection changeDirection(ETileDirection eDir,const STile* pProfile )&#123; ASSERT(pProfile-&gt;eType==ET_ELBOW); if (pProfile-&gt;eDirection==eDir) &#123; return (ETileDirection)(((eDir+ED_TICK_COUNT)-1)%ED_TICK_COUNT); &#125; return (ETileDirection)((eDir+1)%ED_TICK_COUNT);&#125; 如果有什么不明白的,留言告诉我! 全文完","categories":[],"tags":[{"name":"游戏心得","slug":"游戏心得","permalink":"http://blog.justbilt.com/tags/游戏心得/"}]},{"title":"TiledMap Tips","slug":"cocos2d-x-tiledmap-tips","date":"2013-10-16T06:01:26.000Z","updated":"2017-03-12T01:22:38.000Z","comments":true,"path":"2013/10/16/cocos2d-x-tiledmap-tips/","link":"","permalink":"http://blog.justbilt.com/2013/10/16/cocos2d-x-tiledmap-tips/","excerpt":"一.断言 TMX: Only 1 tileset per layer is supported 崩溃:","text":"一.断言 TMX: Only 1 tileset per layer is supported 崩溃: 加载地图时弹出断言失败窗口,跟踪进去发现崩毁地点:12CCAssert( m_uMaxGID &gt;= m_pTileSet-&gt;m_uFirstGid &amp;&amp; m_uMinGID &gt;= m_pTileSet-&gt;m_uFirstGid, \"TMX: Only 1 tileset per layer is supported\"); 从断言中的提示就可以看出:一张图层上只支持一个一个图块集合就是说编辑器中的每一层只能使用一个图块集合中的图块,不能使用其他图块集合中的图块! 二.tileGIDAt返回数据异常:我们用tileGIDAt获取某一层上的某一格对应的图块ID,GID是什么呢?可以理解为全局唯一ID,而我们的图块集合可能会有多个,所以每个的图块的ID不是从该图块集合1,2,3…这样的,而是紧接着上一个图块集合的最后一个ID顺序下来的! 所以我们要获得正确的ID,应该:123456cocos2d::CCTMXLayer *towerLayer = map-&gt;layerNamed(\"tower\");cocos2d::CCTMXTilesetInfo *towerSet = towerLayer-&gt;getTileSet();int nGid = towerLayer-&gt;tileGIDAt(ccp(0, 0)) - towerSet-&gt;m_uFirstGid;if(nGid &gt;= 0)&#123;&#125; 先获取这一层对应的图块集合的首ID,然后相减就获得了正确的ID. 三.拼接出现裂痕(黑线)1.快速解决方案 修改ccConfig.h中的CC_FIX_ARTIFACTS_BY_STRECHING_TEXEL:123#ifndef CC_FIX_ARTIFACTS_BY_STRECHING_TEXEL#define CC_FIX_ARTIFACTS_BY_STRECHING_TEXEL 1#endif 大体的作用是用实际图片的99%来创建纹理,这样边缘一些细微化的差距就会被忽略掉! 2.完美解决方案 用1的方法来解决问题是最快的,但是会带来一些副作用,查找下CC_FIX_ARTIFACTS_BY_STRECHING_TEXEL这个宏,会发现有4个地方都用到了: 分别是CCSprite,CCLabelAtlas,CCParticleSystemQuad,CCTileMapAtlas,其中只有CCTileMapAtlas的改变使我们想要的,而CCSprite是我们最常用的接口,这将会导致所有的图片都会使用99%来贴图,影响虽然不是很大,但是在某些情况下还是能够看的出来(点击查看大图): 正常: 开启后: 上面的图是放大两倍后的效果,如果你不是太在意这些细节的话,就可以忽略这个问题了. 但是如果你有强迫症的话,可以移步这篇文章: http://blog.sina.com.cn/s/blog_4508e4860101dzkj.html 同时我也修改好了一份,大家可以在文章末尾处下载! 四.滚动地图时会抖动这种情况在RPG游戏中的影响很大,看一会眼睛就花了,我们可以给每一个节点的纹理开启抗锯齿来解决这个问题:1234567891011//开启抗锯齿CCArray *pChildrenArray = map-&gt;getChildren();CCSpriteBatchNode *child = NULL;CCObject *pObject = NULL;CCARRAY_FOREACH(pChildrenArray, pObject)&#123; child = (CCSpriteBatchNode *)pObject; if(!child) break; child-&gt;getTexture()-&gt;setAntiAliasTexParameters();&#125; 五.tilemap HD转SD感谢@子龙山人 大大的分享,将tilemap从HD转SD可不是简单的将图片缩小一倍就OK的,地图文件中的网格尺寸啊什么的都要随着改变的!感兴趣的请移步这里:http://wasabibit.org/WasabiBit/Dev_Notes.html [10月25日] 六.加载崩溃崩溃地点如下:1234bool CCTexture2D::hasPremultipliedAlpha()&#123; return m_bHasPremultipliedAlpha;&#125; 原因:地图中有一层为什么都没有,这是不允许的,要么将这一层删掉,要么刷点东西上去! 附件一: http://pan.baidu.com/s/1qYnEQ 下载后解压,覆盖cocos2dx目录下的同名目录: 1.win32下,将CCSpriteTileMap.h和CCSpriteTileMap.cpp添加到libcocos2d工程中就OK! 2.android下,需要往cocos2dx/Android.mk中添加这么一行:1tilemap_parallax_nodes/CCSpriteTileMap.cpp \\ 3.ios下,需要将CCSpriteTileMap.h和CCSpriteTileMap.cpp添加到XCODE中! 还有什么问题,发留言告诉我!","categories":[],"tags":[{"name":"cocos2d-x","slug":"cocos2d-x","permalink":"http://blog.justbilt.com/tags/cocos2d-x/"},{"name":"TiledMap","slug":"TiledMap","permalink":"http://blog.justbilt.com/tags/TiledMap/"}]},{"title":"cocos2d-x 抖动效果 CCShake","slug":"cocos2d-x-ccshake","date":"2013-09-11T07:37:58.000Z","updated":"2017-03-12T01:22:38.000Z","comments":true,"path":"2013/09/11/cocos2d-x-ccshake/","link":"","permalink":"http://blog.justbilt.com/2013/09/11/cocos2d-x-ccshake/","excerpt":"之前在网上找过一次,但是用起来有些问题,抖动完位置有偏移,就自己修改了下,原文应该是在这里:","text":"之前在网上找过一次,但是用起来有些问题,抖动完位置有偏移,就自己修改了下,原文应该是在这里: http://blog.csdn.net/qq634416025/article/details/8630189 感兴趣的同学可以去看一下,作者特意将抖动做成了CCAction,用起来十分方便,大谢! 效果图(GIF,画质压缩的有点狠,凑活着看吧!): 我把我修改过的版本放在了百度云盘上,下载地址: http://pan.baidu.com/share/link?shareid=2640816246&amp;uk=2685725110 使用时: 1.先将CCShake.h中的1#include \"GameDefine.h\" 注释掉,改为下面这段话:12#include \"cocos2d.h\"USING_NS_CC; 2.用法:1pSprite-&gt;runAction(CCShake::create(0.1f,10)); pSprite:想抖动的物体 第一个参数是:抖动的时间 第一个参数是:抖动的幅度 3.注意,这点曾经困扰了我好久! 一个CCNode同时执行多个CCShake动作,或者一个CCShake没有完又执行一个CCShake的话就会出现问题,会出现偏移的现象! 解决方案: 不要同时执行多个CCShake动作. 自己外部记录这个CCNode的位置,执行完成后手动setPosition();","categories":[],"tags":[{"name":"cocos2d-x","slug":"cocos2d-x","permalink":"http://blog.justbilt.com/tags/cocos2d-x/"}]},{"title":"cocos2d-x 获取系统时间的问题","slug":"cocos2d-x-获取系统时间的问题","date":"2013-07-23T07:59:46.000Z","updated":"2017-03-12T01:22:38.000Z","comments":true,"path":"2013/07/23/cocos2d-x-获取系统时间的问题/","link":"","permalink":"http://blog.justbilt.com/2013/07/23/cocos2d-x-获取系统时间的问题/","excerpt":"一.预备知识在看这篇文章之前,大家先可以看下这篇文章:http://developer.51cto.com/art/201002/182941.htm (C++获得系统时间不同方案介绍)","text":"一.预备知识在看这篇文章之前,大家先可以看下这篇文章:http://developer.51cto.com/art/201002/182941.htm (C++获得系统时间不同方案介绍) 二.如何获取系统时间.1.获取日历时间:123time_t tt;//返回自从 Unix 新纪元（格林威治时间 1970 年 1 月 1 日 00:00:00）到当前时间的秒数。time(&amp;tt); 2.获取之后转化为年月日时间:1234567891011struct tm &#123; int tm_sec; /*秒数 seconds after the minute - [0,59] */ int tm_min; /*分钟数 minutes after the hour - [0,59] */ int tm_hour; /*小时 hours since midnight - [0,23] */ int tm_mday; /*月份中的第几日 day of the month - [1,31] */ int tm_mon; /*年份中的第几个月，从 0 开始表示一月 months since January - [0,11] */ int tm_year; /*年份，从 1900 开始 years since 1900 */ int tm_wday; /*星期中的第几天 days since Sunday - [0,6] */ int tm_yday; /*一年中的第几天 days since January 1 - [0,365] */ int tm_isdst; /*夏令时当前是否生效 daylight savings time flag */ &#125;; 3.打印出当前是一年中的第几天:123struct tm *p;p = localtime(&amp;tt);CCLog(\"%d\",p-&gt;tm_yday); 三.注意事项:1.对于下面的代码:12345678910111213time_t tt;time(&amp;tt);struct tm *p1;p1 = localtime(&amp;tt);time(&amp;tt);struct tm *p2;p2 = localtime(&amp;tt);if (p1-&gt;tm_sec!=p2-&gt;tm_sec)&#123; //do something...&#125; 大家觉得能否达到效果呢?(假设两次调用localtime的间隔很长) 答案是否定的:因为p1和p2指向了相同的地址,所以条件永远不成立!为什么呢?因为我们没有在调用localtime之前给p1和p2分配空间(栈,堆),而是用一个指针去接函数的返回值,这样的话只有两种可能: 每次函数内部都会new一个tm的对象,返回,这样外部必须手动释放才不至于内存泄露! 每次函数都返回同一块内存的指针,这样后一次的调用会覆盖前一次的结果!所以我们必须自己去保存结果:1int pre_tm_sec=p1-&gt;tm_sec; 2.不同平台的差异: time_t在linux上的定义:1234#ifndef __TIME_T#define __TIME_T /* 避免重复定义 time_t */typedef long time_t; /* 时间值time_t 为长整型的别名*/#endif 有此可见time_t就是long,只占4个字节! 而在windows上:12typedef __int64 __time64_t; /* 64-bit time value */typedef __time64_t time_t; /* time value */ 尼玛?坑爹的windows,这样time_t就是int64,占8个字节! 我曾经用long记下time_t类型的数据写入到存档中,结果就悲剧了,内存越界,死的心都有了!","categories":[],"tags":[{"name":"cocos2d-x","slug":"cocos2d-x","permalink":"http://blog.justbilt.com/tags/cocos2d-x/"}]}]}