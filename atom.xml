<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Justbilt</title>
  <subtitle>A game developer</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.justbilt.com/"/>
  <updated>2017-07-16T01:14:38.000Z</updated>
  <id>http://blog.justbilt.com/</id>
  
  <author>
    <name>justbilt</name>
    <email>wangbilt@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用 Electron 重写 convert2fnt</title>
    <link href="http://blog.justbilt.com/2017/07/09/convert2fnt-electron-rewrite/"/>
    <id>http://blog.justbilt.com/2017/07/09/convert2fnt-electron-rewrite/</id>
    <published>2017-07-09T04:54:42.000Z</published>
    <updated>2017-07-16T01:14:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>大概是 14 年 2 月份的时候, 我使用刚学会 Python 写了一个小工具: <a href="https://github.com/justbilt/convert2fnt" target="_blank" rel="external">convert2fnt</a>, 为此还写了一篇文章 <a href="/2014/02/01/images_to_bmfont/">将一堆图片转化为BMFont工具</a> 介绍这个工具. 它的主要应用场景是这个样子的:</p>
<blockquote>
<p>美术妹子出了一堆图片字, 但是在程序中使用 BMFont 是更加方便的, 这个时候你可以强硬的要求美术妹子重新用 Glyphdesigner 制作一份字体. 但是也可以很温柔的告诉她: “你先去忙吧, 剩下的交给我了.”, 然后在妹子崇拜的目光下, 转身离去, 深藏功与名. </p>
</blockquote>
<a id="more"></a>
<p>恩, 最初版的工具确实能够达到这个目的, 只是过程可能略微麻烦一下. </p>
<p>在第一版的工具中, 因为用到了 ImageMagick 来拼接图片, 所以你需要先安装这个工具, 然后下载脚本, 安装依赖库, 开始使用. 当妹子满心期待看着你放大招的时候, 你TM还在配环境? </p>
<p><img src="/face/yilianmengbi3.jpg" alt=""></p>
<p>第二版中重点优化了配置环境复杂的问题. 使用 Pillow 替换了 ImageMagick, 还使用 PyInstaller 打包了可执行程序. 如果顺利的话, 下载一个可执行程序, 把图片按照规则命名好, 执行下就好了, 很大的进步有木有?</p>
<p>但是这个工具的使用范围还是局限在了技术人员手, 你不会指望美术策划同学来搭建一个 <code>Python + pip</code> 的环境吧? 我们确实很愿意帮助妹子, 但是策划同学来找你怎么办? </p>
<p><img src="/face/ruhua.jpg" alt=""></p>
<p>一个带界面的工具在这时候看起来确实会是一个更好的选择, 这也是我一直所努力的方向. 我尝试过 Python 的各种 GUI 方案: Tkinter, PyWx, PyQt 等等, 这些方案良莠不济, 有的看起来只是一个 Demo, 有的光搭建环境就会让你吐.</p>
<p>为此我各种尝试,徘徊在各种方案间挣扎了好几年, 直到 <code>Electron</code> 横空出世. 它似乎是一个含着金钥匙出生的项目, 有着 Github 这个全球最大同性交友网站的加成, 一出生便备受瞩目. 当然它也不负众望, 干翻它的前身 Node-Webkit, 使得越来越多的 App 选择使用它来制作:</p>
<p><img src="https://ww1.sinaimg.cn/large/006tNc79ly1fhdnp3klegj30ln0vcjza.jpg" alt=""></p>
<p>这里含金量最高的便是: Atom, VSCode 以及 Cocos 的最新产品: Cocos Creater. 其中 Creater 是真正让我下定决定使用 Electron 的项目, 前两个都只是个编辑器, 而 Creater 则是一个解决方案, 一个 2D 游戏的制作工具, 而且从目前的发展来看, 十分的健康. </p>
<p>以目前 Electron 的火爆, 网上可以找到一大堆的教程, 相信大家可以很轻易的入门这个框架. 这里我和大家分享下自己的心得和踩过的一些坑.</p>
<h2 id="1-Electron-多个组件的作用"><a href="#1-Electron-多个组件的作用" class="headerlink" title="1. Electron 多个组件的作用"></a>1. Electron 多个组件的作用</h2><h3 id="electron-electron-prebuilt"><a href="#electron-electron-prebuilt" class="headerlink" title="electron/electron-prebuilt"></a>electron/electron-prebuilt</h3><p>根据官方的解释:</p>
<blockquote>
<p>Note As of version 1.3.1, this package is published to npm under two names: electron and electron-prebuilt. You can currently use either name, but electron is recommended, as the electron-prebuilt name is deprecated, and will only be published until the end of 2016.</p>
</blockquote>
<p>意思就是 <code>electron-prebuilt</code> 已经被废弃了, 建议直接使用:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install electron --save-dev</div></pre></td></tr></table></figure>
<h3 id="electron-package-electron-builder"><a href="#electron-package-electron-builder" class="headerlink" title="electron-package/electron-builder"></a>electron-package/electron-builder</h3><p>这两个都是 Electron 的打包工具, </p>
<p><a href="https://github.com/electron-userland/electron-packager" target="_blank" rel="external">electron-package</a> 只能打出可执行文件(Win:exe, Mac:app):</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">"scripts": &#123;</div><div class="line">    "package": "electron-packager . --platform=win32 --arch=ia32 --electron-version=1.4.15 --overwrite --ignore=node_modules --ignore=.gitignore"</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<p><a href="https://github.com/electron-userland/electron-builder" target="_blank" rel="external">electron-builder</a> 是一个更为先进, 简单的打包工具, 如果不想折腾的话可以直接选择它了.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">"scripts": &#123;</div><div class="line">    "pack": "electron-builder --dir",</div><div class="line">    "dist": "electron-builder"</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<h2 id="2-一定要准备一个强有力的梯子…或者脑子"><a href="#2-一定要准备一个强有力的梯子…或者脑子" class="headerlink" title="2. 一定要准备一个强有力的梯子…或者脑子"></a>2. 一定要准备一个强有力的梯子…或者脑子</h2><h3 id="npm-install"><a href="#npm-install" class="headerlink" title="npm install"></a>npm install</h3><p>安装 <code>Electron</code> 的途径之一就是通过 <code>npm</code>, 以国内的这个网络环境, 通过 npm 安装一些小的库还勉强可以, 对于 Electron 这种几十兆的库就显得捉襟见肘了, 时间长不说还很容易中断. 这时候就可以选择使用 <a href="https://npm.taobao.org/" target="_blank" rel="external">cnpm</a> 来做这些事情, </p>
<p><img src="https://zos.alipayobjects.com/rmsportal/UQvFKvLLWPPmxTM.png" alt=""></p>
<h3 id="npm-run-dist"><a href="#npm-run-dist" class="headerlink" title="npm run dist"></a>npm run dist</h3><p>electron-builder 第一次打包时会去下载 electron 的预编译文件, 这个文件很大, 它会默认去 github 上下载, 这时候如果没有翻墙工具就会很惨了.</p>
<p>我们可以使用 淘宝 提供的<a href="https://npm.taobao.org/mirrors/electron/" target="_blank" rel="external">镜像</a>来下载, 使用方法很简单, 在打包前先运行这个命令:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> ELECTRON_MIRROR=<span class="string">"https://npm.taobao.org/mirrors/electron/"</span></div></pre></td></tr></table></figure>
<p>原理可以看文章末尾的链接, 使用后真的是立竿见影, 大家可以对比下下载速度:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">MacBook-Air:convert2fnt bilt$ npm run dist</div><div class="line">Downloading tmp-6511-0-electron-v1.6.11-darwin-x64.zip</div><div class="line">[==&gt;                                          ] 8.8% of 46.08 MB (65.41 kB/s)</div><div class="line">MacBook-Air:convert2fnt bilt$ <span class="built_in">export</span> ELECTRON_MIRROR=<span class="string">"https://npm.taobao.org/mirrors/electron/"</span></div><div class="line">MacBook-Air:convert2fnt bilt$ npm run dist</div><div class="line">Downloading tmp-6579-0-electron-v1.6.11-darwin-x64.zip</div><div class="line">[============================&gt;                ] 66.1% of 46.08 MB (951.77 kB/s)</div></pre></td></tr></table></figure>
<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>最后上一下新版 convert2fnt 截图, 现在还有一些收尾的工作再做, 很快你就会见到它:</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fhkaqhm6dnj30n80ixq5f.jpg" alt=""></p>
<p>当策划再有类似的需求时, 可以直接扔给对方一个下载地址. 至于妹子, 当然是选择帮助她啦.</p>
<hr>
<p>参考资料:</p>
<ul>
<li><a href="http://www.jianshu.com/p/1c2ad78df208" target="_blank" rel="external">常用Electron App打包工具</a></li>
<li><a href="http://blog.tomyail.com/install-electron-slow-in-china/" target="_blank" rel="external">加速electron在国内的下载速度</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;大概是 14 年 2 月份的时候, 我使用刚学会 Python 写了一个小工具: &lt;a href=&quot;https://github.com/justbilt/convert2fnt&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;convert2fnt&lt;/a&gt;, 为此还写了一篇文章 &lt;a href=&quot;/2014/02/01/images_to_bmfont/&quot;&gt;将一堆图片转化为BMFont工具&lt;/a&gt; 介绍这个工具. 它的主要应用场景是这个样子的:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;美术妹子出了一堆图片字, 但是在程序中使用 BMFont 是更加方便的, 这个时候你可以强硬的要求美术妹子重新用 Glyphdesigner 制作一份字体. 但是也可以很温柔的告诉她: “你先去忙吧, 剩下的交给我了.”, 然后在妹子崇拜的目光下, 转身离去, 深藏功与名. &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="convert2fnt" scheme="http://blog.justbilt.com/tags/convert2fnt/"/>
    
      <category term="Electron" scheme="http://blog.justbilt.com/tags/Electron/"/>
    
  </entry>
  
  <entry>
    <title>优化游戏在 iOS 上的内购</title>
    <link href="http://blog.justbilt.com/2017/06/18/refine-game-ios-iap/"/>
    <id>http://blog.justbilt.com/2017/06/18/refine-game-ios-iap/</id>
    <published>2017-06-18T10:58:03.000Z</published>
    <updated>2017-07-09T03:09:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>首先我们看下 iOS 内购的流程, 让我们看下官方的的流程图:</p>
<p><img src="https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/StoreKitGuide/Art/remote_store_fetch_2x.png" alt=""></p>
<a id="more"></a>
<p>很简单, 是不是 ? 作为一款游戏来说, 实际情况要复杂的多.首先要思考这么几个问题:</p>
<ol>
<li>返回 Game 层时因为内存不足游戏重启了怎么办 ?</li>
<li>有玩家反应充值不到账怎么办 ?</li>
<li>如何防 IAP 破解 ?</li>
</ol>
<p>作为一款可能在 “国内” 发售的游戏, 如果你们没有考虑过这些问题, 那可能会遇到很多的 “惊喜”. 有一点需要记住, 千万不要低估玩家的 “创造力”. </p>
<p>首先, 请允许用十分简单的几行代码带大家回顾下 IAP 的实现, 因为后面我们要讨论的内容全部是基于这个前提的. </p>
<h1 id="IAP-的代码实现"><a href="#IAP-的代码实现" class="headerlink" title="IAP 的代码实现"></a>IAP 的代码实现</h1><p>要开启内购很简单, 两个对象三个步骤就搞定了. </p>
<p>我们先来说说这两个对象, 分别是 <code>SKPaymentQueue</code> 和 <code>SKPaymentTransaction</code> , 前者是充值订单, 后者是充值队列.</p>
<h2 id="SKPaymentQueue"><a href="#SKPaymentQueue" class="headerlink" title="SKPaymentQueue"></a>SKPaymentQueue</h2><p>它是整个充值的核心, 负责串联充值的各个流程. 可以用这个对象实现发起购买, 恢复已经购买的物品, 结束购买, 监听充值事件等功能.</p>
<h2 id="SKPaymentTransaction"><a href="#SKPaymentTransaction" class="headerlink" title="SKPaymentTransaction"></a>SKPaymentTransaction</h2><p>前面说过它是充值的订单对象, 每一次充值的发起都会产生一个唯一的订单对象, 它记录有这个订单的状态, id, 时间, 收据的信息.</p>
<p>其中收据(<code>transactionReceipt</code>)是最重要的数据, 它是这次充值是否真正扣款成功的唯一条件. 我们要把它发送给我们的游戏服务器, 再向苹果的服务器进行验证.</p>
<p>下面来说说三个步骤:</p>
<h2 id="1-添加充值监听"><a href="#1-添加充值监听" class="headerlink" title="1. 添加充值监听"></a>1. 添加充值监听</h2><p>添加监听的逻辑很简单, 就下面这三行:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> ([<span class="built_in">SKPaymentQueue</span> defaultQueue]) &#123;</div><div class="line">    [[<span class="built_in">SKPaymentQueue</span> defaultQueue] addTransactionObserver:<span class="keyword">self</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>但是这个 <code>self</code> 必须是一个实现了 <code>SKPaymentTransactionObserver</code> 的类的实例, 当有充值的事件时, 类的 <code>updatedTransactions</code> 函数会被调用:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//.h</span></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">IAPHelper</span> : <span class="title">NSObject</span> &lt;<span class="title">SKPaymentTransactionObserver</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">//.m</span></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">IAPHelper</span></span></div><div class="line">- (<span class="keyword">void</span>)paymentQueue:(<span class="built_in">SKPaymentQueue</span> *)queue updatedTransactions:(<span class="built_in">NSArray</span> *)transactions</div><div class="line">&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="built_in">SKPaymentTransaction</span> *transaction <span class="keyword">in</span> transactions)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">switch</span> (transaction.transactionState)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">case</span> <span class="built_in">SKPaymentTransactionStatePurchased</span>: </div><div class="line">                <span class="comment">// 处理支付成功</span></div><div class="line">                [[<span class="built_in">SKPaymentQueue</span> defaultQueue] finishTransaction: transaction];</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="built_in">SKPaymentTransactionStateFailed</span>: <span class="comment">// 支付失败</span></div><div class="line">                <span class="comment">// 处理支付失败</span></div><div class="line">                [[<span class="built_in">SKPaymentQueue</span> defaultQueue] finishTransaction: transaction];</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="built_in">SKPaymentTransactionStateRestored</span>: <span class="comment">// 恢复内购</span></div><div class="line">                <span class="comment">// 处理恢复内购</span></div><div class="line">                [[<span class="built_in">SKPaymentQueue</span> defaultQueue] finishTransaction: transaction];</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<h2 id="2-请求商品数据"><a href="#2-请求商品数据" class="headerlink" title="2. 请求商品数据"></a>2. 请求商品数据</h2><p>在开始购买之前, 我们需要知道商品的数据, 比如价格, 描述之类的, 这就需要我们先请请求商品的数据:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">SKProductsRequest</span>* request = [[<span class="built_in">SKProductsRequest</span> alloc] initWithProductIdentifiers:@[<span class="string">@"com.xxx.xxx.01"</span>, <span class="string">@"com.xxx.xxx.02"</span>]];</div><div class="line">request.delegate = <span class="keyword">self</span>;</div><div class="line">[request start];</div></pre></td></tr></table></figure>
<p>上面就是请求商品的代码, 商品的 id 列表是需要我们自己准备的. 请求的结果会通过一个函数来通知我们, 同样我们需要实现一个代理 <code>SKProductsRequestDelegate</code>:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//.h</span></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">IAPHelper</span> : <span class="title">NSObject</span> &lt;<span class="title">SKProductsRequestDelegate</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">//.mm</span></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">IAPHelper</span></span></div><div class="line">- (<span class="keyword">void</span>)productsRequest:(<span class="built_in">SKProductsRequest</span> *)request didReceiveResponse:(<span class="built_in">SKProductsResponse</span> *)response &#123;</div><div class="line">    <span class="built_in">NSArray</span>* products = response.products;</div><div class="line">    <span class="comment">// products 就是商品的列表</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<h2 id="3-购买"><a href="#3-购买" class="headerlink" title="3. 购买"></a>3. 购买</h2><p>发起一次购买的逻辑:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">SKPayment</span> *payment = [<span class="built_in">SKPayment</span> paymentWithProduct:<span class="string">@"com.xxx.xxx.01"</span>];</div><div class="line"></div><div class="line"><span class="keyword">if</span> ([<span class="built_in">SKPaymentQueue</span> defaultQueue]) &#123;</div><div class="line">    [[<span class="built_in">SKPaymentQueue</span> defaultQueue] addPayment:payment];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面就会进入到我们之前添加的那个充值状态的监听逻辑中去.</p>
<h1 id="充值流程的优化"><a href="#充值流程的优化" class="headerlink" title="充值流程的优化"></a>充值流程的优化</h1><p>流程方面, 我们大概经过了这么下面几个阶段.</p>
<h2 id="野生蛮长的第一阶段"><a href="#野生蛮长的第一阶段" class="headerlink" title="野生蛮长的第一阶段"></a>野生蛮长的第一阶段</h2><p>这一阶段的特征是: <code>先完成交易, 后处理订单</code>, 如果仔细观察上面 <code>updatedTransactions</code> 的逻辑的话, 可以看到这样的一行代码:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[[<span class="built_in">SKPaymentQueue</span> defaultQueue] finishTransaction: transaction];</div></pre></td></tr></table></figure>
<p>这行代码的意义就是标记这个订单已经完成了, 苹果从此以后不会再去通知你这个订单的任何消息了. 在调用这行代码之前, 我们会去处理一些充值结果的逻辑, 其中充值成功我们是要去苹果验证收据的.</p>
<p>但是验证的这个过程是异步的, 所以可能发生的问题就是:</p>
<blockquote>
<p>在验证结果回来之前就关闭了订单.</p>
</blockquote>
<p>因此若是验证的过程不够顺利, 比如网络状况不佳, 应用意外退出, 就会导致玩家的这次充值没有到账.</p>
<h2 id="始料不及的第二阶段"><a href="#始料不及的第二阶段" class="headerlink" title="始料不及的第二阶段"></a>始料不及的第二阶段</h2><p>有了上面那个问题, 我们不禁会想 ? 是不是可以等收到验证结果再去完成订单. 答案是肯定的, 我们确实可以这样做, 苹果也很仁义, 没有完成的订单会在下次请求商品时再次通知我们充值成功.</p>
<p>简单验证之后, 我们修改了充值的逻辑, 信心满满的上线了. 上线之初确实很顺利, 反馈充值不到账的玩家数量降低了很多, 我们都陷入了巨大的喜悦之中, 再也不会有玩家反应充值不到账了, oh yeah ! </p>
<p>然后, 后面发生的事情却是我们始料不及的. 我们陆续收到了用户声泪俱下的控诉, 自己是多么多么的热爱这款游戏, 但是却无法享受充值带来的乐趣. 起初还只是可能不到账, 现在则是某一个充值项完全无法购买.</p>
<p>在诸多玩家的控诉中, 我们逐渐还原了问题的成因. 某一次充值成功后游戏重启, 没有收到钻石, 再次购买该商品则会提示:</p>
<p><img src="http://ww1.sinaimg.cn/large/7f870d23ly1fgw9pxzo6ej206q04jt96.jpg" alt=""></p>
<blockquote>
<p>您已购买此 App 内购买项目。此项目将免费恢复。</p>
</blockquote>
<p>根据这个反馈可以很轻易的推断出是因为我们没有 <code>finishTransaction</code> 某一笔订单的原因, 但是却很难重现玩家所遇到的问题. 我们也复现过这个问题, 但是都能够在重启后自动解决. 我们也加了很多埋点去统计玩家的日志, 发现玩家似乎进入了一个卡单的状态, 程序无法获取到某些未完成的订单.</p>
<p>这个问题困扰了我们好久, 而且反馈的玩家越来越多, 有的玩家甚至已经没有可以能够购买的商品了.</p>
<h2 id="键入佳境的第三阶段"><a href="#键入佳境的第三阶段" class="headerlink" title="键入佳境的第三阶段"></a>键入佳境的第三阶段</h2><p>虽然上面的问题我们可以将锅甩给苹果, 但是实在受到损失的是我们, 因此还是需要解决这个问题. 经过讨论之后, 我们将目光又转回了第一阶段的方案, 看能否改进哪个方案. </p>
<blockquote>
<p>我们可以先将订单数据保存在本地, 然后发起验证请求, 关闭订单, 等验证成功后删除本地保存的订单.</p>
</blockquote>
<p>下次启动游戏或者充值时, 我们可以先检查下本地是否有缓存的订单, 有的话就先尝试验证这个订单. 虽然还有一些瑕疵, 比如玩家删除掉应用后就再也找不回之前的订单了, 但是已经是一个很不错的方案了.</p>
<p>下面我们来实现一下:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">NSString</span>*)getRecordTransaction</div><div class="line">&#123;</div><div class="line"><span class="meta">#if USE_ICLOUD_STORAGE</span></div><div class="line">    <span class="built_in">NSUbiquitousKeyValueStore</span> *storage = [<span class="built_in">NSUbiquitousKeyValueStore</span> defaultStore];</div><div class="line"><span class="meta">#else</span></div><div class="line">    <span class="built_in">NSUserDefaults</span> *storage = [<span class="built_in">NSUserDefaults</span> standardUserDefaults];</div><div class="line"><span class="meta">#endif</span></div><div class="line">    </div><div class="line">    <span class="built_in">NSArray</span> *saved_transactions = [storage arrayForKey:<span class="string">@"transactions"</span>];</div><div class="line">    <span class="keyword">if</span> (!saved_transactions or [saved_transactions count] &lt;= <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span> nullptr;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> [saved_transactions objectAtIndex:<span class="number">0</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)recordTransaction:(<span class="built_in">NSString</span> *)transaction</div><div class="line">&#123;</div><div class="line"><span class="meta">#if USE_ICLOUD_STORAGE</span></div><div class="line">    <span class="built_in">NSUbiquitousKeyValueStore</span> *storage = [<span class="built_in">NSUbiquitousKeyValueStore</span> defaultStore];</div><div class="line"><span class="meta">#else</span></div><div class="line">    <span class="built_in">NSUserDefaults</span> *storage = [<span class="built_in">NSUserDefaults</span> standardUserDefaults];</div><div class="line"><span class="meta">#endif</span></div><div class="line">    </div><div class="line">    <span class="built_in">NSArray</span> *saved_transactions = [storage arrayForKey:<span class="string">@"transactions"</span>];</div><div class="line">    <span class="keyword">if</span> (!saved_transactions) &#123;</div><div class="line">        <span class="comment">// Storing the first receipt</span></div><div class="line">        [storage setObject:@[transaction] forKey:<span class="string">@"transactions"</span>];</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// Adding another receipt</span></div><div class="line">        <span class="built_in">NSArray</span> *updated_transactions = [saved_transactions arrayByAddingObject:transaction];</div><div class="line">        [storage setObject:updated_transactions forKey:<span class="string">@"transactions"</span>];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    [storage synchronize];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)removeRecordTransaction:(<span class="built_in">NSString</span> *)purchase_id transactionId:(<span class="built_in">NSString</span>*) transaction_id</div><div class="line">&#123;</div><div class="line"><span class="meta">#if USE_ICLOUD_STORAGE</span></div><div class="line">    <span class="built_in">NSUbiquitousKeyValueStore</span> *storage = [<span class="built_in">NSUbiquitousKeyValueStore</span> defaultStore];</div><div class="line"><span class="meta">#else</span></div><div class="line">    <span class="built_in">NSUserDefaults</span> *storage = [<span class="built_in">NSUserDefaults</span> standardUserDefaults];</div><div class="line"><span class="meta">#endif</span></div><div class="line">    </div><div class="line">    <span class="built_in">NSMutableArray</span> *saved_transactions = [<span class="built_in">NSMutableArray</span> arrayWithArray:[storage arrayForKey:<span class="string">@"transactions"</span>]];</div><div class="line">    <span class="keyword">if</span> (!saved_transactions or [saved_transactions count] &lt;= <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="built_in">NSString</span>* transaction <span class="keyword">in</span> saved_transactions) &#123;</div><div class="line">        <span class="keyword">if</span> ([transaction rangeOfString:purchase_id].location != <span class="built_in">NSNotFound</span> and (not transaction_id or ([transaction rangeOfString:transaction_id].location != <span class="built_in">NSNotFound</span>))) &#123;</div><div class="line">            [saved_transactions removeObjectAtIndex:index];</div><div class="line">            [storage setObject:saved_transactions forKey:<span class="string">@"transactions"</span>];</div><div class="line">            [storage synchronize];</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        index = index + <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里我们实现了存储, 获取, 删除的逻辑, 只是参数是 <code>NSString</code> 类型而不是 <code>SKPaymentTransaction</code>. 它其实是 Transaction 的一些有用的数据和我们自己的一些信息放的一个到了一个 <code>NSDictionary</code> 中, 然后将这个 dict 转化为 json 的字符串, 这样做是为了方便存储.</p>
<h2 id="锦上添花的第四阶段"><a href="#锦上添花的第四阶段" class="headerlink" title="锦上添花的第四阶段"></a>锦上添花的第四阶段</h2><p>其实第三阶段的逻辑已经很严谨了, 我们为了更好的了解玩家的充值行为, 加了很多的日志在这里:</p>
<ol>
<li>我们存下了玩家的所有充值结果, 成功的, 失败的, 取消的, 异常的.</li>
<li>我们存下了玩家在充值界面的各种操作, 比如点击按钮, 界面跳转等.</li>
</ol>
<p>在合适的时候, 将这些日志发送到服务器. 这些日志将会成为后面分析玩家行为, 解决纠纷的重要依据.</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>我用 ProcessOn 制作了一个全新的流程图, 地址在<a href="https://www.processon.com/view/link/594e7af4e4b0ad619ac50bd4" target="_blank" rel="external">这里</a>:</p>
<p><img src="http://ww1.sinaimg.cn/large/7f870d23ly1fgwqn64m5sj20ng09laai.jpg" alt=""></p>
<p>现在在回答下上面提出的几个问题:</p>
<h2 id="1-返回-Game-层时因为内存不足游戏重启了怎么办"><a href="#1-返回-Game-层时因为内存不足游戏重启了怎么办" class="headerlink" title="1. 返回 Game 层时因为内存不足游戏重启了怎么办 ?"></a>1. 返回 Game 层时因为内存不足游戏重启了怎么办 ?</h2><p>答: 我们在本地存储了充值订单, 游戏会重启, 但这个本地存储不会自动删除.</p>
<h2 id="2-有玩家反应充值不到账怎么办"><a href="#2-有玩家反应充值不到账怎么办" class="headerlink" title="2. 有玩家反应充值不到账怎么办 ?"></a>2. 有玩家反应充值不到账怎么办 ?</h2><p>答: 这里我们要解决两个问题:</p>
<ol>
<li>是否真的没有到账 ?</li>
</ol>
<p>可能是实际已经到账了, 只是玩家没有发现, 这个需要后端查询玩家的钻石变化后向玩家解释清楚.</p>
<ol>
<li>是否真的充值成功 ?</li>
</ol>
<p>这个首先要玩家提供苹果充值收据邮件截图, 但是这个是可以伪造的, 但是可以阻挡一部分心怀不轨的玩家. 再根据我们前面收集的日志, 加上这个账号历史行为作出一个判断, 是否要给这个玩家补单.</p>
<h2 id="3-如何防-IAP-破解"><a href="#3-如何防-IAP-破解" class="headerlink" title="3. 如何防 IAP 破解 ?"></a>3. 如何防 IAP 破解 ?</h2><p>这个对于网游来说, 很简单, 就像在服务器端向苹果充值服务器发起验证. 需要注意的是: 服务器端在向苹果验证收据时, 一定要先检查<code>订单的唯一性</code>, <code>充值时间</code>, <code>商品id</code> 是否正常.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先我们看下 iOS 内购的流程, 让我们看下官方的的流程图:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/StoreKitGuide/Art/remote_store_fetch_2x.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://blog.justbilt.com/tags/iOS/"/>
    
      <category term="Quick-Cocos2d-x" scheme="http://blog.justbilt.com/tags/Quick-Cocos2d-x/"/>
    
      <category term="IAP" scheme="http://blog.justbilt.com/tags/IAP/"/>
    
  </entry>
  
  <entry>
    <title>Quick-cocos2d-x 中的多语言</title>
    <link href="http://blog.justbilt.com/2017/06/03/quick-x-i18n/"/>
    <id>http://blog.justbilt.com/2017/06/03/quick-x-i18n/</id>
    <published>2017-06-03T12:30:35.000Z</published>
    <updated>2017-07-09T03:09:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>其实本来我的标题是 “Quick-cocos2d-x 中的国际化与本地化”, 多语言虽然是其中的主要内容, 但还有很多额外的工作.</p>
<p>比如: 在韩国上线的游戏必须在游戏第一次启动时弹出一个内容十分长的用户协议, 用户同意后方可继续游戏; 比如很多赌博性质的活动(抽奖, 拉霸, 转盘)都需要修改为其他表现形式. 还有一些技术方面的要求比如游戏用户的数据不能存在 cache 目录下等等.</p>
<p>每个国家和地区的要求都不尽相同, 有的是硬性的法律法规要求, 有的则是照顾到当地风俗习惯以提高用户体验. 当然, 这些并不在我们这次讨论范畴之内, 等我们的经历足够丰富之后可以再次和大家分享一下.</p>
<a id="more"></a>
<p>今天, 主要和大家说说多语言.</p>
<h1 id="一-策略"><a href="#一-策略" class="headerlink" title="一. 策略"></a>一. 策略</h1><h2 id="1-语言代码"><a href="#1-语言代码" class="headerlink" title="1. 语言代码"></a>1. 语言代码</h2><p>就是不同语言我们需要一个 id 与之对应, 这个有很多种选择, 我们选择了<a href="https://msdn.microsoft.com/en-us/library/hh456380.aspx" target="_blank" rel="external">微软翻译的代码</a>:</p>
<table>
<thead>
<tr>
<th>Language Code</th>
<th>English Name</th>
</tr>
</thead>
<tbody>
<tr>
<td>zh-CHS</td>
<td>Chinese Simplified</td>
</tr>
<tr>
<td>zh-CHT</td>
<td>Chinese Traditional</td>
</tr>
<tr>
<td>en</td>
<td>English</td>
</tr>
</tbody>
</table>
<h2 id="2-多语言文本-id"><a href="#2-多语言文本-id" class="headerlink" title="2. 多语言文本 id"></a>2. 多语言文本 id</h2><p>我们的策略很简单, 每一个多语言文本都有一个唯一 id, 每一个语言都是由多个 <code>id: text</code> 组成的 json 文件, 如下所示:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"1493084502"</span>: <span class="string">"积分兑换超级大奖"</span>,</div><div class="line">  <span class="attr">"1493084508"</span>: <span class="string">"[day]天[hour]小时后结束"</span>,</div><div class="line">  <span class="attr">"1493172258"</span>: <span class="string">"活动积分"</span>,</div><div class="line">  <span class="attr">"1493723018"</span>: <span class="string">"7日活动积分"</span>,</div><div class="line">  <span class="attr">"1493731515"</span>: <span class="string">"该功能暂未开启, 请耐心等待."</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在游戏初始化的时候选择不同语言的 json 加载, 然后有一个函数 <code>tr</code> 接受 id 返回 text, 这就是我们全部的策略. 就是这么简单的策略, 我们也踩了不少坑.</p>
<p>最开始, 我们是打算弄一个自增的 id, 我们规定了一个从 <code>100000</code> 开始, 每次自增 10 这样的一个 id 生成策略, 之所以自增 10 是考虑到插入 id 的需求. 我们自以为这个策略很鲁棒, 却还是栽了跟头:</p>
<blockquote>
<p>合并时会冲突</p>
</blockquote>
<p>我们不同的功能是在不同的分支上做的, 完成之后会合并到主分支上. 大家在不同的分支上开发不同的功能时, 没有考虑到多语言后期合并冲突的问题, 而且这个冲突解决起来很麻烦, 得为冲突中的一方分配新的 id, 还得将代码中的 id 都替换掉, 这个过程是十分容易出错的. 怎么办 ?</p>
<p>我们也想过规定不同的 id 区间, 不同的模块有着不同的 id 起始值, 这样虽然一定程度上解决了模块间冲突的问题, 就算忽略规定这个 id 起始值所带来的额外工作, 多人协作的同一模块怎么办 ? 小伙伴们是不是还得提心吊胆, 小心翼翼的工作 ? 这可不是我们的风格.</p>
<p>就在我一筹莫展的时候, 我偶然间发现了一个东西: <code>时间戳</code>, 我们可以用这个做 id 呀 ! 虽然理论上还是有可能冲突, 但是两个多语言 id 在同一秒内生成的概率又能有多高呢 ?    </p>
<p>这里还要说说为什么我们没用使用 <strong>英文意义</strong> 作为 id 呢 ? 诚然英文 id 有更高的可读性, 有两个原因导致我没有选择它:</p>
<ol>
<li>小伙伴们的英文水平参差不齐, 如果使用英文 id 的话, 很有可能会出现词不达意的情况, 反而降低可读性.</li>
<li>一个 id 所代表意思可能会发生变化, 如果变了, 是否要修改所有的引用呢 ?</li>
</ol>
<h2 id="3-占位符与格式化"><a href="#3-占位符与格式化" class="headerlink" title="3. 占位符与格式化"></a>3. 占位符与格式化</h2><p>我们一开始也是使用 <code>%d</code> <code>%s</code> 之类的东西做占位符, 但是这些东西是严格以来占位符及参数的顺序来替换的, 而同一个占位符在不同语言中的的位置可能是不同的. 比如:</p>
<blockquote>
<p>中文: “军官统御等级每增加 %d(1)，增加带兵量 %d(10)”<br>英文: “The size of the troop increase %d(10) by officer’s Command Level increase %d(1)”</p>
</blockquote>
<p>大家可以看到, 这两种语言下两个占位符的顺序是完全相反的. 如果我们使用这种方式来的话, 就会对玩家造成误解. 那么我们应该怎么做呢?</p>
<blockquote>
<p>中文: “军官统御等级每增加 [lv](1)，增加带兵量 [amount](10)“<br>英文: “The size of the troop increase [amount](10) by officer’s Command Level increase [lv](1)“</p>
</blockquote>
<p>我们使用<code>明确意义的占位符</code>来占位.</p>
<h2 id="4-图片的多语言"><a href="#4-图片的多语言" class="headerlink" title="4. 图片的多语言"></a>4. 图片的多语言</h2><p>我在一篇文章中看到说要尽可能的避免使用带有文字的图片, 但是这种需求是无法避免的. 如果实现不同语言下用不同的图片呢 ? 我们的做法是给这个图片的命名中加入标记, 标记这是一个多语言图片, 在通过一个函数来获得真正的图片路径.</p>
<p>例如: 有一个图片的路径是 <code>images/logo.png</code>, 我们需要修改为 <code>images/logo[zh-CHS].png</code>, 标记这是一个中文下的图片, 同理会有一个 <code>images/logo[en].png</code>. 真正加载图片的时候, 会通过函数替换使用当前语言替换掉里面的占位符.</p>
<h1 id="二-代码支持"><a href="#二-代码支持" class="headerlink" title="二. 代码支持"></a>二. 代码支持</h1><h2 id="1-当前语言的确定"><a href="#1-当前语言的确定" class="headerlink" title="1. 当前语言的确定"></a>1. 当前语言的确定</h2><p>一开始我们是直接使用的 <code>device.language</code> 来确定当前语言的, 但实际情况要复杂的多. </p>
<h3 id="1-语言残缺"><a href="#1-语言残缺" class="headerlink" title="1). 语言残缺"></a>1). 语言残缺</h3><p>cocos 默认只支持<strong>cn：中文, fr：法语, it：意大利语, gr：德语, sp：西班牙语, ru：俄语, jp：日语, en：英语</strong> 这几种语言, 如果我们要支持一个这里面没有的语言怎么办 ?</p>
<p>我们需要分别从 Android 和 iOS 哪里获取到设备的当前语言 <code>language code</code>, 然后在 lua 中进行判断.</p>
<p>Android:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getLanguageCode</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> Locale.getDefault().toString();&#125;</div></pre></td></tr></table></figure>
<p>iOS:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSString</span>* language_code = [[<span class="built_in">NSLocale</span> preferredLanguages] objectAtIndex:<span class="number">0</span>];</div></pre></td></tr></table></figure>
<h3 id="2-简体-繁体的确定"><a href="#2-简体-繁体的确定" class="headerlink" title="2). 简体/繁体的确定"></a>2). 简体/繁体的确定</h3><p>这个确实值得拿出来一说, 这个 language_code 其实是有一套标准的, 但这个标准有好几个版本, Android 和 iOS 返回的可能不是一个标准, iOS 不同版本可能返回的不是同一个标准, cocos 原生的那个写法实际上是有漏洞的, 就中文来说会有这么几个写法:</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">zh-CHS, zh-Hans, zh-CHT, zh-Hant, zh-cn, zh-tw, , zh-mo, zh-sg, zh-hk</div></pre></td></tr></table></figure>
<p>最终我们需要把这些可能转化为两种 <code>简体/繁体</code>, 我们是这么做的:</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">local</span> language = language_code</div><div class="line"><span class="keyword">if</span> <span class="built_in">string</span>.startswith(language, <span class="string">"zh"</span>) <span class="keyword">then</span></div><div class="line">    <span class="keyword">if</span> <span class="built_in">string</span>.<span class="built_in">find</span>(language,<span class="string">"Hans"</span>) <span class="keyword">then</span></div><div class="line">        language = <span class="string">"zh-CHS"</span></div><div class="line">    <span class="keyword">elseif</span> <span class="built_in">string</span>.<span class="built_in">find</span>(language,<span class="string">"Hant"</span>) <span class="keyword">then</span></div><div class="line">        language = <span class="string">"zh-CHT"</span></div><div class="line">    <span class="keyword">elseif</span> <span class="built_in">string</span>.<span class="built_in">find</span>(language,<span class="string">"TW"</span>) <span class="keyword">then</span></div><div class="line">        language = <span class="string">"zh-CHT"</span></div><div class="line">    <span class="keyword">elseif</span> language == <span class="string">"zh-cn"</span> <span class="keyword">or</span> language == <span class="string">"zh-mo"</span> <span class="keyword">or</span> language == <span class="string">"zh-sg"</span> <span class="keyword">then</span></div><div class="line">        language = <span class="string">"zh-CHS"</span></div><div class="line">    <span class="keyword">elseif</span> language == <span class="string">"zh-hk"</span> <span class="keyword">or</span> language == <span class="string">"zh-tw"</span> <span class="keyword">then</span></div><div class="line">        language = <span class="string">"zh-CHT"</span>    </div><div class="line">    <span class="keyword">else</span></div><div class="line">        language = <span class="string">"zh-CHS"</span></div><div class="line">    <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>同理, 不光中文是这样的, 英文也同样有很多方言. 所以我们不能用 <code>==</code> 来判断某个语言, 要用 <code>startswith</code> .</p>
<h3 id="3-考虑支持的语言列表和玩家存档"><a href="#3-考虑支持的语言列表和玩家存档" class="headerlink" title="3). 考虑支持的语言列表和玩家存档"></a>3). 考虑支持的语言列表和玩家存档</h3><p>要考虑这么两个问题, 通过上一步获取到一个你不支持的语言怎么办? 我们的做法是声明一个默认语言<em>(英语)</em>, 某个语言不支持就用这个语言.</p>
<p>同时如果游戏内有选择语言功能的话, 我们要优先使用玩家选择的语言.</p>
<p>声明支持的语言:</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">platform.language_support = </div><div class="line">&#123;</div><div class="line">  default = flavor.language.en,</div><div class="line">  support_list = &#123;</div><div class="line">    flavor.language.en,</div><div class="line">    flavor.language.zh_chs,</div><div class="line">    flavor.language.zh_cht,</div><div class="line">    flavor.language.ar,</div><div class="line">    flavor.language.ko,</div><div class="line">    flavor.language.th,</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>判断语言:</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> #(platform.language_support.support_list) &gt;= <span class="number">2</span> <span class="keyword">then</span></div><div class="line">    platform.language = Record.getLanguage()</div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">table</span>.contain(platform.language_support.support_list, platform.language) <span class="keyword">then</span></div><div class="line">      platform.language = platform.language_support.default</div><div class="line">    <span class="keyword">end</span></div><div class="line"><span class="keyword">else</span></div><div class="line">  platform.language = platform.language_support.default</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<h2 id="2-tr"><a href="#2-tr" class="headerlink" title="2. tr"></a>2. tr</h2><p>tr 就是根据 id 返回真正文本的函数:</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">local</span> text = json.decode(<span class="built_in">io</span>.readfile(cc.FileUtils:getInstance():fullPathForFilename((<span class="string">"native/"</span>..platform.language..<span class="string">".json"</span>))))</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">tr</span><span class="params">(_key)</span></span></div><div class="line">  <span class="keyword">if</span> <span class="keyword">not</span> _key <span class="keyword">then</span></div><div class="line">      <span class="keyword">return</span> <span class="string">"???"</span></div><div class="line">  <span class="keyword">end</span></div><div class="line">  <span class="keyword">return</span> text[<span class="built_in">tostring</span>(_key)] <span class="keyword">or</span> <span class="string">"404:"</span>..<span class="built_in">tostring</span>(_key)</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>很简单, 还有一些可以拓展的空间, 比如最近发现的同一个中文如何对应不同 case 英文的问题. 举个栗子: 道具的英文是 <code>item</code>, 我们可能很多地方都会用到这个单词, 但是不同的地方可能会有一些小的区别:</p>
<ol>
<li>主界面入口上需要显示为全大写: ITEM</li>
<li>行首的拼接需要首字母大写: Item</li>
<li>行中的拼接需要全小写: item</li>
</ol>
<p>这个难道要多用好几个 id 来实现吗 ? 我们可以通过 <code>tr</code> 的第二个参数来指定格式. </p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">tr(<span class="number">10000</span>, <span class="string">"upper"</span>) <span class="comment">-- 大写</span></div><div class="line">tr(<span class="number">10000</span>, <span class="string">"title"</span>) <span class="comment">-- 首字母大写</span></div><div class="line">tr(<span class="number">10000</span>) <span class="comment">-- 小写</span></div></pre></td></tr></table></figure>
<p>内部再处理下这个参数就可以实现同一个中文对应不同的英文了.</p>
<h2 id="3-formatex"><a href="#3-formatex" class="headerlink" title="3. formatex"></a>3. formatex</h2><p>上面说过有一个函数替换占位符, 其实现如下:</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">string.formatex</span><span class="params">(format, map)</span></span></div><div class="line">    <span class="built_in">format</span> = <span class="built_in">string</span>.<span class="built_in">gsub</span>(<span class="built_in">format</span>, <span class="string">"%[(.-)]"</span>, map)</div><div class="line">    <span class="keyword">return</span> <span class="built_in">format</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="comment">-- example</span></div><div class="line"><span class="built_in">string</span>.formatex(<span class="string">"[attacker]砍了[defender]一刀, 造成了[damage]伤害"</span>, &#123;</div><div class="line">  attacker = <span class="string">"张三"</span>,</div><div class="line">  defender = <span class="string">"李四"</span>,</div><div class="line">  damage = <span class="number">10</span>,</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>很方便的有木有 ?</p>
<h1 id="三-UI-的适配"><a href="#三-UI-的适配" class="headerlink" title="三. UI 的适配"></a>三. UI 的适配</h1><h2 id="1-多个横向排版-Label"><a href="#1-多个横向排版-Label" class="headerlink" title="1. 多个横向排版 Label"></a>1. 多个横向排版 Label</h2><p>我们先来看两张图:</p>
<p><img src="http://ww1.sinaimg.cn/large/7f870d23ly1fgo6l8umlkj20u007p759.jpg" alt=""></p>
<p><img src="http://ww1.sinaimg.cn/large/7f870d23ly1fgo6o3ya7xj20u007pab6.jpg" alt=""></p>
<p>上图中的左侧的 Label 在不同语言下的宽度是不一样的, 如果我们不想在代码中手动调整的话有这么几个办法:</p>
<ol>
<li>使用一个容器存放多个 Label, 容器会自动排版多个元素的位置</li>
<li>在编辑 UI 时就预留好可一定的空间</li>
<li>如果只有两个 Lable 的话, 左侧的右对齐, 右侧的左对齐</li>
</ol>
<h2 id="2-Label-Overflow"><a href="#2-Label-Overflow" class="headerlink" title="2. Label Overflow"></a>2. Label Overflow</h2><p>这个概念是从 Cocos Creater 哪里找到的, 如果一个 Label 的实际尺寸超出了其在 UI 编辑时设定的最大范围的话如何处理呢 ?</p>
<ol>
<li>缩小 Lable 的字体尺寸</li>
<li>多余的子使用 … 代替</li>
<li>增大 Label 的高度</li>
</ol>
<p>我在 Quick-x 搞了一个很简陋的实现, 原理就是弄一个死循环, 判断尺寸超了就缩小一个单位, 但是效率不高, 就不贴实现了. </p>
<h2 id="3-阿拉伯语的适配"><a href="#3-阿拉伯语的适配" class="headerlink" title="3. 阿拉伯语的适配"></a>3. 阿拉伯语的适配</h2><p>大家都知道阿拉伯语的阅读顺序是从右往左的, 因此我们的 UI 最好也能是从右往左的. 但是除非从立项一开始就料想到了这一点, 否则更改全部 UI 是不现实的. </p>
<p>但是我们可以修改部分 UI, 如上面我们说的 <strong>横向排列的多个UI</strong> , 如果我们采用一个容器来实现的话, 那么很容易的实现容器内的元素顺序逆转.</p>
<p>我们按照这个思路实现了一个 BoxLayout , 在阿语下 layout 时会从元素的最后一个开始, 反向排版.</p>
<p>另外一个特殊处理就是 RichLabel, 我们自己实现了一个按字符遍历的富文本. 但是阿语下这个实现几乎变得不可用, 于是在阿语下我们使用普通文本来替换了富文本.</p>
<h1 id="三-外部工具"><a href="#三-外部工具" class="headerlink" title="三. 外部工具"></a>三. 外部工具</h1><h2 id="1-多语言转换工具"><a href="#1-多语言转换工具" class="headerlink" title="1. 多语言转换工具"></a>1. 多语言转换工具</h2><p>json 作为程序读取的格式是没有什么问题的, 但是用来给翻译人员来翻译就很不方便了, excel 则是一个很不错的选择. 因此我们实现了一套 <code>json &gt; excel</code> 和 <code>excel &gt; json</code> 工具用来做这个转换.</p>
<p>同时, 为了能更高效的处理各种需求, 我们还有 diff, format, deduplicate 工具.</p>
<h2 id="2-多语言提取工具"><a href="#2-多语言提取工具" class="headerlink" title="2. 多语言提取工具"></a>2. 多语言提取工具</h2><p>我们的多语言有很多是配置在 excel 中的, 这些 excel 最终会转换为游戏的静态配置, 我们希望最终在游戏中读取的一个多语言的 id, 而不是一串文本. 这样做能够降低静态配置的文件大小, 因为我们的文本有很多是重复的.</p>
<p>因此我们实现了一个抽取工具, 能够为 excel 中的文本打上标记, 这样在转换的过程中就可以使用 id, 而不是文本了. 效果如下图, # 前是文本, 后面是 id:</p>
<p><img src="http://ww1.sinaimg.cn/large/7f870d23ly1fgp3n582xwj205902hgld.jpg" alt=""></p>
<p>我们用的编辑器 CocosBuilder , 很古老的一个 UI 编辑器, 因此也没有多语言的功能, 所以我们做了一个从 ccb 中提取多语言的工具. ccb 本身是一个 plist 的文件结构, 很多语言都有对应的解析库, 写起来很容易.</p>
<hr>
<p>参考资料:</p>
<ol>
<li><a href="https://zh.wikipedia.org/wiki/ISO_639" target="_blank" rel="external">https://zh.wikipedia.org/wiki/ISO_639</a></li>
<li><a href="https://www.zhihu.com/question/20797118" target="_blank" rel="external">https://www.zhihu.com/question/20797118</a></li>
<li><a href="http://www.gameres.com/thread_480715_1_1.html" target="_blank" rel="external">http://www.gameres.com/thread_480715_1_1.html</a> (前辈的踩坑指南, 推荐阅读)</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;其实本来我的标题是 “Quick-cocos2d-x 中的国际化与本地化”, 多语言虽然是其中的主要内容, 但还有很多额外的工作.&lt;/p&gt;
&lt;p&gt;比如: 在韩国上线的游戏必须在游戏第一次启动时弹出一个内容十分长的用户协议, 用户同意后方可继续游戏; 比如很多赌博性质的活动(抽奖, 拉霸, 转盘)都需要修改为其他表现形式. 还有一些技术方面的要求比如游戏用户的数据不能存在 cache 目录下等等.&lt;/p&gt;
&lt;p&gt;每个国家和地区的要求都不尽相同, 有的是硬性的法律法规要求, 有的则是照顾到当地风俗习惯以提高用户体验. 当然, 这些并不在我们这次讨论范畴之内, 等我们的经历足够丰富之后可以再次和大家分享一下.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Quick-Cocos2d-x" scheme="http://blog.justbilt.com/tags/Quick-Cocos2d-x/"/>
    
      <category term="i18n" scheme="http://blog.justbilt.com/tags/i18n/"/>
    
  </entry>
  
  <entry>
    <title>Quick-cocos2d-x 自定义头像</title>
    <link href="http://blog.justbilt.com/2017/04/23/quick-x-user-avatar/"/>
    <id>http://blog.justbilt.com/2017/04/23/quick-x-user-avatar/</id>
    <published>2017-04-23T13:54:41.000Z</published>
    <updated>2017-07-09T03:09:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间我们团队实现了游戏中自定义头像模块, 这是一个比较有意思的功能, 加上网上这方面的资料也不多, 所以给大家分享下我们的做法. </p>
<p>自定义头像这个功能牵扯到的内容还是比较多的, 一个人做的话需要技术储备比较大, 因此我们将这个任务做了如下的拆分:</p>
<ol>
<li>选择头像</li>
<li>上传头像</li>
<li>下载头像</li>
<li>显示头像</li>
</ol>
<p>每个人负责其中的一小部分内容, 再把这些小模块组合起来就完成了任务. </p>
<a id="more"></a>
<h1 id="一-选择头像"><a href="#一-选择头像" class="headerlink" title="一. 选择头像"></a>一. 选择头像</h1><p>头像选择这部分的内容基本上和 Quick 没有关系, 主要内容有:</p>
<ol>
<li>拍照/相册</li>
<li>剪裁</li>
<li>获取图像数据</li>
</ol>
<p>这部分逻辑 Android/iOS 都要单独实现, 我们自己从头写起恐怕不太现实, 毕竟我们不是专业做这个的, 不过不用担心, 已经有前辈们为我们造好了轮子. </p>
<p>Android 上我们选择是的 <a href="https://github.com/crazycodeboy/TakePhoto" target="_blank" rel="external">TakePhoto</a> 这个库, iOS 上我们选择的是 <a href="https://github.com/windshg/VPImageCropper" target="_blank" rel="external">VPImageCropper</a>, 具体接入方式大家查看官方文档就可以. 这两个库我们做了很微小的修改, 以适应项目的实际需求, 同时因为 Lua 这边对二进制的数据处理比较麻烦, 我们选择将图片数据进行 base64 编码后返回给 Lua 端.</p>
<h1 id="二-上传头像"><a href="#二-上传头像" class="headerlink" title="二. 上传头像"></a>二. 上传头像</h1><p>上传头像其实是比较简单的, 我们尝试过 tcp 和 http 这两种上传方式. 我们在尝试 tcp 上传的时候遇到了一个很棘手的问题, 就是发送数据过大会导致 tcp 连接断开. </p>
<p>这个问题十分诡异, 同样长度的数据, 在 macOS 和 iOS 上没有任何问题, 但是在 Android 上就不行, scoket 在发送数据一段时间后收到了 RST 指令, 紧接着链接就会断开. 和服务器同学研究一段时间后无果, 就放弃了这个问题, 转为使用 http 上传.</p>
<p>使用了 http 之后, 还是上传失败, 服务器收到的 post 请求中没有 body, 而客户端加日志显示数据没有问题都塞到 body 中了. 使用抓包工具分析后确实长度有问题, 这就十分诡异了. 在偶然间发现微信也会遇到图片发布出去的情况后, 我们分析是 wifi 有问题, 换了另一个网络之后就没有问题了.</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">local</span> req = network.createHTTPRequest(reponse, url, <span class="string">"POST"</span>)</div><div class="line"></div><div class="line">req:setTimeout(timeout)</div><div class="line">req:addRequestHeader(<span class="string">"Content-Type: mmf/bin"</span>)</div><div class="line">req:addRequestHeader(<span class="string">"Accept: mmf/bin"</span>)</div><div class="line">req:setPOSTData(imagedata)</div><div class="line"></div><div class="line">req:start()</div></pre></td></tr></table></figure>
<p>这是一段比较简单的 http 上传数据的代码示例, 这期间我还遇到了另一个诡异的问题, 就是客户端这里明明发送的是 POST 请求, 但是服务器收到的却是 GET, body 中没有数据, 同样的代码我们在 Mac 上使用模拟器是没有问题的, 非常诡异呀. http 在 Android 上的实现位于 QuickHTTPInterface.java 中, 经过在 Android 断点调试, 发现并没有调用 setRequestMethod . </p>
<p>原来这种 http 请求我们是封装了一层的, 这个 <code>POST</code> 和 <code>GET</code> 是通过参数传入的, 外部传入的其实是一个枚举. 然而在我之前的重构中, 修改了这个枚举的名字, 导致传入的值是 nil, 这就导致没有调用 createHTTPRequest 时没有传入 methed 参数, 默认就是 GET 类型的, 因为平台的 http 实现不同, 导致有些平台正常, 有些平台会出错.</p>
<p>上传头像的内容就是这些.</p>
<h1 id="三-下载头像"><a href="#三-下载头像" class="headerlink" title="三. 下载头像"></a>三. 下载头像</h1><p>对于这个问题, 我们开始还打算在 c++ 端用 curl 实现, 然后到处到 Lua 这边使用, 直到发现了 HttpClient 的 <code>saveResponseData</code> 接口. 调用了这个接口可以直接把 Response 中的数据保存在本地, 这样下载单个文件就搞定了. 下载代码如下:</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- http下载</span></div><div class="line"><span class="comment">--[[</span></div><div class="line">	@param string _url _url地址</div><div class="line">	@param string _savepath 指定的存储路径</div><div class="line">	@param function _callfunc 下载完成回调方法</div><div class="line">]]</div><div class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">_download</span><span class="params">(_url, _savepath, _callfunc)</span></span></div><div class="line">	<span class="keyword">local</span> req = network.createHTTPRequest(</div><div class="line">		<span class="function"><span class="keyword">function</span><span class="params">(event)</span></span></div><div class="line">            <span class="keyword">if</span> event.name == <span class="string">"completed"</span> <span class="keyword">then</span></div><div class="line"></div><div class="line">                <span class="comment">--判断是否下载成功</span></div><div class="line">                <span class="keyword">local</span> success = <span class="literal">false</span></div><div class="line">                <span class="keyword">local</span> code = event.request:getResponseStatusCode()</div><div class="line">                <span class="keyword">if</span> code == <span class="number">200</span> <span class="keyword">and</span> event.request:saveResponseData(_savepath) <span class="keyword">then</span></div><div class="line">                	success = <span class="literal">true</span></div><div class="line">                <span class="keyword">end</span></div><div class="line">                <span class="keyword">if</span> _callfunc <span class="keyword">then</span></div><div class="line">                	_callfunc(success, &#123;url = _url, req = event.request, <span class="built_in">path</span> = _savepath&#125;)</div><div class="line">                <span class="keyword">end</span></div><div class="line">            <span class="keyword">end</span></div><div class="line">        <span class="keyword">end</span>, _url, <span class="string">"GET"</span>)</div><div class="line">    req:setTimeout(<span class="number">60</span>)</div><div class="line">    req:start()</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>但是整个下载功能呢并没有这么简单, 我们应该考虑到 <code>本地缓存</code>, <code>去重</code>, <code>队列限制</code>等情况, 这样我们可以实现一个通用的下载模块, 不仅仅是为自定义头像功能, 其他的模块也可以使用.</p>
<h1 id="四-显示头像"><a href="#四-显示头像" class="headerlink" title="四. 显示头像"></a>四. 显示头像</h1><p>这个功能其实很简单了, 为了什么要单独拿出来说呢? 就是我们要实现的很优雅. 自定义头像这个功能可能不是一开始就提出的, 因为改了 Native 层的代码, 所以需要线上换包, 这就比较麻烦了, 所以我们这个模块要和之前的头像保持兼容. </p>
<p>我们游戏中的显示头像的地方有很多, 我们不能把下载的调用写的到处都是, 比较优雅的做法是实现一个头像控件, 在这个控件内部处理普通头像和自定义头像的逻辑. 为了提高用户体验, 下载的过程中我们可以显示一张替代图或者之前的普通头像.</p>
<hr>
<p>下面上一张最终的效果图:</p>
<p><img src="http://ww1.sinaimg.cn/large/7f870d23ly1ffd57bsbyij20f00qo0u0.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前段时间我们团队实现了游戏中自定义头像模块, 这是一个比较有意思的功能, 加上网上这方面的资料也不多, 所以给大家分享下我们的做法. &lt;/p&gt;
&lt;p&gt;自定义头像这个功能牵扯到的内容还是比较多的, 一个人做的话需要技术储备比较大, 因此我们将这个任务做了如下的拆分:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;选择头像&lt;/li&gt;
&lt;li&gt;上传头像&lt;/li&gt;
&lt;li&gt;下载头像&lt;/li&gt;
&lt;li&gt;显示头像&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;每个人负责其中的一小部分内容, 再把这些小模块组合起来就完成了任务. &lt;/p&gt;
    
    </summary>
    
    
      <category term="Quick-Cocos2d-x" scheme="http://blog.justbilt.com/tags/Quick-Cocos2d-x/"/>
    
  </entry>
  
  <entry>
    <title>洁癖患者的 Git GUI 指南</title>
    <link href="http://blog.justbilt.com/2017/04/12/the-git-for-neat-freak/"/>
    <id>http://blog.justbilt.com/2017/04/12/the-git-for-neat-freak/</id>
    <published>2017-04-12T15:34:12.000Z</published>
    <updated>2017-07-09T03:09:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间我看到了一篇文章, <a href="http://hungyuhei.github.io/2012/08/07/better-git-commit-graph-using-pull---rebase-and-merge---no-ff.html" target="_blank" rel="external">洁癖者用 Git：pull –rebase 和 merge –no-ff</a> , 发现和我们目前的工作流程很像, 区别在于我们是使用 GUI 工具来做的这些, 也做了一些新的尝试.</p>
<a id="more"></a>
<p>注: 阅读下面的文章前, 我默认你已经读过上面推荐的那篇文章, 本篇文章不会赘述其中的内容.</p>
<h1 id="一-pull-–rebase-和-merge-–no-ff"><a href="#一-pull-–rebase-和-merge-–no-ff" class="headerlink" title="一. pull –rebase 和 merge –no-ff"></a>一. pull –rebase 和 merge –no-ff</h1><p>使用软件: <a href="https://www.sourcetreeapp.com/" target="_blank" rel="external">SourceTree</a></p>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>SourceTree 需要更改这些偏好设置: </p>
<blockquote>
<p>Allow force push</p>
</blockquote>
<p>位于 General 标签, 如果有追踪的远端, 本地 rebase 后会造成本地提交历史和历史不一致, 必须强制推 (Force Push) 才能推送到远端. 勾选这个选项后, 会在 push 界面上多出一个 Force push 选项.</p>
<p><img src="https://ww1.sinaimg.cn/large/006tKfTcgy1feoct36xyhj30lx0k0whu.jpg" alt=""></p>
<blockquote>
<p>Use rebase instead of merge by default for tracked branches</p>
</blockquote>
<p>这个就是那篇文章中的 <code>git pull --rebase</code> , 勾选后 pull 界面上的 Rebase instead of merge 选项会默认处于勾选状态 .</p>
<blockquote>
<p>Do not fast-forward when merging, always create commit</p>
</blockquote>
<p>这个就是 <code>merge --no-ff</code> , 合并分支后, 总是会产生一次 Merge Commit .</p>
<blockquote>
<p>Display author date instead of commit data in log (可选)</p>
</blockquote>
<p>一旦 rebase 后, 提交时间就会变成 rebase 的时间, 影响判断, 如果勾选这个选项, 就会一直显示 commit 创建时的日期, 这条不是必须的, 大家根据自己需要选择.</p>
<h2 id="pull-–rebase"><a href="#pull-–rebase" class="headerlink" title="pull –rebase"></a>pull –rebase</h2><blockquote>
<p>git pull –rebase</p>
</blockquote>
<p><img src="https://ww1.sinaimg.cn/large/006tKfTcly1feohl206naj30mk0fajup.jpg" alt=""></p>
<p>如果打算 pull 一个 <strong>没有跟踪中</strong> 的远端分支, 即使你修改了偏好设置, <code>Rebase instead of merge</code> 选项也不会默认勾选, 需要手动勾选.</p>
<blockquote>
<p>git rebase <branch></branch></p>
</blockquote>
<p><img src="https://ww3.sinaimg.cn/large/006tKfTcly1feoifjhienj30jb0bz0xi.jpg" alt=""></p>
<p>假如想让 A 分支上的该动都基于 B 分支, 先保证你处于 A 分支, 在 BRANCHES 中 B 上右键选择 <code>Rebase current changes onto B</code> .</p>
<blockquote>
<p>rebase 冲突后的处理</p>
</blockquote>
<p>rebase 过程实际上可以理解为是将当前分支上的所有 commit 再一次次应用的过程, 那么如果其中一步冲突了怎么办?</p>
<p>rebase 会暂停下来, 等待你解决完冲突后的操作. 如果在终端中的话, 你有四个选项可选:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git rebase --<span class="built_in">continue</span> //继续</div><div class="line">git rebase --skip //跳过</div><div class="line">git rebase --abort //终止</div><div class="line">git rebase --quit //结束</div></pre></td></tr></table></figure>
<p>在 SourceTree 中, 我们解决完冲突后, 可以点击 <code>Commit</code> 按钮, 这时会出现下面这个界面:</p>
<p><img src="https://ww1.sinaimg.cn/large/006tKfTcly1feoohf4h49j30hs07u0u0.jpg" alt=""></p>
<p><code>Abort Rebase</code> , <code>Continue Rebase</code> 分别与 <code>--continue</code> 和 <code>--abort</code> 对应. 如果解决完冲突后这次 Commit 不包含任何 Changes 的话, 我们就需要 <code>--skip</code> 了, 很不幸的是 SourceTree 并没有提供这个选项, 只能在终端中操作.</p>
<h2 id="merge-–no-ff"><a href="#merge-–no-ff" class="headerlink" title="merge –no-ff"></a>merge –no-ff</h2><p><img src="https://ww2.sinaimg.cn/large/006tKfTcly1feoipaaqqoj30jb0c2tbm.jpg" alt=""></p>
<p>和 rebase 操作基本一致, 菜单选择 <code>Merge B into A</code>. 下面会弹出这个界面:</p>
<p><img src="https://ww4.sinaimg.cn/large/006tKfTcly1feois0fn45j30il08jwfl.jpg" alt=""></p>
<blockquote>
<p>Commit merged changes immediately</p>
</blockquote>
<p>勾选或如果合并没有冲突的话, 会自动提交这次 Merege Commit, 否则的话, 你需要手动提交.</p>
<blockquote>
<p>Include messages form commits being merged in merge commit</p>
</blockquote>
<p>会把这个分支上的所有的提交日志附加到 Merege Commit 的提交日志中.</p>
<h1 id="二-rebase-befroe-merge"><a href="#二-rebase-befroe-merge" class="headerlink" title="二. rebase befroe merge"></a>二. rebase befroe merge</h1><p>就是在 merge 前先 rebase, 假如我们想把 B 合并进 A 中, 应当先在 B 上面 rebase A, 再切换到 A 上面 merge B. 这样可以避免出现下面这样的历史:</p>
<p><img src="https://ww2.sinaimg.cn/large/006tKfTcly1feojg14lnjj301003q3yh.jpg" alt=""></p>
<p>这样做, 还会附带一个好处, 就是会使得这次 <code>Merege Commit</code> 非常的纯粹, 因为在 rebase 时已经把潜在的冲突都解决完了, 所以这次 merge 一定不会有冲突, 这样 Merege Commit 的改动就会和分支 B 的改动完全一致, 不会再有其他的改动(解决冲突时的修改).</p>
<h1 id="三-合并前整理分支"><a href="#三-合并前整理分支" class="headerlink" title="三. 合并前整理分支"></a>三. 合并前整理分支</h1><p>使用软件: <a href="http://gitup.co/" target="_blank" rel="external">GitUp</a></p>
<p>Gitup 功能十分神奇, 而且还提供了很强大的 undo/redo 操作, 所以可以很不负责任的说, 大家可以随意尝试其中的各种功能, 不必担心把仓库搞挂.</p>
<p>如果坚持使用 rebase 话, 就会明白 rebase 的复杂度, 是与这个分支上的 commit 次数有一定关系的. 所以我们可以在 rebase 前整理这个分支:</p>
<blockquote>
<p>合并相同功能的 Commit </p>
</blockquote>
<p><img src="https://ww2.sinaimg.cn/large/006tKfTcly1feok1ndseyj30pe0iemzi.jpg" alt=""></p>
<p>使用 gitup 打开仓库, 随便在一次 commit 上右键, 便可以看到上图的菜单. 这里面有所有的操作, 下面我来说一下常用的:</p>
<blockquote>
<p>Fixup with Parent / Squash with Parent</p>
</blockquote>
<p>作用都是将本次提交和上一次合并, 区别是后者可以同时修改提交日志.</p>
<blockquote>
<p>Swap with Parent / Child</p>
</blockquote>
<p>就是讲两次提交互换位置, 比如你有 A-B-C 三次提交, 你想把 A 和 C 合并, 但是中间隔着一个 B, 这时就是把 B 和 C 的位置交换后 Squash.</p>
<blockquote>
<p>Split</p>
</blockquote>
<p>将一次提交拆分为两次, 不过拆分粒度只能到文件级. 也很常用, 比如误将一些不属于这次提交做的改动提交了上去, 可以用这个拆分出来.</p>
<h1 id="四-后记"><a href="#四-后记" class="headerlink" title="四. 后记"></a>四. 后记</h1><p><img src="https://ww3.sinaimg.cn/large/006tKfTcly1feolo8so66j305k0m8gmk.jpg" alt=""></p>
<p>这个是我们坚持了一段时间之后的提交历史对比, 左侧杂乱无章, 犬牙呲互, 这是一条无法直视的提交历史, 右侧的则清晰不少. </p>
<p><img src="https://ww4.sinaimg.cn/large/006tKfTcly1feoluos10ej30n604hab9.jpg" alt=""></p>
<p>我们可以修改筛选器中的 <code>All Parents</code> 为 <code>First parent only</code>, 这样我们住分支上的历史便只剩下了 Merge Commit ,那么只看这些 Commit 便可以知道整个分支的进化历程.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前段时间我看到了一篇文章, &lt;a href=&quot;http://hungyuhei.github.io/2012/08/07/better-git-commit-graph-using-pull---rebase-and-merge---no-ff.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;洁癖者用 Git：pull –rebase 和 merge –no-ff&lt;/a&gt; , 发现和我们目前的工作流程很像, 区别在于我们是使用 GUI 工具来做的这些, 也做了一些新的尝试.&lt;/p&gt;
    
    </summary>
    
    
      <category term="git" scheme="http://blog.justbilt.com/tags/git/"/>
    
      <category term="neat-freak" scheme="http://blog.justbilt.com/tags/neat-freak/"/>
    
  </entry>
  
  <entry>
    <title>多说, 再见 !</title>
    <link href="http://blog.justbilt.com/2017/03/25/bye-duoshuo-bye-comment/"/>
    <id>http://blog.justbilt.com/2017/03/25/bye-duoshuo-bye-comment/</id>
    <published>2017-03-25T01:30:30.000Z</published>
    <updated>2017-07-09T03:09:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>大约是在前几天刷微博的时候看到有人说多说要关站了, 赶紧去备份评论 balabala … , 难以置信, 赶紧去我的邮箱找了下, 果然找到了这封邮件:</p>
<p><img src="https://ww3.sinaimg.cn/large/006tNbRwly1fdyu57rth7j30pi08bab4.jpg" alt=""></p>
<p>震惊 !!! 依然难以置信 !!!</p>
<a id="more"></a>
<p>我急忙把这个消息转发到了公司的微信群里, 却很快就被其他消息淹没, 没有激起一点浪花.</p>
<p><img src="https://ww2.sinaimg.cn/large/006tNbRwly1fdyuh2osr9j30bu0j2gmh.jpg" alt=""></p>
<p>他们可能也很奇怪, 多说是什么鬼, 关闭了和我有什么关系 ? 嗯哪, 毕竟写博和读博都只是小众的需求.</p>
<p>将时间拨回 2013 年, 那时我刚把博客从 WordPress 切换到 hexo, 那时 hexo 的默认评论还是 disqus 呢, 由于众所周知的原因, 速度非常慢. 经过一番查找, 选择了多说, 速度快, 还支持国内的各种社交账号登录, 免费, 很良心.</p>
<p><img src="https://ww4.sinaimg.cn/large/006tNbRwly1fdyujgpr90j30um0kk0wp.jpg" alt=""></p>
<p>我在新博客写的第一篇文章是 <a href="http://blog.justbilt.com/2013/11/03/elbow/">&lt;&lt;弯管(拐角)对方向的改变&gt;&gt;</a> ,时间 <code>2013/11/03</code>, 收到的第一条评论是:</p>
<p><img src="https://ww4.sinaimg.cn/large/006tNbRwly1fdyuxow26aj30nf022weq.jpg" alt=""></p>
<p>是 firedragonpzy 兄发来的[给力], 这么多年过去了, 不知他现在做什么?　</p>
<p>最后一篇有多说评论的文章是 <a href="http://blog.justbilt.com/2017/02/24/some-change-for-blog/">&lt;&lt;最近博客的一些变化&gt;&gt;</a>, 时间 <code>2017/02/24</code>, 是回复山人的吐槽:</p>
<p><img src="https://ww4.sinaimg.cn/large/006tNbRwly1fdyv73hz7fj30ng040aai.jpg" alt=""></p>
<p>所以, 你以为多说的关闭意味着什么 ? </p>
<blockquote>
<p>那时 cocos2d-x 还十分火爆,<br>那时我还在用 c++,<br>那年我才 21 岁.</p>
</blockquote>
<hr>
<p>好吧, 现在关闭装逼模式.</p>
<p>虽然用了这么多年的评论, 但正如 @王子亭 博主在<a href="https://jysperm.me/2016/05/remove-comments-and-wechat/" target="_blank" rel="external">这篇</a>文章中所言:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">从另一个角度来看，我写了这么多年博客，收到的大部分评论都和文章内容无关 —— 他们在把文章的评论当作留言板来使用，和我打个招呼或者询问一下近况。</div><div class="line">当然我也曾收到极少部分一些认真撰写的评论，我也希望继续给这些人留出一些空间：我会以邮件的形式接受文章评论，我会挑选其中对读者有价值的部分展示在文章的末尾。</div></pre></td></tr></table></figure>
<p>子亭同学说的特别好, 刚好借着多说关闭的机会, 我移除了博客中的评论系统, 只保留了 <code>关于</code> 这个灌水界面的评论, 还设立了一个小门槛, 只有拥有 github 账号的朋友才能评论.</p>
<p>以后便会省心不少吧.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;大约是在前几天刷微博的时候看到有人说多说要关站了, 赶紧去备份评论 balabala … , 难以置信, 赶紧去我的邮箱找了下, 果然找到了这封邮件:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ww3.sinaimg.cn/large/006tNbRwly1fdyu57rth7j30pi08bab4.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;震惊 !!! 依然难以置信 !!!&lt;/p&gt;
    
    </summary>
    
    
      <category term="duoshuo" scheme="http://blog.justbilt.com/tags/duoshuo/"/>
    
      <category term="comment" scheme="http://blog.justbilt.com/tags/comment/"/>
    
      <category term="blog" scheme="http://blog.justbilt.com/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>最近搞 iOS 版遇到的一些问题和技巧 (四)</title>
    <link href="http://blog.justbilt.com/2017/03/12/ios-dev-tips-4/"/>
    <id>http://blog.justbilt.com/2017/03/12/ios-dev-tips-4/</id>
    <published>2017-03-12T02:25:47.000Z</published>
    <updated>2017-07-09T03:09:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>这是这半年搞 iOS 时遇到的一些问题, 写下来, 希望会帮到大家. 因为时间精力有限, 有些问题, 并没有解决方案, 只是饶了过去.</p>
<a id="more"></a>
<h2 id="一-iOS-沙盒测试-无法连接到APPSTORE"><a href="#一-iOS-沙盒测试-无法连接到APPSTORE" class="headerlink" title="一. iOS 沙盒测试 无法连接到APPSTORE"></a>一. iOS 沙盒测试 无法连接到APPSTORE</h2><p>确定是测试机, 沙盒账号登录的也没有问题, 就是无法充值.</p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>换了一个测试机就好了</p>
<h2 id="二-xcodebuilder-exportArchive-dev-失败"><a href="#二-xcodebuilder-exportArchive-dev-失败" class="headerlink" title="二. xcodebuilder -exportArchive dev 失败"></a>二. xcodebuilder -exportArchive dev 失败</h2><p>这个问题发生在我们的 iOS 打包脚本中, 会报错:</p>
<blockquote>
<p>IDEDistribution: Step failed: <idedistributionthinningstep: 0x7fa72bbd50e0="">: Error Domain=IDEDistributionErrorDomain Code=14 “No applicable devices found.”</idedistributionthinningstep:></p>
</blockquote>
<h3 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h3><p>一开始我使用了老的 ipa 导出方案 <code>xcrun -sdk iphoneos PackageApplication</code> , 这样虽然可以导出了, 但是经常无法安装到测试机, 还得用 XCode 打开归档文件手动导出 dev 版本. 就这样凑活了一段时间后, 我终于下定决心解决这个问题了. 原来每次 <code>exportArchive</code> 会有有一个日志文件, 查看 /var/folders/…/IDEDistribution.standard.log 得知是我的 ruby 环境有问题:</p>
<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[NOTE]</div><div class="line">You may have encountered a bug in the Ruby interpreter or extension libraries.</div><div class="line">Bug reports are welcome.</div><div class="line">Don't forget to include the above Crash Report log file.</div><div class="line">For details: http://www.ruby-lang.org/bugreport.html</div></pre></td></tr></table></figure>
<p>在 StackOverflow 上找到了<a href="http://stackoverflow.com/questions/39634404/xcodebuild-exportarchive-no-applicable-devices-found/42027456#42027456" target="_blank" rel="external">这个解决方案</a>, 使用 <code>xcbuild-safe.sh</code> 替换 <code>xcodebuilder</code> 就好了</p>
<h2 id="三-You-must-supply-a-CFBundleIdentifier-for-this-request"><a href="#三-You-must-supply-a-CFBundleIdentifier-for-this-request" class="headerlink" title="三. You must supply a CFBundleIdentifier for this request"></a>三. You must supply a CFBundleIdentifier for this request</h2><p>上传 dis 包时遇到这个错误:</p>
<p><img src="https://ww3.sinaimg.cn/large/006tNbRwly1fdjuz90b3cj30w40g2aar.jpg" alt=""></p>
<h3 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案"></a>解决方案</h3><p>在<a href="http://www.jianshu.com/p/2d229dfb34a6" target="_blank" rel="external">这篇文章</a>中找到了解决方案:</p>
<blockquote>
<p>infor.plist表中Bundle OS Type code 栏为空或者非APPL<br>具体设置路径为，项目的TARGETS &gt;&gt; infor &gt;&gt; Custom iOS Target Properties &gt;&gt; Bundle OS Type code，检查是否为空或者其他。将该选项设置为 APPL。自此，重新上传成功。</p>
</blockquote>
<p>虽然解决了, 但是比较奇怪的是, 我好多项目没有设置也可以上传成功.</p>
<h2 id="四-连接-VPN-后有的-http-请求会失败"><a href="#四-连接-VPN-后有的-http-请求会失败" class="headerlink" title="四. 连接 VPN 后有的 http 请求会失败"></a>四. 连接 VPN 后有的 http 请求会失败</h2><p>这个很诡异呀, 不连接 VPN 没有任何问题.</p>
<h3 id="解决方案-3"><a href="#解决方案-3" class="headerlink" title="解决方案"></a>解决方案</h3><p>我在 Exception Domain 添加对应域名之后就可以访问了. 猜测是不是果爹对大陆 ip 放宽了要求 ? 哈哈哈</p>
<h2 id="五-This-action-could-not-be-completed-Try-again-22421"><a href="#五-This-action-could-not-be-completed-Try-again-22421" class="headerlink" title="五. This action could not be completed.Try again.(-22421)"></a>五. This action could not be completed.Try again.(-22421)</h2><p>还是上传 dis 包到 iTunes 后台的时候, 会遇到这个错误:</p>
<p><img src="https://ww2.sinaimg.cn/large/006tNbRwly1fdjv6l9qzij30dh038wep.jpg" alt=""></p>
<h3 id="解决方案-4"><a href="#解决方案-4" class="headerlink" title="解决方案"></a>解决方案</h3><p>在<a href="http://www.jianshu.com/p/a9f818ac1066" target="_blank" rel="external">这篇文章</a>中找到了解决方案:</p>
<blockquote>
<p>暂时请使用 -Application Loader上传app程序</p>
</blockquote>
<h2 id="六-iOS-沙盒测试充值一次成功-一次失败"><a href="#六-iOS-沙盒测试充值一次成功-一次失败" class="headerlink" title="六. iOS 沙盒测试充值一次成功, 一次失败"></a>六. iOS 沙盒测试充值一次成功, 一次失败</h2><p>在沙盒测试充值时, 这次失败了, 下次就会成功, 主要发生在小面额的充值项上.</p>
<h3 id="解决方案-5"><a href="#解决方案-5" class="headerlink" title="解决方案"></a>解决方案</h3><p><img src="https://ww2.sinaimg.cn/large/006tNbRwly1fdjvcfmifbj31as0foq6c.jpg" alt=""></p>
<p>苹果商店抽风, 没啥解决方案.</p>
<h2 id="六-苹果提交审核，因为应用名称不合法被拒，改完提交还是被拒"><a href="#六-苹果提交审核，因为应用名称不合法被拒，改完提交还是被拒" class="headerlink" title="六. 苹果提交审核，因为应用名称不合法被拒，改完提交还是被拒"></a>六. 苹果提交审核，因为应用名称不合法被拒，改完提交还是被拒</h2><p>这个是苹果的回复:</p>
<blockquote>
<p>We still find that your app name to be displayed on the App Store includes descriptors, which are not appropriate for use in an app name.<br>Specifically, the following words in your app names are considered descriptors</p>
</blockquote>
<h3 id="解决方案-6"><a href="#解决方案-6" class="headerlink" title="解决方案"></a>解决方案</h3><p>可以查看是否在iTunes connect 后台添加了多个语言，而只修改了一种语言。</p>
<h2 id="七-XCode-安装应用出错"><a href="#七-XCode-安装应用出错" class="headerlink" title="七. XCode 安装应用出错"></a>七. XCode 安装应用出错</h2><p>这个是错误内容:</p>
<blockquote>
<p>This application’s application-identifier entitlement does not match that of the installed application. These values must match for an upgrade to be allowed.</p>
</blockquote>
<h3 id="解决方案-7"><a href="#解决方案-7" class="headerlink" title="解决方案"></a>解决方案</h3><p>删除手机上已经安装的应用就好了</p>
]]></content>
    
    <summary type="html">
    
      万一遇上了呢?
    
    </summary>
    
    
      <category term="iOS" scheme="http://blog.justbilt.com/tags/iOS/"/>
    
      <category term="iOS-Dev-Tips" scheme="http://blog.justbilt.com/tags/iOS-Dev-Tips/"/>
    
  </entry>
  
  <entry>
    <title>Quick-Cocos2d-x 中的面向对象</title>
    <link href="http://blog.justbilt.com/2017/03/04/quick-x-oop/"/>
    <id>http://blog.justbilt.com/2017/03/04/quick-x-oop/</id>
    <published>2017-03-04T02:04:44.000Z</published>
    <updated>2017-07-09T03:09:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>虽说现在一直提倡组合优于继承, 但是我们这帮深受 c++ 毒害的大好青年还是对继承有着深深的感情. Lua 这门语言本身并没有提供面向对象的机制, 不过我们可以很容易的通过 Lua 的 metatable 来实现一套面向对象的机制.</p>
<a id="more"></a>
<h1 id="一-实现机制"><a href="#一-实现机制" class="headerlink" title="一. 实现机制"></a>一. 实现机制</h1><p>实现的原理很简单, 如果一个 Lua 的 table1 通过 <code>setmetatable</code> 函数设置了元表之后, 如果试图访问一个不存在的 <code>属性</code>, 就会触发这个 metatable 的 <code>__index</code> 元方法, 这个 __index 可以是另一个 table2 , 这样它就回去这个 table2 中去找那个属性了, 如果 table2 中还没有的话, 就会触发 table2 的元方法, 就这样一层一层的往上找. 我们可以用一个十分简单的栗子来测试下这个功能:</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">local</span> a = &#123;aa = <span class="number">1</span>&#125;</div><div class="line"><span class="keyword">local</span> b = &#123;bb = <span class="number">2</span>&#125;</div><div class="line"><span class="keyword">local</span> c = &#123;cc = <span class="number">3</span>&#125;</div><div class="line"></div><div class="line"><span class="built_in">setmetatable</span>(b, &#123;<span class="built_in">__index</span> = a&#125;)</div><div class="line"><span class="built_in">setmetatable</span>(c, &#123;<span class="built_in">__index</span> = b&#125;)</div><div class="line"></div><div class="line"><span class="built_in">print</span>(<span class="string">"aa:"</span>, c.aa, <span class="string">"bb:"</span>, c.bb, <span class="string">"cc"</span>, c.cc) <span class="comment">-- output: aa:  1   bb: 2   cc  3</span></div></pre></td></tr></table></figure>
<p>如上, 只是加了两个 <code>setmetatable</code>, c 便可以访问到 a 和 b 的属性, 是不是很神奇.</p>
<h1 id="二-Quick-cocos2d-x-中的实现"><a href="#二-Quick-cocos2d-x-中的实现" class="headerlink" title="二. Quick-cocos2d-x 中的实现"></a>二. Quick-cocos2d-x 中的实现</h1><p>Quick-Cocos2d-x 作为一个 framework 自然也实现了一套这样的机制, 因为函数实现比较长, 所以我就不粘贴代码了, 大家可以<a href="https://github.com/chukong/quick-cocos2d-x/blob/master/framework/functions.lua#L281-L339" target="_blank" rel="external">跳转这里查看</a>. 纵观这段代码, 可以以最外层的 <code>if-else</code> 将这段逻辑分成两部分, 继承自 Cocos 的对象和继承自 Lua 的 Table, 为什么要这么分呢 ?</p>
<p>因为 Cocos 的对象在 Lua 中的 type 是 <code>userdata</code>, 是不能设置 metatable 的, 所以我们之前说的那套继承的方法就行不通了, Quick-cocos2d-x 在这里的选择是把所有的变量都复制一份, 做了一次一维的深拷贝. </p>
<p>所以, 抛开继承的实现不同, 这两个分支的逻辑是一致的. 我们精简下, 可以分离出下面这段简短的代码:</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">class</span><span class="params">(_name, _super)</span></span></div><div class="line">    <span class="keyword">local</span> cls = &#123;__cname = _name, super = _super&#125;</div><div class="line">    <span class="keyword">if</span> _super <span class="keyword">then</span></div><div class="line">        <span class="built_in">setmetatable</span>(cls, &#123;<span class="built_in">__index</span> = _super&#125;)</div><div class="line">    <span class="keyword">else</span></div><div class="line">        cls.ctor = <span class="function"><span class="keyword">function</span><span class="params">()</span></span><span class="keyword">end</span></div><div class="line">    <span class="keyword">end</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">cls.new</span><span class="params">(...)</span></span></div><div class="line">        <span class="keyword">local</span> instance = <span class="built_in">setmetatable</span>(&#123;&#125;, &#123;<span class="built_in">__index</span> = cls&#125;)</div><div class="line">        instance:ctor(...)</div><div class="line">        <span class="keyword">return</span> instance</div><div class="line">    <span class="keyword">end</span></div><div class="line">    <span class="keyword">return</span> cls</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>这短短十几行代码几乎已经包含了面向对象的所有特性, 有实例函数 <code>new</code>, 有默认构造函数 <code>ctor</code>, 可以访问父类 <code>super</code>. </p>
<p>大家可以看到这段代码有两次 <code>setmetatable</code>, 第一次是在创建 cls 的时候, 是为了让 cls 能够访问到 super 中的属性; 第二次是在产生实例 <code>instance</code> 的时候, 是为了让实例能够访问到 cls 中的属性. </p>
<h1 id="三-要注意的地方"><a href="#三-要注意的地方" class="headerlink" title="三. 要注意的地方"></a>三. 要注意的地方</h1><p>下面这段代码是一个典型的面向对象示例:</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">local</span> Animal = class(<span class="string">"Animal"</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal:ctor</span><span class="params">(_name)</span></span></div><div class="line">    self.name = _name</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal:say</span><span class="params">()</span></span></div><div class="line">    <span class="built_in">print</span>(<span class="string">"i couldn't say!"</span>)</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="keyword">local</span> Dog = class(<span class="string">"Dog"</span>, Animal)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dog:ctor</span><span class="params">(_name, _age)</span></span></div><div class="line">    Dog.super.ctor(self, _name)</div><div class="line">    self.age = _age</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dog:say</span><span class="params">()</span></span></div><div class="line">    <span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">"I'm a %s, my name is %s, i'm %s years old."</span>, self.__cname, self.name, self.age))</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line">Dog.new(<span class="string">"Jack"</span>, <span class="number">5</span>):say()</div></pre></td></tr></table></figure>
<p>我们重点看下第 <code>14</code> 行代码, 这行代码有些奇怪.</p>
<h2 id="1-为什么用类名去调用-super"><a href="#1-为什么用类名去调用-super" class="headerlink" title="1. 为什么用类名去调用 super ?"></a>1. 为什么用类名去调用 super ?</h2><p>当继承到第三层的时候 self.super 从 C 跳转到 B 时 self 还是 C 的实例, 这时 B 中 self.super 其实还 B, 就会造成 stack overflow.</p>
<h2 id="2-为什么是类名-super-而不是-super"><a href="#2-为什么是类名-super-而不是-super" class="headerlink" title="2. 为什么是类名 . super 而不是 : super ?"></a>2. 为什么是类名 <code>.</code> super 而不是 <code>:</code> super ?</h2><p>首先大家要明白 Lua 中 <code>.</code> 和 <code>:</code> 调用函数的区别是什么 ?</p>
<blockquote>
<p>冒号调用是 Lua 提供的一个语法糖, 默认会将函数的调用者作为第一个参数传入.</p>
</blockquote>
<p>区别在于父类的函数收到的 self 是 <code>self</code> (即 Dog 的实例) 还是 <code>Dog.super</code> (即 Animal) , 很明显应该是后者.</p>
<h1 id="四-有什么改进的地方"><a href="#四-有什么改进的地方" class="headerlink" title="四. 有什么改进的地方"></a>四. 有什么改进的地方</h1><p>很早之前就拜读过<a href="http://jennal.com/2014/10/18/cocos2dx-lua-oop/" target="_blank" rel="external">这篇文章</a>, 这篇文章中列举了一些作者的疑惑, 很有收获, 大家可以看一下. 文章中提出了两条:</p>
<blockquote>
<p>问题1：从父类做深度拷贝<br>问题4：创建实例时的深度拷贝</p>
</blockquote>
<p>作者当时可能忽略了我们刚才做的解释: <em>无法向一个 userdata 设置 metatable</em> , 那么我们这里是否真的需要一次深拷贝呢 ? 让我们先思考一个问题:</p>
<blockquote>
<p>既然 Cocos 的对象是一个 <code>userdata</code>, 那么我们为什么可以往这个 userdata 上添加新的 Lua 属性呢 ?</p>
</blockquote>
<p>Quick-Cocos2d-x 为 C++ 导出 Lua 接口的工具是 tolua++ , 其中有两个接口叫: <code>tolua.setpeer</code> 和 <code>tolua.gerpeer</code> , 这个 peer 又是一个什么东西呢 ?</p>
<p><img src="https://ww1.sinaimg.cn/large/006tNc79ly1fdbsvt09tnj313o08ewg5.jpg" alt=""></p>
<p>这张图是六月大大在 Cocos 论坛中的回复, 我们可以理解为 <code>peer</code> 是用来存储 C++ 对象在 Lua 中的扩展的, 他的本质是一个 table. 如果我们试图访问一个 userdata 类型的属性时, 如果这个 userdata 设置了 peer 表, 会优先从这个表中取值.</p>
<p>既然这个 <code>peer</code> 是一个 table, 那么是否可以为这个 table 设置元表, 这样在 peer 表中找不到就会触发 __index .</p>
<p>我们对 class 的实现做出下面的修改:</p>
<p><img src="https://ww3.sinaimg.cn/large/006tNbRwly1fdbtiv4cbaj30v009i3zv.jpg" alt=""></p>
<p>用设置 peer 表的 metatable 来代替原来的深拷贝, 重新运行我们的项目, 完美. 让我们想想下这个实现带来的优势: <strong>更快, 更省内存</strong>, 为此我做了一个小的性能测试:</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">local</span> A = class(<span class="string">"A"</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span></div><div class="line">    <span class="keyword">return</span> cc.Node:<span class="built_in">create</span>()</div><div class="line"><span class="keyword">end</span>)</div><div class="line"></div><div class="line"><span class="keyword">for</span> i = <span class="number">1</span>, <span class="number">100</span> <span class="keyword">do</span></div><div class="line">    A[<span class="string">"a_index_"</span>..i] = i</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="keyword">local</span> B = class(<span class="string">"B"</span>, A)</div><div class="line"></div><div class="line"><span class="keyword">for</span> i = <span class="number">1</span>, <span class="number">100</span> <span class="keyword">do</span></div><div class="line">    B[<span class="string">"b_index_"</span>..i] = i</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> i=<span class="number">1</span>,<span class="number">10000</span> <span class="keyword">do</span></div><div class="line">    B.new()</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>我设计了 A,B 两个类, B 继承自 A, 每个各有 100 个成员变量, 最后创建 10000 个 B 的实例. 统计了下内存的占用情况和耗时. 结果如下:</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">深拷贝:</div><div class="line">耗时: <span class="number">2.988687</span></div><div class="line">内存: <span class="number">134.1</span>M</div><div class="line"></div><div class="line"><span class="built_in">setmetatable</span>:</div><div class="line">耗时: <span class="number">0.107388</span></div><div class="line">内存: <span class="number">38.9</span>M</div></pre></td></tr></table></figure>
<p>这个相差很多呀, 感觉自己马上就要走上人生巅峰了. 既然相差这么多, 而廖大貌似也早已发现了这个问题:</p>
<p><img src="https://ww3.sinaimg.cn/large/006tNbRwly1fdbv2g5bfoj30m208mjs8.jpg" alt=""></p>
<p>为什么直到 3.3 版本还没有改动呢 ? 莫非是我哪里计算错了, 抛开测试, 我在我们的一个线上项目中做了一个真是的测试, 结果令我大跌眼镜.</p>
<blockquote>
<p>相差无几</p>
</blockquote>
<p>仔细想了下, 是否每一个对象都会有 100 个属性, 游戏内是否会同时存在 1w 个对象 ? 所以那份测试是没有意义的, 但是这个改动却是很有意义的.</p>
<p>其实在发现 peer 表之前, 我还做过另一个尝试, 对于 userdata 类型的实例, 不返回这个实例, 而是返回一个 table, 有一个属性 <code>_cobj</code> , 设置这个 table 的元表, 使得所有的属性都优先从 <code>_cobj</code> 中取, 取不到再去 super 中取, 后来因为改动太大, 就放弃了, 不过在这个改动的过程中意外的发现 peer 表的存在.</p>
<p>多折腾, 总会有所收获的.</p>
]]></content>
    
    <summary type="html">
    
      没有对象? 自己 new 一个就好了嘛!
    
    </summary>
    
    
      <category term="Quick-Cocos2d-x" scheme="http://blog.justbilt.com/tags/Quick-Cocos2d-x/"/>
    
  </entry>
  
  <entry>
    <title>最近博客的一些变化</title>
    <link href="http://blog.justbilt.com/2017/02/24/some-change-for-blog/"/>
    <id>http://blog.justbilt.com/2017/02/24/some-change-for-blog/</id>
    <published>2017-02-23T16:39:14.000Z</published>
    <updated>2017-07-09T03:09:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>虽然最近博客的产量不高, 但是折腾的比较多. 而且每次折腾完都会有一些新的素材, 这样又可以对付一篇博客出来啦. 逃)</p>
<a id="more"></a>
<h1 id="一-主题"><a href="#一-主题" class="headerlink" title="一. 主题"></a>一. 主题</h1><p>我不是在换主题, 就是在换主题的路上. 以至于子龙山人经常会问我:”你又换博客啦?”, 并没有, 只是换了个主题而已.</p>
<p>我换主题疯狂到什么程度呢? 几乎 <a href="https://hexo.io/themes/" target="_blank" rel="external">Hexo 主题页</a>的我都尝试过, 很多不好看的简单尝试了下就放弃了, 好看的呢我又会改一改, 按照自己的喜好定制一些东西. 只可惜之前的主题都没有截图留念下, 否则还能拿出来装个逼.</p>
<p><img src="/assets/themes-screenshot/01-raytaylorism.png" alt=""></p>
<p>目前这个主题 <code>raytaylorism</code> 简单修改了下 配色, 字体, 和一点样式, 感觉还不错, 应该可以挺一段时间.</p>
<h1 id="二-移动端写作"><a href="#二-移动端写作" class="headerlink" title="二. 移动端写作"></a>二. 移动端写作</h1><p>上篇文章我尝试了下在我的 Android 手机上书写, 用到了两个应用分别是 <code>Pocker Git</code> 和 <code>JotterPad</code> . 前者负责博客的 git 拉取和推送, 后者负责编辑, 两个应用都很给力, 配合的也很好, 虽然还有一些小瑕疵, 但着实已经是免费的解决方案中最佳之选了.</p>
<p><img src="https://ww4.sinaimg.cn/large/006tNc79ly1fd0xcj3fmhj31kw0nyh5e.jpg" alt=""></p>
<h1 id="三-访问加速"><a href="#三-访问加速" class="headerlink" title="三. 访问加速"></a>三. 访问加速</h1><p>说的好像很高大上, 做起来特别简单. 之前博客是托管在 github 之上的, 但是由于一些众所周知的原因, 访问速度不是很理想, 甚至可能访问不了. 国内也有类似的免费托管方案 (coding), 但是外国友人若是想看俺写的文章咱办 ? 能不能国外网络走 github, 国内走 coding 呢?</p>
<p>是可以的, 而且配置起来超级简单, 动动手指的功夫就解决了. 我基本上是照着<a href="http://yumemor.com/2016/04/24/Github-Pages-%E6%9C%8D%E5%8A%A1%E5%A4%AA%E6%85%A2%EF%BC%9F%E6%9D%A5%E8%AF%95%E8%AF%95%E5%88%86%E6%B5%81%E5%90%A7/" target="_blank" rel="external">这个教程</a>搞的, 但是这个教程有些老, coding 他们改版的很快, 大家自己配合教程琢磨下就可以了.</p>
<p>弄完之后, 访问博客速度<strong>嗷嗷的</strong>, 感谢 coding 提供这么好的服务, 还是免费的, 良心企业.</p>
<h1 id="四-图片上传"><a href="#四-图片上传" class="headerlink" title="四. 图片上传"></a>四. 图片上传</h1><p>不知道大家之前博客配图是怎么搞的, 我之前是这么个流程:</p>
<blockquote>
<p>准备图片 &gt; 打开 chrome 微博图床插件 &gt; 把图片拖拽上去 &gt; 复制网址 &gt; 返回编辑器粘贴网址</p>
</blockquote>
<p>过程还是略繁琐, 直到我发现了神器 <code>iPic</code> , 复制图片后直接 <code>cmd + shift + u</code> 等待上传完毕就可以获得网址了.</p>
<p><img src="https://ww3.sinaimg.cn/large/006tNc79ly1fd0xv8mhqzj30c009u0tk.jpg" alt=""></p>
<p>超级方便, 超级省心, 绝对是让生命更有意义的工具.</p>
<hr>
<p>有了这么多牛逼的东西, 还有什么理由不好好写博客呢 ?</p>
]]></content>
    
    <summary type="html">
    
      哎呀, 你咋又换主题了 !
    
    </summary>
    
    
      <category term="blog" scheme="http://blog.justbilt.com/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>充实而又愉快的 2016</title>
    <link href="http://blog.justbilt.com/2017/02/18/my-2016/"/>
    <id>http://blog.justbilt.com/2017/02/18/my-2016/</id>
    <published>2017-02-18T01:39:54.000Z</published>
    <updated>2017-07-09T03:09:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>以往的年结大家感兴趣的话可以看这里: <a href="http://blog.justbilt.com/categories/%E5%B9%B4%E7%BB%93/">我的年结</a>, 这篇是第四篇了. 我大约是 2012 年正式开始写博客的, 时光荏苒, 已经过去5年了, 期间经历过一次大的迁移, 觉得最开始的博客太没有技术含量, 所以就都丢弃了. </p>
<p>值得肯定的是, 这次的年结是写的最早的一次 ! (此处应有掌声👏) 拖延病患者的一小步, 社会的一大步 !</p>
<a id="more"></a>
<hr>
<h1 id="一-工作"><a href="#一-工作" class="headerlink" title="一. 工作"></a>一. 工作</h1><h2 id="C-公司-2015-7-今"><a href="#C-公司-2015-7-今" class="headerlink" title="C 公司 (2015.7 ~ 今)"></a>C 公司 (2015.7 ~ 今)</h2><p>算下来, 我在 C 已经呆了一年半多的时间了, 如果要用一个字来形容我的感受, 那就是 <code>爽</code> . 去年我对 C 的介绍并不多, 当时的体验并不久, 今年终于可以来说一说了, 仔细想来 C 这样的团队才是我心目中理想的团队:</p>
<blockquote>
<p>不计考勤, 周末双休<br>有一顿免费晚饭, 两大包 3M 口罩, 三个空气净化器<br>技术驱动, 效率优先<br>老板很牛逼, 团队无弱者</p>
</blockquote>
<p>这里面最重要的是 <em>老板很牛逼, 团队无弱者</em>, 在 C 你经常可以看到策划同学在改后端战斗逻辑, 测试同学在用按键精灵写自动测试脚本, UE 妹子听得懂程序逻辑还兼着客服+运营, UI 设计师和前端讨论这个界面拼的合理性. 两位老板 (@bin, @jinbo) 更是牛逼, 他们就是我心目中的两尊神, 我就不夸他们了, 免得被认为在吹牛逼.</p>
<p><img src="https://ww4.sinaimg.cn/large/006tNc79ly1fcufng11glj30zk0qdact.jpg" alt="年中去轰趴"></p>
<p><img src="https://ww3.sinaimg.cn/large/006tNc79ly1fcufg12hhjj30zk0qo0xq.jpg" alt="年夜饭"></p>
<p>这一年间, 公司来了一些人, 也走了一些人, 对于有些人还是十分不舍的, 但是每个人都有自己的选择, 强扭的瓜不甜. </p>
<p>公司年夜饭这一天, 我喝的酩酊大醉, 为现在的这些人, 也为离开那些人 !</p>
<h1 id="二-技术"><a href="#二-技术" class="headerlink" title="二. 技术"></a>二. 技术</h1><p>关于技术, 这一年没有往广度去发展了, 更多对之前技术的巩固和项目后期的一些理解. 这一年语言的技术栈主要还是 <code>lua + python + shell</code>, lua 用来做项目, python 和 shell 用来写支持.</p>
<h2 id="Android-Studio"><a href="#Android-Studio" class="headerlink" title="Android Studio"></a>Android Studio</h2><p>2016 年最大收获之一就是它了, 接触它是一个很机缘巧合事情, 我们打算接入一个崩溃统计的 SDK , 但是这个 SDK 只支持 Android Studio (以后简称 AS) 接入, 我们会为了一个 sdk 改变整个 Android 项目的结构吗 ? 会 . 现在还依稀记得当时十分没底气的很 @bin 说: </p>
<blockquote>
<p>“我们能不能换一个 Android 的 ide ?”</p>
</blockquote>
<p>当时 Android 端的项目还不是很复杂，在 bin 的支持下，很快便迁移到了 AS ，直到后面我们团队在一周之内接完 30+ 个渠道的 sdk ，才意识到了当初的选择是多么的明智.</p>
<p>当然这一路并不是顺风顺水，也遇到了很多坑，幸好 Google 在大力推 as ，遇到的坑在 Stack Overflow 上也都有答案。</p>
<p>感谢 Bugtags ，感谢 Android studio 。关于崩溃统计的问题，我有空会单独开一篇文章来写。</p>
<h2 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h2><p>就项目来说，也可谓是 “活久见”，我工作了这么多年，第一次走到项目的大后期。之前的项目多数倒在了上线前或上线后不久，没有想到上线后竟然也有这么多的问题。</p>
<p>也遇到了几次重大的线上事故，可谓是心惊肉跳，我们都开玩笑说公司应该常备速效救心丸。</p>
<p>优化包体积，优化内存，优化性能 这些之前纸上谈兵的方案也得到了新的诠释。</p>
<p>而且随着项目的不断推进，之前好多技术方案都不能满足需求，比如热更新，打包，国际化与本地化等等。</p>
<h2 id="团队"><a href="#团队" class="headerlink" title="团队"></a>团队</h2><p>从 16 年初，我之前和另一人负责的哪个项目遇到挫折，因为收费太过后期，加上模型产品太过强盛，没有发行公司敢于正面怼，所以就搁置了。另一个同事离职，我加入到了公司的另一个项目组内，这是一个非常年轻且有激情的团队，但是大家经验略有不足，便由我这个“老人”来带领这个团队。</p>
<p>工作了这么久，几乎是第一次正是的带领团队，心中难免戚戚焉。如何快速融入团队并获得大家的认可呢？和 @zengrong 大神的选择类似，</p>
<blockquote>
<p>解决一个大家开发过程中的痛点</p>
</blockquote>
<p>在负责一个小模块的时候， 我发现项目中有很多相似的控件，每个都得单独做，逻辑冗余且散落的到处都是，为什么不实现一个通用的控件去做呢？细节不赘述，最终这个控件成功的替换了所有的老控件，带来了极大的效率提升。</p>
<h1 id="三-生活"><a href="#三-生活" class="headerlink" title="三. 生活"></a>三. 生活</h1><h2 id="旅行"><a href="#旅行" class="headerlink" title="旅行"></a>旅行</h2><p>在 16 年春节前，我和媳妇开始我们的 上海-杭州-苏州 之旅，为期 2 周，这个也是我和冰子出去游玩时间最长的一次。</p>
<p><img src="https://ww2.sinaimg.cn/large/006tNc79ly1fcuzylbg29j30qd0zkjt3.jpg" alt=""></p>
<p>上海东方明珠外的玻璃栈道, 杭州的汽车真的是会主动让行人的, 苏州街边的点心真的很精致. 世界这么大, 出去走走真是好.</p>
<h2 id="学车"><a href="#学车" class="headerlink" title="学车"></a>学车</h2><p>很早之前就报名了，一直没有狠下心来去学，还一直拿工作忙没时间来搪塞冰子。</p>
<p>直到冰子一气之下直接给我报了名，我才开始拿起手机背题，这里真的要感谢《驾考宝典》这个 APP ，它上面的易错题非常牛逼，考试的时候几乎都碰上了，就这样轻松通过科目一。</p>
<p><img src="https://ww2.sinaimg.cn/large/006tNc79ly1fcuzlkei9nj30zk0qon0u.jpg" alt=""></p>
<p>科目二的时候十分艰苦，我们报的周末上午班，每天5点就要起床，有一个多月的时间的周末早晨都是在班车上度过的。科目二考试的时候因为车型的原因差点没有过，好险！</p>
<p>科目三很简单，过不过很多时候不是由自己决定的，只要科目二学的够扎实，下面就可以交给命运了，我很幸运，一次就过了。</p>
<p>科目四同样很简单，满分难，通过却很容易。</p>
<p>就这样，历时两个月，我成功拿到之前根本没有想到的驾照。而冰子，她还挂在科目二呢，哈哈哈，嘲笑她一把。</p>
<h2 id="背单词"><a href="#背单词" class="headerlink" title="背单词"></a>背单词</h2><p>我大概是在 16 年初突然决定背单词的，原因我已经记不清楚了。从此，早晨公交车上，公司厕所内，晚上等车时，你都会看到一个在背单词的身影。</p>
<p>作为一个花了好多钱学英语报班都没有坚持下来的愿望，这次真的能够成功吗？</p>
<p><img src="https://ww1.sinaimg.cn/large/006tNc79ly1fcuzpmd3y5j30k00zkgnl.jpg" alt=""></p>
<p>这次能坚持，完全归功于《百词斩》，宏爷很早之前就给我安利过这款产品，当时功能还很简陋，没有坚持下来。</p>
<p>背单词对我的帮助十分大，现在我已经可以很简单的浏览 Stack Overflow 了，能看懂每一个答案在说什么，甚至已经可以自己去回答帮助别人了。</p>
<h2 id="生日"><a href="#生日" class="headerlink" title="生日"></a>生日</h2><p>这一年最大惊喜就是冰子为我准备的生日派对, 我从小都没有这样过过生日. </p>
<p><img src="https://ww2.sinaimg.cn/large/006tNc79ly1fcv02ph5dzj30zk0qowgn.jpg" alt=""></p>
<p>虽然很朴素, 但可以看到用了很多心, 听说冰子吹气球吹的腮帮疼, 哈哈 , 好傻 ! 谢谢你, 老婆, 永远爱你 !</p>
<h1 id="四-剁手"><a href="#四-剁手" class="headerlink" title="四. 剁手"></a>四. 剁手</h1><h2 id="小米圈铁耳机"><a href="#小米圈铁耳机" class="headerlink" title="小米圈铁耳机"></a>小米圈铁耳机</h2><p><img src="https://ww2.sinaimg.cn/large/006tNc79ly1fcuxwqotzcj30qd0zkq4e.jpg" alt=""></p>
<p>上一个耳机 KOSS PORTAPRO 挂掉之后, 就不打算买头戴式的了, 麻烦不说还容易坏. 在微博上看到谁说这个耳机还不错, 便入手了. 总体来说, 算不上惊艳, 但还算好用, 毕竟 <code>99</code> 的价位也不会对它有什么过分的要求.</p>
<h2 id="小米max"><a href="#小米max" class="headerlink" title="小米max"></a>小米max</h2><p><img src="https://ww4.sinaimg.cn/large/006tNc79ly1fcuzds4awbj30zk0qota8.jpg" alt=""></p>
<p>买的时候想的很好, 大屏可以用来看书, 实际却很少看书. 总而言之, 质量没的说, 我对小米的手机就没有失望过, 但是大屏单手操作还是有所不便, 买的时候还是要慎重一些.</p>
<hr>
<p>总而言之, 这是充实而又愉快的 2016 年, 工作和家庭都很顺心, 希望 17 年能继续保持下去. </p>
]]></content>
    
    <summary type="html">
    
      又到了一年树新风(tree new bee)的时候啦
    
    </summary>
    
    
      <category term="年结" scheme="http://blog.justbilt.com/tags/%E5%B9%B4%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>Quick-cocos2d-x 视频播放</title>
    <link href="http://blog.justbilt.com/2016/12/10/quickx-playvideo/"/>
    <id>http://blog.justbilt.com/2016/12/10/quickx-playvideo/</id>
    <published>2016-12-10T14:00:28.000Z</published>
    <updated>2017-07-09T03:09:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天我们来聊聊 Quick-Cocos2d-x 中播放视频的那些事. </p>
<p>这篇文章来自于日常的笔记, 年代可能会有些久远, 加上当时最开始视频播放不是我来做的, 所以有些地方我的理解也不是很深刻. 若是有什么不对的地方, 还望大家不吝赐教.</p>
<a id="more"></a>
<h1 id="一-基本用法"><a href="#一-基本用法" class="headerlink" title="一. 基本用法"></a>一. 基本用法</h1><p>播放一段视频:</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">local</span> video = ccexp.VideoPlayer:<span class="built_in">create</span>()</div><div class="line">video:setPosition(cc.p(display.cx, display.cy))</div><div class="line">video:setAnchorPoint(cc.p(<span class="number">0.5</span>, <span class="number">0.5</span>))</div><div class="line">video:setContentSize(cc.size(display.width, display.height))</div><div class="line">video:setFileName(<span class="string">"res/start_video.mp4"</span>)</div><div class="line">video:setKeepAspectRatioEnabled(<span class="literal">true</span>)</div><div class="line">video:setFullScreenEnabled(<span class="literal">true</span>)</div><div class="line"></div><div class="line">self:addChild(video)</div></pre></td></tr></table></figure>
<p>监听视屏播放事件:</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">onVideoEventCallback</span><span class="params">(sender, eventType)</span></span></div><div class="line">    <span class="built_in">print</span>(<span class="string">"onVideoEventCallback:"</span>, eventType)</div><div class="line">    <span class="keyword">if</span> eventType == ccexp.VideoPlayerEvent.PLAYING <span class="keyword">then</span></div><div class="line">    <span class="keyword">elseif</span> eventType == ccexp.VideoPlayerEvent.PAUSED <span class="keyword">then</span></div><div class="line">    <span class="keyword">elseif</span> eventType == ccexp.VideoPlayerEvent.STOPPED <span class="keyword">then</span></div><div class="line">    <span class="keyword">elseif</span> eventType == ccexp.VideoPlayerEvent.COMPLETED <span class="keyword">then</span></div><div class="line">    <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div><div class="line">video:addEventListener(onVideoEventCallback)</div><div class="line">video:play()</div></pre></td></tr></table></figure>
<blockquote>
<p>然而你做完这一切还是可能会播放不出来视频, 没有关系, 多播放几次就出来啦.</p>
</blockquote>
<h1 id="二-遇到的问题"><a href="#二-遇到的问题" class="headerlink" title="二. 遇到的问题"></a>二. 遇到的问题</h1><h2 id="问题-1-iOS-播放视频完后黑屏"><a href="#问题-1-iOS-播放视频完后黑屏" class="headerlink" title="问题 1: iOS 播放视频完后黑屏"></a>问题 1: iOS 播放视频完后黑屏</h2><p>cocos2dx 3.3 iOS端播放视频完后黑屏, 控制台中提示日志: OpenGL error 0x0506 in -[CCEAGLView swapBuffers] 324</p>
<p>解决方案:</p>
<p><a href="http://www.cnblogs.com/cc4coco/p/4188347.html" target="_blank" rel="external">http://www.cnblogs.com/cc4coco/p/4188347.html</a></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">-(<span class="keyword">void</span>) viewDidAppear:(<span class="built_in">BOOL</span>)animated&#123;</div><div class="line"></div><div class="line">    cocos2d::Director::getInstance()-&gt;resume();</div><div class="line">    cocos2d::Director::getInstance()-&gt;startAnimation();</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)viewWillDisappear:(<span class="built_in">BOOL</span>)animated&#123;</div><div class="line"></div><div class="line">    cocos2d::Director::getInstance()-&gt;pause();</div><div class="line">    cocos2d::Director::getInstance()-&gt;stopAnimation();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="问题-2-在-iOS-9-2-以上会崩溃"><a href="#问题-2-在-iOS-9-2-以上会崩溃" class="headerlink" title="问题 2: 在 iOS 9.2 以上会崩溃"></a>问题 2: 在 iOS 9.2 以上会崩溃</h2><p>解决方案:</p>
<p><a href="https://github.com/cocos2d/cocos2d-x/issues/14855" target="_blank" rel="external">https://github.com/cocos2d/cocos2d-x/issues/14855</a></p>
<p>修改 VideoPlayer 类的析构函数, 将 <code>dealloc</code> 改为 <code>release</code>.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">VideoPlayer::~VideoPlayer()</div><div class="line">&#123;</div><div class="line">     <span class="keyword">if</span>(_videoView)</div><div class="line">     &#123;</div><div class="line">-        [((UIVideoViewWrapperIos*)_videoView) dealloc];</div><div class="line">+        [((UIVideoViewWrapperIos*)_videoView) release];</div><div class="line">     &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="问题-3-iOS-上播放视频有进度条-双击可以放大缩小-Android-点击可以暂停"><a href="#问题-3-iOS-上播放视频有进度条-双击可以放大缩小-Android-点击可以暂停" class="headerlink" title="问题 3: iOS 上播放视频有进度条, 双击可以放大缩小, Android 点击可以暂停"></a>问题 3: iOS 上播放视频有进度条, 双击可以放大缩小, Android 点击可以暂停</h2><p>解决方案:</p>
<p>这个问题挺让人啼笑皆非的, 不知道当时设计这个类的人是如何考虑的, 至少也应该提供一个关闭的接口吧. 好, 让我们看下如何解决它.</p>
<p><img src="http://ww3.sinaimg.cn/large/006y8lVajw1fam4s9vv7ij30dj0m9q3f.jpg" alt=""></p>
<h3 id="1-隐藏-iOS-播放进度条"><a href="#1-隐藏-iOS-播放进度条" class="headerlink" title="1. 隐藏 iOS 播放进度条"></a>1. 隐藏 iOS 播放进度条</h3><p>在 UIVideoPlayer-ios.mm 的 <code>-(void) setURL:(int)videoSource :(std::string &amp;)videoUrl</code> 函数中, 修改 <code>MPMovieControlStyleEmbedded</code> 为 <code>MPMovieControlStyleNone</code>:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">-    <span class="keyword">self</span>.moviePlayer.controlStyle = <span class="built_in">MPMovieControlStyleEmbedded</span>;</div><div class="line">+    <span class="keyword">self</span>.moviePlayer.controlStyle = <span class="built_in">MPMovieControlStyleNone</span>;</div></pre></td></tr></table></figure>
<p>进度条隐藏了, 但是视频播放时双击缩放的问题却无法解决.</p>
<h3 id="2-禁用-Android-点击暂停"><a href="#2-禁用-Android-点击暂停" class="headerlink" title="2. 禁用 Android 点击暂停"></a>2. 禁用 Android 点击暂停</h3><p>修改 <code>Cocos2dxWebView.java</code> 中的 <code>onTouchEvent</code> 函数</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</div><div class="line"><span class="comment">//        if((event.getAction() &amp; MotionEvent.ACTION_MASK) == MotionEvent.ACTION_UP)</span></div><div class="line"><span class="comment">//        &#123;</span></div><div class="line"><span class="comment">//            if (isPlaying()) &#123;</span></div><div class="line"><span class="comment">//                pause();</span></div><div class="line"><span class="comment">//            &#125; else if(mCurrentState == STATE_PAUSED)&#123;</span></div><div class="line"><span class="comment">//                resume();</span></div><div class="line"><span class="comment">//            &#125;</span></div><div class="line"><span class="comment">//        &#125;</span></div><div class="line">        </div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h2 id="问题-4-vivo手机无法播放视频的bug"><a href="#问题-4-vivo手机无法播放视频的bug" class="headerlink" title="问题 4: vivo手机无法播放视频的bug"></a>问题 4: vivo手机无法播放视频的bug</h2><p>解决方案:</p>
<p>经过断点跟踪, 定位到了原因, 视频的尺寸获取的有问题, 我尝试修改了 <code>setVideoRect</code> 函数中的两行代码:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">-        mViewWidth = maxWidth;</div><div class="line">-        mViewHeight = maxHeight;</div><div class="line">+        mViewWidth = <span class="number">1</span>;</div><div class="line">+        mViewHeight = <span class="number">1</span>;</div></pre></td></tr></table></figure>
<p>很神奇的解决了这个问题.</p>
<h2 id="问题-5-多次调用可能会遮挡-SDK-的弹出界面"><a href="#问题-5-多次调用可能会遮挡-SDK-的弹出界面" class="headerlink" title="问题 5: 多次调用可能会遮挡 SDK 的弹出界面"></a>问题 5: 多次调用可能会遮挡 SDK 的弹出界面</h2><p>我们游戏中有一个重启的功能, 每次重启都会播放一个视频, 这样某些渠道的登录界面就看不到了, 另一个不播放视屏的项目就没有问题, 好像是每次播放都会提高游戏的层级.</p>
<p>解决方案:</p>
<p>遍历所有 window , 找到 SDK 的那个 window, 将它的 windowLevel 提高一级.</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="built_in">UIWindow</span> * w <span class="keyword">in</span> [[<span class="built_in">UIApplication</span> sharedApplication]windows])&#123;</div><div class="line">    <span class="keyword">if</span> ([w isKindOfClass:<span class="built_in">NSClassFromString</span>(<span class="string">@"XSDKOriginalWindow"</span>)]) &#123;</div><div class="line">        [w setWindowLevel:[[[<span class="built_in">UIApplication</span> sharedApplication]keyWindow]windowLevel]+<span class="number">1</span>];</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="问题-6-还有什么问题-都说了吧"><a href="#问题-6-还有什么问题-都说了吧" class="headerlink" title="问题 6: 还有什么问题, 都说了吧"></a>问题 6: 还有什么问题, 都说了吧</h2><p>如果播放时候是黑屏，把游戏切到后台，再进入游戏就能从头播放！<br>如果播放时候正常，切到后台再切回来就变成黑屏</p>
<p><a href="http://www.cocoachina.com/bbs/read.php?tid-306892.html" target="_blank" rel="external">http://www.cocoachina.com/bbs/read.php?tid-306892.html</a></p>
<p>Cocos2d-x V3.10版本中的videoplayer问题<br><a href="http://www.voidcn.com/blog/sh15285118586/article/p-5989468.html" target="_blank" rel="external">http://www.voidcn.com/blog/sh15285118586/article/p-5989468.html</a></p>
<p>关于cocos2dx 3.x VideoPlayer的问题<br><a href="http://blog.sina.com.cn/s/blog_93add5520102w6n9.html" target="_blank" rel="external">http://blog.sina.com.cn/s/blog_93add5520102w6n9.html</a></p>
<p>cocos2d-x视频控件VideoPlayer的用户操作栏进度条去除<br><a href="http://blog.csdn.net/pklll000pp44/article/details/51337577" target="_blank" rel="external">http://blog.csdn.net/pklll000pp44/article/details/51337577</a></p>
<hr>
<p>还真的是问题一大堆呢! 大家最好还是回去和策划大大商量下, 别播放视频了.</p>
]]></content>
    
    <summary type="html">
    
      半成品, 别用!
    
    </summary>
    
    
      <category term="Quick-Cocos2d-x" scheme="http://blog.justbilt.com/tags/Quick-Cocos2d-x/"/>
    
      <category term="videoplayer" scheme="http://blog.justbilt.com/tags/videoplayer/"/>
    
  </entry>
  
  <entry>
    <title>一个命令行的 TexturePacker 拆解工具  (二)</title>
    <link href="http://blog.justbilt.com/2016/10/29/untp-2/"/>
    <id>http://blog.justbilt.com/2016/10/29/untp-2/</id>
    <published>2016-10-29T15:39:18.000Z</published>
    <updated>2017-07-09T03:09:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>距离第一版的 <code>untp</code> 发布已经有一年半的时间了, 在这个项目上我收获了很多的第一次:</p>
<blockquote>
<p>第一次有一个项目的 star 数超过 50<br>第一次往 pypi 上上传项目<br>第一次如此认真的维护一个项目<br>…</p>
</blockquote>
<p>这篇文章已经是关于 untp 的第三篇文章了, 所有的文章列表可以<a href="/tags/untp">查看这里</a>. 下面我来讲讲 untp 最近的几次更新以及后续的一个维护计划.</p>
<a id="more"></a>
<h1 id="一-更新"><a href="#一-更新" class="headerlink" title="一. 更新"></a>一. 更新</h1><h2 id="1-0-5"><a href="#1-0-5" class="headerlink" title="1.0.5"></a>1.0.5</h2><ol>
<li>拆解单个文件时支持 <code>-o</code> 参数指定输出目录</li>
<li>可以在 <code>python</code> 中 <code>import</code></li>
<li>支持 cocos2d/cocos2d-x v3 格式</li>
</ol>
<h2 id="1-0-4"><a href="#1-0-4" class="headerlink" title="1.0.4"></a>1.0.4</h2><ol>
<li>使用 argparse 解析调用参数, 支持更多选项</li>
<li>捕获图片打开异常, 程序更加健壮</li>
<li>支持文件夹递归查找所有 plist 拆解</li>
</ol>
<h2 id="1-0-3"><a href="#1-0-3" class="headerlink" title="1.0.3"></a>1.0.3</h2><ol>
<li>修复依赖 Pillow 模块版本大于 3.0 时图片输出错误</li>
</ol>
<h2 id="1-0-2"><a href="#1-0-2" class="headerlink" title="1.0.2"></a>1.0.2</h2><ol>
<li>兼容 python3</li>
<li>放弃之前的打包发布, 改为 pypi 发布</li>
<li>修复一处路径错误</li>
<li>根据 python code style 优化代码</li>
<li>pvr,pvr.czz 格式支持 (需要安装 <code>TexturePacker</code> 命令行工具)</li>
</ol>
<h1 id="二-后续计划"><a href="#二-后续计划" class="headerlink" title="二. 后续计划"></a>二. 后续计划</h1><p>untp 这个项目最初来源于项目中的一个需求, 所以开始只是为了自用, 开源之后发现有能帮助一些人, 顺便实现一下他们的一些小需求, 自我更新动力并不是很足, 因此更新的频率不是很高.</p>
<p>之前的发展策略我一直都是按着更便捷安装, 更方便使用方向上走的, 从一开始的 PyInstaller 打包到后面的上传到 pypi , 从开始只支持单一文件到支持目录, 都是按照这个思路搞的.至于后面如何发展我也没有很好的想法, 或许让它停留在这一版也很好. 今天看到张小龙的一篇内部分享, 一个好的工具就应该只是一个工具, 想到就用, 用完就走, 不要想着把用户黏住.</p>
<p>所以, untp 就只是一个拆解大图的工具, 绝对不做其他的功能. 在这个原则的基础上, 有这么几个方向去搞:</p>
<ol>
<li>GUI 界面的支持</li>
<li>支持更多的格式</li>
</ol>
<p>我想使用这个工具的人可能不一定是程序员, 他们不一定懂 pip , 不一定会打开终端. 所以一个 GUI 的界面就很重要了. 第二个是可以让更多引擎的开发者来使用, 现在只支持 cocos 是有些狭隘了, 对自己也是一个很好地的锻炼.</p>
<p>如果你还有更好的建议, 欢迎在评论里或者 <a href="https://github.com/justbilt/untp/issues" target="_blank" rel="external">issue</a> 中提出.</p>
<h1 id="三-中文使用说明-持续更新"><a href="#三-中文使用说明-持续更新" class="headerlink" title="三. 中文使用说明(持续更新)"></a>三. 中文使用说明(持续更新)</h1><h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h2><p>现在可以采用两种方式安装, 在终端中键入 <code>pip install untp</code> 或者 clone 代码到本地, 在根目录 <code>python setup install</code> .</p>
<h2 id="2-使用"><a href="#2-使用" class="headerlink" title="2. 使用"></a>2. 使用</h2><p>当我们在终端中键入 <code>untp -h</code> 后, 会得到下面这段输出:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">usage:</div><div class="line">untp ../btn.plist</div><div class="line">untp ../btn.plist -i ../btn.png</div><div class="line">untp ../data</div><div class="line">untp ../data -r</div><div class="line"></div><div class="line">positional arguments:</div><div class="line">  path                  plist file name or directory</div><div class="line"></div><div class="line">optional arguments:</div><div class="line">  -h, --help            show this help message and exit</div><div class="line"></div><div class="line">For file:</div><div class="line">  -i image_file, --image_file image_file</div><div class="line">                        specified image file for plist</div><div class="line">  -o output, --output output</div><div class="line">                        specified output directory</div><div class="line"></div><div class="line">For directory:</div><div class="line">  -r, --recursive</div></pre></td></tr></table></figure>
<p>对于单个 plist 文件, 可以 <code>untp xxx.plist</code> 来拆解它, 会读取 plist 中配置的图片输出到同名的目录中, 可以使用 <code>-i</code> 指定图片, <code>-o</code> 指定输出目录.</p>
<p>对于目录, 使用 <code>untp path</code> path 是包含 <code>plist</code> 文件的目录, 可以使用 <code>-r</code> 参数指定遍历子目录.</p>
<p>(以上)</p>
]]></content>
    
    <summary type="html">
    
      中文使用说明
    
    </summary>
    
    
      <category term="Tool" scheme="http://blog.justbilt.com/tags/Tool/"/>
    
      <category term="untp" scheme="http://blog.justbilt.com/tags/untp/"/>
    
  </entry>
  
  <entry>
    <title>Quick-cocos2d-x utf8 支持</title>
    <link href="http://blog.justbilt.com/2016/09/23/quickx-utf8-support/"/>
    <id>http://blog.justbilt.com/2016/09/23/quickx-utf8-support/</id>
    <published>2016-09-22T22:58:40.000Z</published>
    <updated>2017-07-09T03:09:19.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-需求"><a href="#一-需求" class="headerlink" title="一. 需求"></a>一. 需求</h1><h2 id="1-计算玩家名字字符数"><a href="#1-计算玩家名字字符数" class="headerlink" title="1. 计算玩家名字字符数"></a>1. 计算玩家名字字符数</h2><p>对于这个需求一般情况下 <code>string.len</code> 或 quick 自带的 <code>string.utf8len</code> 就能满足, 但是如果需求是:</p>
<blockquote>
<p>对于像 中文/日文/韩文 这样的方块字一个占 2 个长度, 其他字符占 1 个长度.</p>
</blockquote>
<p>该如何满足呢 ? </p>
<a id="more"></a>
<h2 id="2-屏蔽-emoji-表情"><a href="#2-屏蔽-emoji-表情" class="headerlink" title="2. 屏蔽 emoji 表情"></a>2. 屏蔽 emoji 表情</h2><p>我们游戏的聊天/起名都是不允许输入 emoji 表情的, 那么该如何判断玩家输入的文字中包含 emoji 表情呢 ? </p>
<p>在我之前的文章(<a href="/2016/05/01/quickx-editbox-util/#u4E8C-__u5C4F_u853D_Emoji__u8F93_u5165">Quick-Cocos2d-x EditBox 几个小技巧</a>)中有提到过这个需求, 当时分析了下有两个解决方案:</p>
<ol>
<li>无法输入, 弹出键盘点击表情没有反应</li>
<li>输入完成后, 游戏内点击提交时提示非法</li>
</ol>
<p>本来打算是使用<strong>方法2</strong>的, 苦于无法在 lua 这边识别出 emoji , 所以只能曲线救国的使用的<strong>方法1</strong>, 每个平台得单独实现不说, 还容易出 bug, 出了 bug 亦无法热更新修复.</p>
<p>最近还真是遇到了 bug , 会导致在 ios 上无法使用<strong>九宫格</strong>输入法.</p>
<hr>
<p>以上两个问题, 如果支持 utf8 的话, 我们可以遍历整个字符串, 判断每个字符的 <code>codepoint</code> 是否在某个码区中. 所以我们需要实现这么几个接口:</p>
<ol>
<li>utf8 长度计算</li>
<li>遍历 utf8</li>
<li>utf8 char/byte 实现</li>
</ol>
<h1 id="二-实现"><a href="#二-实现" class="headerlink" title="二. 实现"></a>二. 实现</h1><h2 id="1-使用-clib-实现"><a href="#1-使用-clib-实现" class="headerlink" title="1. 使用 clib 实现"></a>1. 使用 clib 实现</h2><p>Google 搜索 <code>lua utf8</code> 很快发现了 <a href="/2016/05/01/quickx-editbox-util/#u4E8C-__u5C4F_u853D_Emoji__u8F93_u5165">luautf8</a> 这个项目, 100 多个 star , 对于一个 lua 项目, 已经算很多了. 实现也很简单, 就 <code>unidata.h</code> 和 <code>lutf8lib.c</code> 两个文件.</p>
<p>下面我们在 quick 中集成这个项目, 我们在 <code>quick-cocos2d-x/external/lua</code> 目录先新建一个 <code>utf8</code> 目录, 将上面提到的那两个文件下载下来放进去, 修改 <code>lutf8lib.c:1303</code> 行:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//  lua_createtable(L, 0, sizeof(libs)/sizeof(libs[0]));</span></div><div class="line"><span class="comment">//  luaL_register(L, NULL, libs);</span></div><div class="line">  luaL_openlib(L, <span class="string">"utf8"</span>, libs, <span class="number">0</span>);</div></pre></td></tr></table></figure>
<p>为了在别的文件中能够访问到 <code>luaopen_utf8</code> 函数, 我们还需要新建一个 <code>utf8lib.h</code> 头文件:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> LUAUTF8_H</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LUAUTF8_H</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"lua.h"</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> LUALIB_API</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LUALIB_API extern</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"><span class="comment">/*-------------------------------------------------------------------------*\</span></div><div class="line">* Initializes the library.</div><div class="line">\*-------------------------------------------------------------------------*/</div><div class="line"><span class="function">LUALIB_API <span class="keyword">int</span> <span class="title">luaopen_utf8</span><span class="params">(lua_State *L)</span></span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* LUAUTF8_H */</span></span></div></pre></td></tr></table></figure>
<p>下面我们就可以注册这个库了, 修改 <code>cocos/scripting/lua-bindings/manual/network/lua_extensions.c</code> :</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"utf8/lutf8lib.h"</span></span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">luaopen_lua_extensions</span><span class="params">(lua_State *L)</span></span></div><div class="line">&#123;</div><div class="line">    ...</div><div class="line">    luaopen_utf8(L);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>同时我们还需要修改编译脚本, 使得在不同平台上能够编译通过, Android 需要修改</p>
<p> <code>cocos/scripting/lua-bindings/proj.android/Android.mk</code> 文件:</p>
<figure class="highlight mk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">LOCAL_SRC_FILES += ../manual/network/lua_cocos2dx_network_manual.cpp \</div><div class="line">                   ../../../../external/lua/luasocket/usocket.c \</div><div class="line">                   ../../../../external/lua/utf8/lutf8lib.c</div></pre></td></tr></table></figure>
<p>在 <code>LOCAL_SRC_FILES</code> 末尾加上 <code>lutf8lib.c</code> .</p>
<p>iOS/Mac 的话, 在 XCode 中将整个 <code>utf8</code> 目录加入进来就可以呀, 如下图所示:</p>
<p><img src="http://ww2.sinaimg.cn/large/7f870d23gw1f838r4uoz1j207e03u74f.jpg" alt=""></p>
<h2 id="2-纯-lua-实现"><a href="#2-纯-lua-实现" class="headerlink" title="2. 纯 lua 实现"></a>2. 纯 lua 实现</h2><p>如果一切按计划走的话, 是不会有这么一步的, 然而天意难测, 说好的冷更新变成了变成了热更新. 若是还想保留这个功能的话, 只能寻找纯 lua 的解决方案了. 虽然走了不少弯路, 浪费了大量的时间, 最终还是让我找到了: </p>
<p><a href="https://github.com/Stepets/utf8.lua" target="_blank" rel="external">https://github.com/Stepets/utf8.lua</a></p>
<p>将项目中的 <code>utf8.lua</code> 下载下来放到你工程中就可以啦, 就是这么简单.</p>
<h2 id="3-兼容"><a href="#3-兼容" class="headerlink" title="3. 兼容"></a>3. 兼容</h2><p>按说有了纯 lua 的实现后, 我们就可以放弃 c 代码的实现了, 但是想起做 python 的时候, 有好多库的实现为了提高效率, 都会有一份 c/c++ 的实现优先使用. 我们是不是也可以这样子搞, 优先使用 clib 的实现, 若是没有再考虑 lua 的实现 ? 首先, 我们要对比一下这两个库的效率对比.</p>
<p>设计了一个简单的测试案例, 遍历一个 utf8 的字符串, 计算耗时, 得出了这样一份数据:</p>
<table>
<thead>
<tr>
<th>字符数</th>
<th>耗时clib</th>
<th>耗时lua</th>
<th>倍数</th>
</tr>
</thead>
<tbody>
<tr>
<td>10</td>
<td>2.0999999999938e-05</td>
<td>6.8000000000068e-05</td>
<td>3.2380952381081</td>
</tr>
<tr>
<td>138</td>
<td>0.00018899999999999</td>
<td>0.00095199999999995</td>
<td>5.0370370370369</td>
</tr>
<tr>
<td>2919</td>
<td>0.001868</td>
<td>0.01553</td>
<td>8.3137044967881</td>
</tr>
</tbody>
</table>
<p>可以看到至少也有 3 倍的速度提升, 而且随着字符数越来越多, 速度差距会更大. </p>
<p>这个方案是可行的, 我们可用如下代码做兼容:</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> <span class="built_in">type</span>(utf8) ~= <span class="string">"table"</span> <span class="keyword">then</span></div><div class="line">    utf8 = <span class="built_in">require</span>(<span class="string">"your/path/of.utf8"</span>)</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>但是两种实现遍历字符串的 api 略有不同, 需要包装兼容一下:</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">utf8.<span class="built_in">foreach</span> = <span class="function"><span class="keyword">function</span><span class="params">(_str, _func)</span></span></div><div class="line">    <span class="keyword">local</span> index = <span class="number">1</span></div><div class="line">    <span class="keyword">if</span> utf8.<span class="built_in">next</span> <span class="keyword">then</span></div><div class="line">        <span class="keyword">for</span> pos, code <span class="keyword">in</span> utf8.<span class="built_in">next</span>, _str <span class="keyword">do</span></div><div class="line">            <span class="keyword">if</span> _func(index, utf8.<span class="built_in">char</span>(code), code, pos) <span class="keyword">then</span></div><div class="line">                <span class="keyword">return</span></div><div class="line">            <span class="keyword">end</span></div><div class="line">            index = index + <span class="number">1</span></div><div class="line">        <span class="keyword">end</span></div><div class="line">    <span class="keyword">elseif</span> utf8.gensub <span class="keyword">then</span></div><div class="line">        <span class="keyword">for</span> <span class="built_in">char</span>,pos <span class="keyword">in</span> utf8.gensub(_str) <span class="keyword">do</span></div><div class="line">            <span class="keyword">if</span> _func(index, <span class="built_in">char</span>, utf8.<span class="built_in">byte</span>(<span class="built_in">char</span>), pos) <span class="keyword">then</span></div><div class="line">                <span class="keyword">return</span></div><div class="line">            <span class="keyword">end</span></div><div class="line">            index = index + <span class="number">1</span></div><div class="line">        <span class="keyword">end</span></div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="built_in">assert</span>(<span class="literal">false</span>, <span class="string">"no utf8 supports!"</span>)</div><div class="line">    <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<h1 id="附录"><a href="#附录" class="headerlink" title="附录:"></a>附录:</h1><p>附上我们判断玩家姓名和 emoji 的代码, 比较简单, 若有不对之处, 欢迎指正.</p>
<h2 id="玩家姓名长度判断"><a href="#玩家姓名长度判断" class="headerlink" title="玩家姓名长度判断"></a>玩家姓名长度判断</h2><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">local</span> length = <span class="number">0</span></div><div class="line"></div><div class="line">utf8.<span class="built_in">foreach</span>(text, <span class="function"><span class="keyword">function</span><span class="params">(index, char, code, pos)</span></span></div><div class="line">    <span class="comment">-- 中日韩文字一个字符算两个长度</span></div><div class="line">    <span class="keyword">if</span> code &gt;= <span class="number">0x3040</span> <span class="keyword">and</span> code &lt;= <span class="number">0x9fff</span> <span class="keyword">then</span></div><div class="line">        length = length + <span class="number">2</span></div><div class="line">    <span class="keyword">else</span></div><div class="line">        length = length + <span class="number">1</span></div><div class="line">    <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span>)</div></pre></td></tr></table></figure>
<h2 id="emoji-表情判断"><a href="#emoji-表情判断" class="headerlink" title="emoji 表情判断"></a>emoji 表情判断</h2><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">checkContainsEomji</span><span class="params">(text)</span></span></div><div class="line">    <span class="keyword">local</span> contain = <span class="literal">false</span></div><div class="line">    utf8.<span class="built_in">foreach</span>(text, <span class="function"><span class="keyword">function</span><span class="params">(index, char, code, pos)</span></span></div><div class="line">        <span class="comment">-- [^\u0000-\u25ff\u27c0-\uD7FF\uE000-\uFFFF]</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> ((code &gt;= <span class="number">0x0000</span> <span class="keyword">and</span> code &lt;= <span class="number">0x25ff</span>) <span class="keyword">or</span> (code &gt;= <span class="number">0x27c0</span> <span class="keyword">and</span> code &lt;= <span class="number">0xD7FF</span>) <span class="keyword">or</span> (code &gt;= <span class="number">0xE000</span> <span class="keyword">and</span> code &lt;= <span class="number">0xFFFF</span>)) <span class="keyword">then</span></div><div class="line">            contain = <span class="literal">true</span></div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">        <span class="keyword">end</span></div><div class="line">    <span class="keyword">end</span>)</div><div class="line">    <span class="keyword">return</span> contain</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      唉, 什么都得自己搞.
    
    </summary>
    
    
      <category term="Quick-Cocos2d-x" scheme="http://blog.justbilt.com/tags/Quick-Cocos2d-x/"/>
    
      <category term="utf8" scheme="http://blog.justbilt.com/tags/utf8/"/>
    
  </entry>
  
  <entry>
    <title>最近遇到的几个 Quick-cocos2d-x 真机崩溃(二)</title>
    <link href="http://blog.justbilt.com/2016/09/10/quickx-crash-on-phone-2/"/>
    <id>http://blog.justbilt.com/2016/09/10/quickx-crash-on-phone-2/</id>
    <published>2016-09-10T15:28:45.000Z</published>
    <updated>2017-07-09T03:09:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>大概是 8 月中旬的时候, 我们项目发生了一个很严重的线上事故. 在版本更新之后, 部分 Android 玩家反馈点击按钮开始游戏或活动按钮会闪退.</p>
<p>开始收到这个反馈时, 并没有太在意, 心想是不是机型适配有问题 ? 加上当时有别的工作在忙, 就没有去理会. 大概一个小时后, 玩家的邮件像雪花一样纷纷而至, 我才开始意识到, 更新出问题了.</p>
<p>汇总了一下玩家的反馈:</p>
<ol>
<li>新注册账号没有问题, 老账号会崩溃</li>
<li>新服务器没有问题, 老服务器崩溃</li>
<li>删除游戏重装后就没有问题了</li>
</ol>
<p>看着这些条件, 有经验的老司机可能已经看出倪端了, 但当时我并没有看出. 我们平时测试的时候, 多数都会新注册一个账号, 或者将原先的老包删除掉, 所以 Q&amp;A 并没有测试出这个问题, 也没有办法复现这个我问题.</p>
<a id="more"></a>
<p>我们游戏是集成了两个错误统计sdk的, 一个是 Bugtags, 一个是 umeng 错误收集, 但是这两个都是没有办法收集到 native 层面的 crash 的. </p>
<p><img src="http://ww4.sinaimg.cn/large/7f870d23jw1f7xim4h1aaj21b50ej0ul.jpg" alt=""></p>
<p>正当我一筹莫展的时候, 运营人员发来了 umeng 的这个错误列表, 我恍然大悟:</p>
<blockquote>
<p>本地存档出问题了</p>
</blockquote>
<p>因为我们的玩家存档是以 <code>服务器id+玩家id</code> 形式存入的, 所以上面列举的问题一下子就解释的通了.</p>
<h1 id="一-用-getStringForKey-去获取一个-bool-型的存档"><a href="#一-用-getStringForKey-去获取一个-bool-型的存档" class="headerlink" title="一. 用 getStringForKey 去获取一个 bool 型的存档"></a>一. 用 getStringForKey 去获取一个 bool 型的存档</h1><p>后台看到的错误日志是这个样子的:</p>
<blockquote>
<p>java.lang.ClassCastException: java.lang.String cannot be cast to java.lang.Boolean</p>
</blockquote>
<p><img src="/face/yilianmengbi.jpg" alt=""></p>
<p>这也可以? 这个错误闻所未闻, 只能说 Android 那边类型检测太严格了, 同时 cococ 读取存档时没有做异常处理.</p>
<p>有了方向就好办了, 我搜索了代码中所有用到 <code>getStringForKey</code> 的地方, 加上崩溃出现的时机, 很快定位了这个错误发生的原因.</p>
<p>团队的中的一位成员, 这次更新时更换过存档的类型, 之前的某一个数据是以 <code>setBoolForKey/getBoolForKey</code>, 现在更换成了 <code>setStringForKey/getStringForKey</code>, 这个问题不能怪他, 若是我也会遇到这个问题.</p>
<p>修改也很简单, 我换了一个新 key 去 存取/读取 这个存档.</p>
<h1 id="二-setSpriteFrame-“a-png”-传入不存在的-Sprite-Frmae-Name-就会崩溃"><a href="#二-setSpriteFrame-“a-png”-传入不存在的-Sprite-Frmae-Name-就会崩溃" class="headerlink" title="二. setSpriteFrame(“a.png”) 传入不存在的 Sprite Frmae Name 就会崩溃"></a>二. setSpriteFrame(“a.png”) 传入不存在的 Sprite Frmae Name 就会崩溃</h1><p>这个问题以前我没有遇到过, 我甚至都不知道 setSpriteFrame 可以传入 Sprite Frmae Name, 我每次都是 从 SpriteFrameCache 中获取一个 <code>SpriteFrame</code> 对象传入的.</p>
<p>导致这个问题发生原因是我们变化了图片打包策略, 之前用的是纹理图集, 现在改为碎片纹理了. 原理这些图片都在一个纹理图集上, 在游戏开始时已经 loading 过了, 所以不会有问题. 但是改为碎图就会找不到了.</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">newSpriteFrame</span><span class="params">(_name)</span></span></div><div class="line">    <span class="built_in">assert</span>(_name <span class="keyword">and</span> _name ~= <span class="string">""</span>)</div><div class="line">    <span class="comment">-- 尝试在大图中找</span></div><div class="line">    <span class="keyword">local</span> frame = cc.SpriteFrameCache:getInstance():getSpriteFrame(_name)</div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> frame <span class="keyword">then</span></div><div class="line">        <span class="keyword">local</span> texture = cc.Director:getInstance():getTextureCache():addImage(_name)</div><div class="line">        <span class="keyword">if</span> texture <span class="keyword">then</span></div><div class="line">            frame = cc.SpriteFrame:createWithTexture(texture, cc.rect(<span class="number">0</span>, <span class="number">0</span>, texture:getContentSize().width, texture:getContentSize().height))</div><div class="line">            cc.SpriteFrameCache:getInstance():addSpriteFrame(frame, _name)</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="built_in">print</span>(<span class="string">"[ERROR]no such file:"</span>, _name)</div><div class="line">        <span class="keyword">end</span></div><div class="line">    <span class="keyword">end</span> </div><div class="line"></div><div class="line">    <span class="keyword">return</span> frame</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>我们封装了这个函数来兼容这个 <code>纹理图集/碎片纹理</code>, 这样这个问题就解决了.</p>
<h1 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h1><p>每经历一次事故, 总要有所收获, 除了下次同样的问题不再发生, 流程上是否还有什么值得优化的地方 ?</p>
<h2 id="1-重视线上错误"><a href="#1-重视线上错误" class="headerlink" title="1. 重视线上错误"></a>1. 重视线上错误</h2><p>由于我一开对这个错误的轻视, 导致问题没有在第一时间控制住, 损失的不只是收入, 更是玩家对我们信心, 如果一个游戏经常出事故, 你还会去玩吗?</p>
<p>错误率对我们而言只是一个数字, 是一个概率, 但是具体到某一个发生故障的玩家, 对他而言就是 100% , 就是焦急, 愤怒.</p>
<h2 id="2-真实的线上环境测试"><a href="#2-真实的线上环境测试" class="headerlink" title="2. 真实的线上环境测试"></a>2. 真实的线上环境测试</h2><p>这个问题发生, 有很大一部分原因是我们的测试没有在一个真实的环境中去测试, 应该保证一个手机只安装线上包, 模拟真实玩家, 每天去玩一段时间.</p>
<h2 id="3-错误收集系统的选择"><a href="#3-错误收集系统的选择" class="headerlink" title="3. 错误收集系统的选择"></a>3. 错误收集系统的选择</h2><p>我们采用的 bugtags 不具有完全完整的错误收集能力, 对错误的检索也很弱, 甚至不如免费 bugly . 为此我要付一定责任, 当初选择的时候, 没有完整的调研对比过, 只是看到这个还不错就选择了.</p>
<p>做出判断前一定要慎重思考.</p>
]]></content>
    
    <summary type="html">
    
      卧槽, 又崩溃了!
    
    </summary>
    
    
      <category term="Quick-Cocos2d-x" scheme="http://blog.justbilt.com/tags/Quick-Cocos2d-x/"/>
    
      <category term="crash" scheme="http://blog.justbilt.com/tags/crash/"/>
    
  </entry>
  
  <entry>
    <title>最近搞 iOS 版遇到的一些问题和技巧 (三)</title>
    <link href="http://blog.justbilt.com/2016/09/05/ios-dev-tips-3/"/>
    <id>http://blog.justbilt.com/2016/09/05/ios-dev-tips-3/</id>
    <published>2016-09-05T15:50:12.000Z</published>
    <updated>2017-04-23T04:37:20.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-iOS-内购返回商品无效-invalid-product"><a href="#一-iOS-内购返回商品无效-invalid-product" class="headerlink" title="一. iOS 内购返回商品无效 invalid product"></a>一. iOS 内购返回商品无效 invalid product</h1><p>我使用 Quick-cocos2d-x 内置的 store 类请求商品信息时, 收到这样的错误:</p>
<blockquote>
<p>nvalidProductIdentifiers [CCStore_obj]<br>[CCStore_obj] productsRequestDidReceiveResponse() invalid pid: com.xxx.xxx</p>
</blockquote>
<p>首先, <strong>检查你请求的商品 id 在 iTunes 后台是否创建</strong>, 是否拼写错误. 如果没有问题, 那么就不太好办了, 会有很多原因导致这个问题.</p>
<p>ZZB_Amoy 博客的<a href="http://blog.sina.com.cn/s/blog_a6a46b330101dgju.html" target="_blank" rel="external">这篇文章</a>总结了下可能的原因, 如下:</p>
<blockquote>
<ul>
<li>创建的App ID是否启用了IAP功能。</li>
<li>商品信息是否配置到iTurn Connect，并到达“Ready to Submit”状态。</li>
<li>在iTurn Connect中创建Test User，并收取邮件激活。之后登录到测试用手机的设置页面中（Store选项）。</li>
<li>App的Bundle Id是否和后台配置的App Id一致。</li>
<li>是否创建相应的provisioning profile，并用此签名App。</li>
<li>iTurn Connect后台配置完商品信息后，是否等待若干小时生效。</li>
<li>SKProductsRequest请求的商品Id必须和iTurn Connect中配置的一致。（如：com.test.product.xxx）</li>
<li>iTunes Connect中配置的银行信息是否正确。</li>
<li>是否先删除旧App，再重新编译生成新的。</li>
<li>请不要使用越狱手机测试。</li>
</ul>
</blockquote>
<p>下面说说我两次遇到这个问题的解决方案:</p>
<ol>
<li>如果游戏发布区域中没有手机中 App Store 当前区的话, 需要先登陆下对应区域创建的测试账号, 将商店切换到对应区域.</li>
<li>完善苹果开发者账号所能完善的信息, 如付款信息呀什么的, 然后莫名其妙就解决了.</li>
<li>商品 id 大小写错误, 在 chrome 搜索时是忽略大小的.</li>
</ol>
<blockquote>
<p>注：在测试阶段，可以不用上传APP软件包，但必须创建测试用Apple Id，并在手机设置中（store选项）登录。</p>
</blockquote>
<h1 id="二-iOS-运行崩溃-unrecognized-selector-sent-to-instance"><a href="#二-iOS-运行崩溃-unrecognized-selector-sent-to-instance" class="headerlink" title="二. iOS 运行崩溃 unrecognized selector sent to instance"></a>二. iOS 运行崩溃 unrecognized selector sent to instance</h1><p>运行游戏过程中收到如下错误:</p>
<blockquote>
<p>[1515:710439] -[AppController window]: unrecognized selector sent to instance 0x2c85c00<br>libc++abi.dylib: terminate_handler unexpectedly threw an exception</p>
</blockquote>
<p>这个在接入某一个平台 sdk 时遇到的问题, 于是便问了下他们的技术, 很快解决了问题. </p>
<h4 id="1-修改-AppController-h-中-window-变量的声明形式"><a href="#1-修改-AppController-h-中-window-变量的声明形式" class="headerlink" title="1. 修改 AppController.h 中 window 变量的声明形式"></a>1. 修改 AppController.h 中 window 变量的声明形式</h4><p><img src="http://ww2.sinaimg.cn/large/7f870d23gw1f7j62j0mfuj20dw02n3yy.jpg" alt=""></p>
<h4 id="2-修改-AppController-mm"><a href="#2-修改-AppController-mm" class="headerlink" title="2. 修改 AppController.mm"></a>2. 修改 AppController.mm</h4><p><img src="http://ww2.sinaimg.cn/large/7f870d23gw1f7j665yyacj207901zq32.jpg" alt=""></p>
<p>虽然问题解决了, 但是我并不明白各种缘由. Google 了下, 大概明白了, 原来如此. 从错误中我们可以看到这句 <code>[AppController window]</code> , 从语法来看, 这是要调用 AppController 的 window 函数, 但是在我们之前的写法中没有实现这个函数, 便出错了. 而使用 <code>@property</code> 这个东西, 会自动帮你实现一个 <code>window/setWindow</code> 函数, 这样就不会找不到这个函数了.</p>
<h1 id="三-游戏在低于-ios9-的系统启动崩溃"><a href="#三-游戏在低于-ios9-的系统启动崩溃" class="headerlink" title="三. 游戏在低于 ios9 的系统启动崩溃"></a>三. 游戏在低于 ios9 的系统启动崩溃</h1><p>这个也是在接入第三方 sdk 时遇到的问题, 游戏一启动就会崩溃, 收到错误如下:</p>
<blockquote>
<p>dyld: Symbol not found: _OBJC<em>CLASS</em>$_SFSafariViewController<br>  Referenced from: /var/mobile/Applications/CF4146B4-3F79-4644-86CA-F19E52E64BAA/superarmoreddivision.app/superarmoreddivision<br>  Expected in: /System/Library/Frameworks/SafariServices.framework/SafariServices<br> in /var/mobile/Applications/CF4146B4-3F79-4644-86CA-F19E52E64BAA/superarmoreddivision.app/superarmoreddivision</p>
</blockquote>
<p>Google 了一下, 没有任何人遇到过这样的问题, 这就十分棘手了, 完全不知从何入手. 经过一番探索, 找到了几个有用的线索:</p>
<ol>
<li>SFSafariViewController 这个类是 ios 9 才引入的, 这和我们已知的信息相符.</li>
<li>所幸的是我们的游戏有多个 Scheme , 每个 Scheme 接入不同的 sdk . 其他的 Scheme 的都可以正常运行.</li>
</ol>
<p>这就可以肯定是某个 sdk 中使用了 <code>SFSafariViewController</code> 这个类, 但是还是没有办法定位是那个 sdk . 我不知道是否有一个命令查找符号引用, 因此只能采用最笨的排除法了, 我将引入的 sdk 依次删除, 看是否能够运行.</p>
<p>最终定位到了某个广告统计 sdk , 在询问其 ios 技术人员后得到了解决方案. 原来他们 sdk 需要<strong>以 <code>optional</code> 的形式引入 <code>SafariServices.framework</code></strong>.</p>
<p><img src="http://ww1.sinaimg.cn/large/7f870d23gw1f7kanujs5rj20ol018jrf.jpg" alt=""></p>
<p>都怪我没有仔细阅读文档, 白白耽误了一段时间, 下次一定要注意!</p>
<h1 id="四-Facebook-登录崩溃"><a href="#四-Facebook-登录崩溃" class="headerlink" title="四. Facebook 登录崩溃"></a>四. Facebook 登录崩溃</h1><p>集成 Facebook sdk 时, 调用登录接口游戏就会崩溃, 这个问题 Google 一下就能解决, 解决方案也很简单, 在 Info.plist 中加入下面几行代码即可:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>LSApplicationQueriesSchemes<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">array</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>fbapi<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>fb-messenger-api<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>fbauth2<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>fbshareextension<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">array</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Stackoverflow 上的答案可以<a href="http://stackoverflow.com/a/33489214" target="_blank" rel="external">移步这里</a>, Facebook 官网上也<a href="https://developers.facebook.com/docs/ios/ios9" target="_blank" rel="external">给了解答</a>.</p>
<h1 id="五-ios9-状态栏无法隐藏"><a href="#五-ios9-状态栏无法隐藏" class="headerlink" title="五. ios9 状态栏无法隐藏"></a>五. ios9 状态栏无法隐藏</h1><p>隐藏状态栏在 ios9 上换了一种方式, 还是需要在 Info.plist 中进行配置:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>UIStatusBarHidden<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">true</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>UIViewControllerBasedStatusBarAppearance<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">false</span>/&gt;</span></div></pre></td></tr></table></figure>
<p>Stackoverflow 上的答案可以<a href="http://stackoverflow.com/a/32965748" target="_blank" rel="external">移步这里</a>.</p>
<h1 id="六-showAlert-诡异崩溃"><a href="#六-showAlert-诡异崩溃" class="headerlink" title="六. showAlert 诡异崩溃"></a>六. showAlert 诡异崩溃</h1><p>游戏内的一些弹框为了保证在游戏的最上层显示, 偷懒使用了 Quick-cocos2d-x 提供的 <code>device.showAlert</code> 接口. showAlert 内部使用 <code>UIAlertView</code> 实现, 运行一直良好, 有一天突然就不行了, 一调用就崩溃. </p>
<p>各种办法都试过了, 网上都说是线程安全问题, 我试了一下各种处理都不行, 打断点跟踪到最底层也无济于事. 几近绝望之时, @bin 的一句话提醒了我:</p>
<blockquote>
<p>会不是屏幕方向的问题 ? </p>
</blockquote>
<p>最终一番尝试, 删除了 <code>RootViewController.mm</code> 中几个屏幕方向相关的函数:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">*/</div><div class="line"><span class="comment">// Override to allow orientations other than the default portrait orientation.</span></div><div class="line"><span class="comment">// This method is deprecated on ios6</span></div><div class="line">- (<span class="built_in">BOOL</span>)shouldAutorotateToInterfaceOrientation:(<span class="built_in">UIInterfaceOrientation</span>)interfaceOrientation &#123;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (ConfigParser::getInstance()-&gt;isLanscape()) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">UIInterfaceOrientationIsLandscape</span>( interfaceOrientation );</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">UIInterfaceOrientationIsPortrait</span>( interfaceOrientation );</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// For ios6, use supportedInterfaceOrientations &amp; shouldAutorotate instead</span></div><div class="line">- (<span class="built_in">NSUInteger</span>) supportedInterfaceOrientations&#123;</div><div class="line"><span class="meta">#ifdef __IPHONE_6_0</span></div><div class="line">    <span class="keyword">if</span> (ConfigParser::getInstance()-&gt;isLanscape()) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">UIInterfaceOrientationMaskLandscape</span>;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">UIInterfaceOrientationMaskPortraitUpsideDown</span>;</div><div class="line">    &#125;</div><div class="line"><span class="meta">#endif</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">BOOL</span>) shouldAutorotate &#123;</div><div class="line">    <span class="keyword">if</span> (ConfigParser::getInstance()-&gt;isLanscape()) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个 bug 出现之诡异, 解决方案之诡异, 在我遇到的 bug 中也算是很少见了.</p>
]]></content>
    
    <summary type="html">
    
      万一遇上了呢?
    
    </summary>
    
    
      <category term="iOS" scheme="http://blog.justbilt.com/tags/iOS/"/>
    
      <category term="iOS-Dev-Tips" scheme="http://blog.justbilt.com/tags/iOS-Dev-Tips/"/>
    
  </entry>
  
  <entry>
    <title>更简洁的 lua 逻辑代码</title>
    <link href="http://blog.justbilt.com/2016/06/26/terse-lua-code/"/>
    <id>http://blog.justbilt.com/2016/06/26/terse-lua-code/</id>
    <published>2016-06-26T06:28:11.000Z</published>
    <updated>2017-04-23T04:55:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>爱因斯坦的质能方程 <code>E=MC^2</code>, 用在编程界同样适用 <code>Error = More Code ^ 2</code>. 代码越多, 出错的可能性就更大, 这个结论很正确呀. 那么我们如何使用更少的代码实现同样的需求呢 ?</p>
<p>一. 普通技</p>
<h2 id="1-bool-值与-if-语句的择决"><a href="#1-bool-值与-if-语句的择决" class="headerlink" title="1. bool 值与 if 语句的择决"></a>1. bool 值与 if 语句的择决</h2><p>让我们来看一段代码:</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">local</span> monthly_is_taken = app.player:getAttribute(<span class="string">"monthly_is_taken"</span>)</div><div class="line"><span class="keyword">if</span> monthly_is_taken == <span class="literal">true</span> <span class="keyword">then</span></div><div class="line">    self._monthly_take:setButtonEnabled(<span class="literal">false</span>)</div><div class="line"><span class="keyword">else</span></div><div class="line">    self._monthly_take:setButtonEnabled(<span class="literal">true</span>)</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>显然这个 if 语句是没有必要的, 我们可以直接使用 bool 进行函数参数传递:</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">local</span> monthly_is_taken = app.player:getAttribute(<span class="string">"monthly_is_taken"</span>)</div><div class="line">self._monthly_take:setButtonEnabled(monthly_is_taken)</div></pre></td></tr></table></figure>
<p>我们可以看到减少了 %60 的代码, 逻辑反而变得更清晰了.</p>
<h2 id="2-减少非必须的中间变量"><a href="#2-减少非必须的中间变量" class="headerlink" title="2. 减少非必须的中间变量"></a>2. 减少非必须的中间变量</h2><p>我们都明白了中间变量的意义, 主要是为提高代码的可读性. 但是有时候中间变量的太多, 在增加码量的同时, 也会打断我们的我们的思路.</p>
<p>比如我们要算一个等差数列的和, 我们都知道使用公式 <code>(首项+末项)*项数/2</code>, 我们看一下这个实现:</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">local</span> array = &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>&#125;</div><div class="line"><span class="keyword">local</span> array_len = #array</div><div class="line"><span class="keyword">local</span> first_element = array[<span class="number">1</span>]</div><div class="line"><span class="keyword">local</span> last_element = array[array_len]</div><div class="line"><span class="keyword">local</span> sum = (first_element+last_element)*array_len/<span class="number">2</span></div></pre></td></tr></table></figure>
<p>就不如下面这个实现:</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">local</span> array = &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>&#125;</div><div class="line"><span class="keyword">local</span> sum = (array[<span class="number">1</span>]+array[#array])*#array/<span class="number">2</span></div></pre></td></tr></table></figure>
<p>这样的话, 我们上一个示例的代码可以进一步精简:</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">self._monthly_take:setButtonEnabled(app.player:getAttribute(<span class="string">"monthly_is_taken"</span>))</div></pre></td></tr></table></figure>
<h2 id="3-使用-elseif-优化-if-语句"><a href="#3-使用-elseif-优化-if-语句" class="headerlink" title="3. 使用 elseif 优化 if 语句"></a>3. 使用 elseif 优化 if 语句</h2><p>如果是逻辑相悖的判断条件, 我们可以使用 elseif 语句连接, 而不用多个 if 语句. </p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> self.item_id == <span class="string">"43"</span> <span class="keyword">then</span></div><div class="line">    <span class="comment">-- do some thing</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> self.item_id == <span class="string">"69"</span> <span class="keyword">then</span></div><div class="line">    <span class="comment">-- do some thing</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> self.item_id == <span class="string">"75"</span> <span class="keyword">then</span></div><div class="line">    <span class="comment">-- do some thing</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>我们可以修改为:</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> self.item_id == <span class="string">"43"</span> <span class="keyword">then</span></div><div class="line">    <span class="comment">-- do some thing</span></div><div class="line"><span class="keyword">elseif</span> self.item_id == <span class="string">"69"</span> <span class="keyword">then</span></div><div class="line">    <span class="comment">-- do some thing</span></div><div class="line"><span class="keyword">elseif</span> self.item_id == <span class="string">"75"</span> <span class="keyword">then</span></div><div class="line">    <span class="comment">-- do some thing</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>这样修改后, 对逻辑的执行时间也优化哟, 因为一但有一个 if 语句命中, 后面的 elseif 都不会再去判断了.</p>
<h2 id="4-使用-config-优化-if-elseif-语句"><a href="#4-使用-config-优化-if-elseif-语句" class="headerlink" title="4. 使用 config 优化 if-elseif 语句"></a>4. 使用 config 优化 if-elseif 语句</h2><p>如果一个逻辑中有大量的 if-elseif 语句, 我么就可以使用 config 的形式替换掉它, 使得逻辑更加简洁.</p>
<p>让我们看一个示例:</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> _data.<span class="built_in">type</span> == GameEnum.MailType.MAIL_TYPE_SYSTEM <span class="keyword">then</span></div><div class="line">    self._title:setString(_data.content.content.subtype)</div><div class="line">    self._name:setString(TextEnum.CNReset.SYSTEM)</div><div class="line">    self.title = TextEnum.CNReset.SYSTEM_INFORMATION</div><div class="line"><span class="keyword">elseif</span> _data.<span class="built_in">type</span> == GameEnum.MailType.MAIL_TYPE_ALLIANCE_KICK <span class="keyword">then</span></div><div class="line">    self._title:setString(TextEnum.CNReset.KICK)</div><div class="line">    self._name:setString(TextEnum.CNReset.SYSTEM)</div><div class="line">    self.title = TextEnum.CNReset.KICK</div><div class="line"><span class="keyword">elseif</span> _data.<span class="built_in">type</span> == GameEnum.MailType.MAIL_TYPE_ALLIANCE_JOIN <span class="keyword">then</span></div><div class="line">    self._title:setString(TextEnum.CNReset.JOIN_IN)</div><div class="line">    self._name:setString(TextEnum.CNReset.SYSTEM)</div><div class="line">    self.title = TextEnum.CNReset.JOIN_IN</div><div class="line"><span class="keyword">elseif</span> _data.<span class="built_in">type</span> == GameEnum.MailType.MAIL_TYPE_ALLIANCE_REJECT <span class="keyword">then</span></div><div class="line">    ...</div></pre></td></tr></table></figure>
<p>这是一段关于邮件标题的逻辑, 这里只节选出了 1/4 的代码, 真的是又臭又长. 我们可以这样子去优化它:</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">local</span> CONFIG = &#123;</div><div class="line">    [GameEnum.MailType.MAIL_TYPE_SYSTEM] = &#123;title = XXX, name = XXX&#125;,</div><div class="line">    [GameEnum.MailType.MAIL_TYPE_ALLIANCE_KICK] = &#123;title = XXX, name = XXX&#125;,</div><div class="line">    [GameEnum.MailType.MAIL_TYPE_ALLIANCE_JOIN] = &#123;title = XXX, name = XXX&#125;,</div><div class="line">    [GameEnum.MailType.MAIL_TYPE_ALLIANCE_REJECT] = &#123;title = XXX, name = XXX&#125;,</div><div class="line">    ...</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">local</span> <span class="built_in">config</span> = CONFIG[_data.<span class="built_in">type</span>]</div><div class="line"><span class="keyword">if</span> <span class="built_in">config</span> <span class="keyword">then</span></div><div class="line">    self._title:setString(<span class="built_in">config</span>.title)</div><div class="line">    self._name:setString(<span class="built_in">config</span>.name)</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>因为只是代码节选, 所以上面修改是一段伪代码, 但是看起来超级清爽的有木有! 对于一开始无法确定的数据如何配置呢? 我们可以配置一个 <code>function</code>, 用的时候取出来调用就可以啦.</p>
<h1 id="二-黑科技"><a href="#二-黑科技" class="headerlink" title="二. 黑科技"></a>二. 黑科技</h1><h2 id="1-数据默认值的设定"><a href="#1-数据默认值的设定" class="headerlink" title="1. 数据默认值的设定"></a>1. 数据默认值的设定</h2><p>当我们拿到一段数据后, 总是要先预处理数据, 后面才是使用数据. 预处理阶段很重要的一步就是某些数据的默认值.</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum3</span><span class="params">(_num1, _num2, _num3)</span></span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> _num1 <span class="keyword">then</span></div><div class="line">        _num1 = <span class="number">0</span></div><div class="line">    <span class="keyword">end</span> </div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> _num2 <span class="keyword">then</span></div><div class="line">        _num2 = <span class="number">0</span></div><div class="line">    <span class="keyword">end</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> _num3 <span class="keyword">then</span></div><div class="line">        _num3 = <span class="number">0</span></div><div class="line">    <span class="keyword">end</span></div><div class="line">    <span class="keyword">return</span> _num1 +　_num2 + _num3</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>很繁琐是不是, 这时候我们可以使用 and 和 or 来优化默认值的设置:</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum3</span><span class="params">(_num1, _num2, _num3)</span></span></div><div class="line">    _num1 = _num1 <span class="keyword">or</span> <span class="number">0</span></div><div class="line">    _num2 = _num2 <span class="keyword">or</span> <span class="number">0</span></div><div class="line">    _num3 = _num3 <span class="keyword">or</span> <span class="number">0</span></div><div class="line">    <span class="keyword">return</span> _num1 +　_num2 + _num3</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>当 <code>or</code> 的前面部分是 <code>nil</code> 或者 <code>false</code> 的情况下, 返回这个表达式的值后面部分. 下面我列举一下常用类型的默认值用法:</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- number</span></div><div class="line">a = a <span class="keyword">or</span> <span class="number">0</span></div><div class="line"><span class="comment">-- string</span></div><div class="line">a = a <span class="keyword">or</span> <span class="string">""</span> </div><div class="line"><span class="comment">-- function</span></div><div class="line">a = a <span class="keyword">or</span> <span class="function"><span class="keyword">function</span><span class="params">()</span></span><span class="keyword">end</span></div><div class="line"><span class="comment">-- table</span></div><div class="line">a = a <span class="keyword">or</span> &#123;&#125;</div><div class="line"><span class="comment">-- boolean</span></div><div class="line">a = a == <span class="literal">nil</span> <span class="keyword">and</span> <span class="literal">true</span></div></pre></td></tr></table></figure>
<p>这里值得一提的是 <code>boolean</code> 类型, 如果希望默认值是 false 话, 就不需要默认值, 因为 nil 和 false 对于判断来说以意义一致. 而如果希望默认值是 true 的话, 并不是 <code>a = a or true</code>, 而是 <code>a == nil and true</code>, 大家可以细想一下其中的含义.</p>
<h2 id="2-table-中元素的初始化"><a href="#2-table-中元素的初始化" class="headerlink" title="2. table 中元素的初始化"></a>2. table 中元素的初始化</h2><p>比如我们要统计一个列表中, 每个元素出现的次数:</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">local</span> list = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">3</span>&#125;</div><div class="line"><span class="keyword">local</span> counter = &#123;&#125;</div><div class="line"><span class="keyword">for</span> i,v <span class="keyword">in</span> <span class="built_in">ipairs</span>(list) <span class="keyword">do</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> counter[v] <span class="keyword">then</span></div><div class="line">        counter[v] = <span class="number">0</span></div><div class="line">    <span class="keyword">end</span></div><div class="line">    counter[v] = counter[v] + <span class="number">1</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>因为 <code>counter</code> 不可能提前初始化好, 所以总是要判断存不存在这个元素, 我们也可以利用上面提到的技巧做这个事情:</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">local</span> list = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">3</span>&#125;</div><div class="line"><span class="keyword">local</span> counter = &#123;&#125;</div><div class="line"><span class="keyword">for</span> i,v <span class="keyword">in</span> <span class="built_in">ipairs</span>(list) <span class="keyword">do</span></div><div class="line">    counter[v] = (counter[v] <span class="keyword">or</span> <span class="number">0</span>) + <span class="number">1</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>是不是变得很简洁 ?</p>
]]></content>
    
    <summary type="html">
    
      奇技淫巧耳!
    
    </summary>
    
    
      <category term="neat-freak" scheme="http://blog.justbilt.com/tags/neat-freak/"/>
    
      <category term="Lua" scheme="http://blog.justbilt.com/tags/Lua/"/>
    
      <category term="code-style" scheme="http://blog.justbilt.com/tags/code-style/"/>
    
  </entry>
  
  <entry>
    <title>最近搞 iOS 版遇到的一些问题和技巧 (二)</title>
    <link href="http://blog.justbilt.com/2016/06/26/ios-dev-tips-2/"/>
    <id>http://blog.justbilt.com/2016/06/26/ios-dev-tips-2/</id>
    <published>2016-06-26T03:38:44.000Z</published>
    <updated>2017-04-23T04:37:20.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-XCode-Could-not-find-Developer-Disk-Image"><a href="#一-XCode-Could-not-find-Developer-Disk-Image" class="headerlink" title="一. XCode: Could not find Developer Disk Image"></a>一. XCode: Could not find Developer Disk Image</h2><p><img src="http://static.zybuluo.com/justbilt/84lvyg8n11lmtefi02pirqup/101138-1ab6ab96d37904bd.jpeg" alt="101138-1ab6ab96d37904bd.jpeg-4.5kB"><br><strong>解决方案:</strong><br><a href="http://www.jianshu.com/p/3930df903a44" target="_blank" rel="external">http://www.jianshu.com/p/3930df903a44</a><br>这个问题可能是因为你 XCode 没有下载对应 iOS 的 SDK 导致, 一般情况需要同步更新 XCode.</p>
<h2 id="二-XCode-无法导出-Archive-的项目"><a href="#二-XCode-无法导出-Archive-的项目" class="headerlink" title="二. XCode: 无法导出 Archive 的项目"></a>二. XCode: 无法导出 Archive 的项目</h2><p>这个问题有可能是你项目 Team 选择的是一个没有开发者资格的账号导致的, 虽然可以正常开发, 真机调试, 但是是不能发布的, 所以也无法 Export .<br><strong>解决方案:</strong></p>
<ol>
<li>更换一个有开发者资格的账号重新 Archive 导出, 但是 Bundle ID 就得换一个了.</li>
<li>通过命令行工具导出.<br>在 Organizer 中找到你想导出的 Archive, 右键选择在文件夹中显示, 复制路径, 打开终端:<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xcodebuild -exportArchive -exportFormat ipa -archivePath your-archive-file-name.xcarchive -exportPath ~/Desktop/test.ipa</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="三-XCode-App-Installation-failed"><a href="#三-XCode-App-Installation-failed" class="headerlink" title="三. XCode: App Installation failed"></a>三. XCode: App Installation failed</h2><p><img src="http://static.zybuluo.com/justbilt/kl9sahl74sqfnxgjem57f390/Unknown.png" alt="Unknown.png-45.1kB"><br>很可能是之前手机已经装过一个同 Bundle ID 的应用, 但是现在换了签名.<br><strong>解决方案:</strong><br>删掉手机已经安装的那个应用就可以啦.</p>
<h2 id="四-XCode-Failed-to-code-sign-“xxxx”"><a href="#四-XCode-Failed-to-code-sign-“xxxx”" class="headerlink" title="四. XCode: Failed to code sign “xxxx”"></a>四. XCode: Failed to code sign “xxxx”</h2><p><img src="http://static.zybuluo.com/justbilt/eb80q3re93fflmiuhygk4f1m/QQ20160626-0.png" alt="QQ20160626-0.png-437.7kB"><br>签名失败了, 这种情况一般发生在使用别人给的证书打包时. 这时候我们项目 <code>Build Setting &gt; Code Signing Identity</code> 就不能选择 <code>iOS Developer</code>, 而是要选择导入的签名文件.</p>
<h2 id="五-内购-无法连接到-iTunes-Store"><a href="#五-内购-无法连接到-iTunes-Store" class="headerlink" title="五. 内购: 无法连接到 iTunes Store"></a>五. 内购: 无法连接到 iTunes Store</h2><p>如果没有发布应用的话, 需要用沙盒测试账号来测试. 我们需要先在 <code>设置&gt;iTunes Store 和 App Store</code>中 <strong>注销账号</strong>, 然后打开游戏, 开始购买, 这时候输入你的测试账号. 成功后如果有跳转 App Store 的话或者绑定付款方式的话, 不同理会, 再返回应用购买就可以了.</p>
<h2 id="六-崩溃-showAlert-崩溃"><a href="#六-崩溃-showAlert-崩溃" class="headerlink" title="六. 崩溃: showAlert 崩溃"></a>六. 崩溃: showAlert 崩溃</h2><p>某一次突然, 一旦调用 Quick-cocos2d-x 提供的 <code>device.showAlert</code> 就会崩溃, 断点调试无果, 崩溃时提示的内容也不尽相同.<br><strong>解决方案:</strong><br>删除 <code>RootViewController.mm</code> 中所有和屏幕方向代码, 就解决啦.</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">BOOL</span>)shouldAutorotateToInterfaceOrientation:(<span class="built_in">UIInterfaceOrientation</span>)interfaceOrientation</div><div class="line">- (<span class="built_in">NSUInteger</span>) supportedInterfaceOrientations</div><div class="line">- (<span class="built_in">BOOL</span>) shouldAutorotate</div><div class="line">- (<span class="keyword">void</span>)didRotateFromInterfaceOrientation:(<span class="built_in">UIInterfaceOrientation</span>)fromInterfaceOrientation</div></pre></td></tr></table></figure>
<h2 id="七-崩溃-iOS-9-2-播放视频崩溃"><a href="#七-崩溃-iOS-9-2-播放视频崩溃" class="headerlink" title="七. 崩溃: iOS 9.2+ 播放视频崩溃"></a>七. 崩溃: iOS 9.2+ 播放视频崩溃</h2><p>感谢 @子龙山人 大神提供的解决方案, <a href="https://github.com/cocos2d/cocos2d-x/issues/14855" target="_blank" rel="external">点击这里查看</a>.</p>
<p>将 <code>UIVideoPlayer-ios.mm</code> 文件 <code>~VideoPlayer()</code> 函数中的 <code>dealloc</code> 修改为 <code>release</code> 即可.</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">-        [((<span class="built_in">UIVideoViewWrapperIos</span>*)_videoView) dealloc];</div><div class="line">+        [((<span class="built_in">UIVideoViewWrapperIos</span>*)_videoView) release];</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      万一遇上了呢?
    
    </summary>
    
    
      <category term="iOS" scheme="http://blog.justbilt.com/tags/iOS/"/>
    
      <category term="iOS-Dev-Tips" scheme="http://blog.justbilt.com/tags/iOS-Dev-Tips/"/>
    
  </entry>
  
  <entry>
    <title>Quick-cocos2d-x 适配 IPV6</title>
    <link href="http://blog.justbilt.com/2016/06/19/quickx-ipv6/"/>
    <id>http://blog.justbilt.com/2016/06/19/quickx-ipv6/</id>
    <published>2016-06-19T07:39:44.000Z</published>
    <updated>2017-04-23T04:37:58.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-IPV6-是啥"><a href="#一-IPV6-是啥" class="headerlink" title="一. IPV6 是啥 ?"></a>一. IPV6 是啥 ?</h1><p>这两天一个运营的同事跑过来问我:</p>
<blockquote>
<p>他: 咱们的游戏适配那啥 VIP6 了么?<br>我: ….</p>
</blockquote>
<p>苹果商店在儿童节之后就不允许未适配 IPV6 的应用上架了, IPV6 是啥 ? 需要做些什么呢 ? 看完这两篇文章就明白了:</p>
<p><a href="http://www.jianshu.com/p/a6bab07c4062" target="_blank" rel="external">iOS应用支持IPV6，就那点事儿</a><br><a href="http://www.jianshu.com/p/69ed4489762c" target="_blank" rel="external">针对苹果最新审核要求为应用兼容IPv6</a></p>
<p>虽然这两篇文章是针对应用的, 但是从中我们也能了解大概的做法:</p>
<ol>
<li>不建议使用底层的网络API</li>
<li>不要用IP地址</li>
</ol>
<h1 id="二-COCOS2D-X-适配-IPV6"><a href="#二-COCOS2D-X-适配-IPV6" class="headerlink" title="二. COCOS2D-X 适配 IPV6"></a>二. COCOS2D-X 适配 IPV6</h1><p>cocos 依赖的三方库涉及到 IPV6 问题的库为 <code>curl</code>, <code>websocket</code>, cocos 自己提供的模块需要适配的有: </p>
<ol>
<li>HttpClient</li>
<li>AssetsManagerEx</li>
<li>SocketIO</li>
<li>WebSocket</li>
<li>Console</li>
<li>ScriptingCore</li>
</ol>
<p>cocos 官方也第一时间适配了 IPV6, 具体内容可以看这篇文章:<a href="https://mp.weixin.qq.com/s?__biz=MjM5ODAxNTM2NA==&amp;mid=2659642350&amp;idx=1&amp;sn=a7db1bb86e965f8408c1687f73b23c7e&amp;scene=1&amp;srcid=0619ztJlty4HuLRBOll0Yr6V&amp;key=18e81ac7415f67c4acff47973e6979565cda32dd8f6c87dca6f733d6e6b4118817536543eb3844b8c890968fdbb06eed&amp;ascene=0&amp;uin=Mjk2MDM0NjgyMA%3D%3D&amp;devicetype=iMac+MacBookAir6%2C2+OSX+OSX+10.10.5+build(14F1021)&amp;version=11020201&amp;pass_ticket=WECSEWT6jaVZNRKNNwilauFgBa%2FhDiF9DioAiHKmly2CArsnkf%2FQbQJchxVf%2F7bk" target="_blank" rel="external">儿童节后苹果爸爸只爱IPv6 Cocos2d-x第一时间支持</a>, 里面描述的很简单:</p>
<blockquote>
<p>如果你需要支持纯IPv6网络，只需要更新CURL和libwebsocket网络。</p>
</blockquote>
<p>让我们尝试一下.</p>
<h2 id="1-下载-cocos2d-x-3rd-party-libs-bin"><a href="#1-下载-cocos2d-x-3rd-party-libs-bin" class="headerlink" title="1. 下载 cocos2d-x-3rd-party-libs-bin"></a>1. 下载 cocos2d-x-3rd-party-libs-bin</h2><p>这一步看似很简单, 实则不然. 你不会想到从 github 上下载一个 100 多 MB 的文件是多麽困难, 为此我花费了近 2个小时的时间.</p>
<p>我下载的是 99 版的, 解压代用.</p>
<h2 id="2-更新-curl"><a href="#2-更新-curl" class="headerlink" title="2. 更新 curl"></a>2. 更新 curl</h2><p>拷贝解压出来的文件夹中的 <code>curl</code> 目录到 <code>quick-cocos2d-x/external</code>, 替换原来的 <code>curl</code> 目录.</p>
<p>打开 xcode, 编译, 发现有 100 多个错误:</p>
<p><img src="http://static.zybuluo.com/justbilt/6b752pk1bzragqhjgbl2llky/image_1alkfke1vag91ccc1p15179c1jtcm.png" alt="image_1alkfke1vag91ccc1p15179c1jtcm.png-113.9kB"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Undefined symbols for architecture i386:</div><div class="line">  &quot;_ASN1_INTEGER_get&quot;, referenced from:</div><div class="line">      _ossl_connect_common in libcocos2d iOS.a(libcurl_la-openssl.o)</div><div class="line">  &quot;_ASN1_STRING_data&quot;, referenced from:</div><div class="line">      _ossl_connect_common in libcocos2d iOS.a(libcurl_la-openssl.o)</div><div class="line">  &quot;_ASN1_STRING_length&quot;, referenced from:</div><div class="line">      _ossl_connect_common in libcocos2d iOS.a(libcurl_la-openssl.o)</div><div class="line">    ...</div></pre></td></tr></table></figure>
<p>不要惊慌, 这是因为新版本 curl 多了一些静态库, 我们需要引入它们, 在 XCode 项目输找到 <code>cocos2d_lib &gt; external &gt; curl &gt; ios</code> 目录上右键, 选择 <code>Add Files to &#39;cocos2d_lib.xcodeproj&#39;</code>:</p>
<p><img src="http://static.zybuluo.com/justbilt/1c0jehn0zxvrj7u3pf2cugam/image_1alkfv73t446cr3sc41r6r1hqj13.png" alt="image_1alkfv73t446cr3sc41r6r1hqj13.png-238.8kB"></p>
<p>选中 <code>libcrypto.a</code> 和 <code>libssl.a</code>, targets 选择 <code>libcocos2d iOS</code>, 确定, 重新编译, 搞定.</p>
<h2 id="3-更新-websocket"><a href="#3-更新-websocket" class="headerlink" title="3. 更新 websocket"></a>3. 更新 websocket</h2><blockquote>
<p>注: 我们项目并没有用到 websocket , 所以这里只是搞到编译通过, 运行时有木有问题就不到知道了!</p>
</blockquote>
<p>和 curl 类似, 拷贝 cocos2d-x-3rd-party-libs 中的 <code>websockets</code> 目录到 <code>quick-cocos2d-x/external</code>, 替换原来的 <code>websockets</code> 目录.</p>
<p>因为最新版的 websockets api 变化挺大, 所以我们需要使用 cocos <a href="https://github.com/cocos2d/cocos2d-x/tree/v3/cocos/network" target="_blank" rel="external">最新的</a> WebSocket.h 和 WebSocket.cpp 替换 quick-cocos2d-x/cocos/network 中的 <code>WebSocket</code> .</p>
<p>编译, 会有一处错误发生在 <code>WebSocket::WebSocket()</code> 中, 因为 quick 中并没有 <code>Director::EVENT_RESET</code> 消息, 我们注释掉这段代码即可.</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="comment">// reserve data buffer to avoid allocate memory frequently</span></div><div class="line">    _receivedData.reserve(WS_RESERVE_RECEIVE_BUFFER_SIZE);</div><div class="line">    <span class="keyword">if</span> (__websocketInstances == <span class="literal">nullptr</span>)</div><div class="line">    &#123;</div><div class="line">        __websocketInstances = <span class="keyword">new</span> (<span class="built_in">std</span>::nothrow) <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;WebSocket*&gt;();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    __websocketInstances-&gt;push_back(<span class="keyword">this</span>);</div><div class="line">    </div><div class="line"><span class="comment">//    std::shared_ptr&lt;std::atomic&lt;bool&gt;&gt; isDestroyed = _isDestroyed;</span></div><div class="line"><span class="comment">//    _resetDirectorListener = Director::getInstance()-&gt;getEventDispatcher()-&gt;addCustomEventListener(Director::EVENT_RESET, [this, isDestroyed](EventCustom*)&#123;</span></div><div class="line"><span class="comment">//        if (*isDestroyed)</span></div><div class="line"><span class="comment">//            return;</span></div><div class="line"><span class="comment">//        close();</span></div><div class="line"><span class="comment">//    &#125;);</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="三-QUICK-COCOS2D-X-适配-IPV6"><a href="#三-QUICK-COCOS2D-X-适配-IPV6" class="headerlink" title="三. QUICK-COCOS2D-X 适配 IPV6"></a>三. QUICK-COCOS2D-X 适配 IPV6</h1><h2 id="1-如何适配"><a href="#1-如何适配" class="headerlink" title="1. 如何适配"></a>1. 如何适配</h2><p>Quick-Cocos2d-x 中主要是 luasocket 的适配, 适配的方法就是选择性的调用 <code>socket.tcp6()</code> 和 <code>socket.tcp()</code>, udp 也是如此.</p>
<p>Quick-Cocos2d-x 中调创建 socket 是在 <code>SocketTCP:connect</code> 函数中, 并没有预留 ipv6 参数, 我们需要添加一下:</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SocketTCP:connect</span><span class="params">(__host, __port, __retryConnectWhenFailure, __ipv6)</span></span></div><div class="line">    <span class="keyword">if</span> __host <span class="keyword">then</span> self.host = __host <span class="keyword">end</span></div><div class="line">    <span class="keyword">if</span> __port <span class="keyword">then</span> self.port = __port <span class="keyword">end</span></div><div class="line">    <span class="keyword">if</span> __retryConnectWhenFailure ~= <span class="literal">nil</span> <span class="keyword">then</span> self.isRetryConnect = __retryConnectWhenFailure <span class="keyword">end</span></div><div class="line">    <span class="built_in">assert</span>(self.host <span class="keyword">or</span> self.port, <span class="string">"Host and port are necessary!"</span>)</div><div class="line">    <span class="comment">--printInfo("%s.connect(%s, %d)", self.name, self.host, self.port)</span></div><div class="line">    <span class="keyword">if</span> __ipv6 <span class="keyword">then</span></div><div class="line">        self.tcp = socket.tcp6()</div><div class="line">    <span class="keyword">else</span></div><div class="line">        self.tcp = socket.tcp()</div><div class="line">    <span class="keyword">end</span></div><div class="line">    </div><div class="line">    self.tcp:settimeout(<span class="number">0</span>)</div><div class="line">    ...</div></pre></td></tr></table></figure>
<p>然后, 如果要连接 ipv6 的服务器的话, <code>__ipv6</code> 值传 <code>true</code> 即可.</p>
<h2 id="2-如何判断一个服务器是-ipv6-还是-ipv4"><a href="#2-如何判断一个服务器是-ipv6-还是-ipv4" class="headerlink" title="2. 如何判断一个服务器是 ipv6 还是 ipv4"></a>2. 如何判断一个服务器是 ipv6 还是 ipv4</h2><p>lua 中 socket 的 dns 模块提供了一个函数 <code>getaddrinfo</code>, 可以返回一个服务器的 dns 解析结果数组, 其中一个很重要的字段就是 <code>family</code>, 有 <code>inet</code> 和 <code>inet6</code> 两个值可选.</p>
<p>大家可以运行 <code>dump(socket.dns.getaddrinfo(&quot;ipv6-test.com&quot;))</code> 看下结果:</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">- <span class="string">"&lt;var&gt;"</span> = &#123;</div><div class="line">-     <span class="number">1</span> = &#123;</div><div class="line">-         <span class="string">"addr"</span>   = <span class="string">"5.135.165.173"</span></div><div class="line">-         <span class="string">"family"</span> = <span class="string">"inet"</span></div><div class="line">-     &#125;</div><div class="line">-     <span class="number">2</span> = &#123;</div><div class="line">-         <span class="string">"addr"</span>   = <span class="string">"2001:41d0:8:e8ad::1"</span></div><div class="line">-         <span class="string">"family"</span> = <span class="string">"inet6"</span></div><div class="line">-     &#125;</div><div class="line">- &#125;</div></pre></td></tr></table></figure>
<p>我们遍历一下这个结果, 如果其中有 <code>&quot;family&quot; = &quot;inet6&quot;</code> 的解析, 就可以使用 ipv6 进行连接了, 代码实现如下:</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">isSupportIpv6</span><span class="params">(_domain)</span></span></div><div class="line">    <span class="keyword">local</span> result = socket.dns.getaddrinfo(_domain)</div><div class="line">    <span class="keyword">local</span> ipv6 = <span class="literal">false</span></div><div class="line">    <span class="keyword">if</span> result <span class="keyword">then</span></div><div class="line">        <span class="keyword">for</span> k,v <span class="keyword">in</span> <span class="built_in">pairs</span>(result) <span class="keyword">do</span></div><div class="line">            <span class="keyword">if</span> v.family == <span class="string">"inet6"</span> <span class="keyword">then</span></div><div class="line">                ipv6 = <span class="literal">true</span></div><div class="line">                <span class="keyword">break</span></div><div class="line">            <span class="keyword">end</span></div><div class="line">        <span class="keyword">end</span></div><div class="line">    <span class="keyword">end</span></div><div class="line">    <span class="keyword">return</span> ipv6</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>我们将这个函数的结果作为 <code>SocketTCP:connect</code> 的最后一个参数传入即可.</p>
<h1 id="四-还有什么要注意的"><a href="#四-还有什么要注意的" class="headerlink" title="四. 还有什么要注意的"></a>四. 还有什么要注意的</h1><h2 id="1-一定要使用使用域名"><a href="#1-一定要使用使用域名" class="headerlink" title="1. 一定要使用使用域名"></a>1. 一定要使用使用域名</h2><p>向苹果提审的服务器一定要使用域名, 所有的地方都是如此, 包括 http 请求, 热更新返回的 <code>version.md</code> 地址.</p>
<h2 id="2-做好兼容性测试"><a href="#2-做好兼容性测试" class="headerlink" title="2. 做好兼容性测试"></a>2. 做好兼容性测试</h2><p>测试 IPV6 ONLY 的时候使用最新的 iOS 9.3 做测试, 苹果他们审核的时候也是只审核最新的系统是否正常. </p>
<p>但是我们实现的时候要兼容的不同的系统, 网络环境(<code>IPV6 兼容</code> 和 <code>IPV6 ONLY</code>), 因为用户的网络可能是各种各样样, 这些组合都要测试到.</p>
]]></content>
    
    <summary type="html">
    
      你们的游戏适配那啥 VIP6 了么?
    
    </summary>
    
    
      <category term="iOS" scheme="http://blog.justbilt.com/tags/iOS/"/>
    
      <category term="Quick-Cocos2d-x" scheme="http://blog.justbilt.com/tags/Quick-Cocos2d-x/"/>
    
  </entry>
  
  <entry>
    <title>Quick-cocos2d-x 使用静态库加速 iOS 打包</title>
    <link href="http://blog.justbilt.com/2016/05/29/quickx-ios-static-lib/"/>
    <id>http://blog.justbilt.com/2016/05/29/quickx-ios-static-lib/</id>
    <published>2016-05-29T13:20:58.000Z</published>
    <updated>2017-04-23T04:37:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>Quick-Cocos2d-x 项目的 iOS 工程使用 <code>Tgarget Dependencise</code> 依赖 <code>cocos2d_lib</code> 和 <code>cocos_lua_bindings</code> 工程.</p>
<p><img src="http://static.zybuluo.com/justbilt/i0vtatej9k1wx2d9ck8fmqhy/QQ20160529-0.png" alt="QQ20160529-0.png-27kB"></p>
<p>这样子在 iOS Archive 时会重新编译这两个项目, 十分痛苦, 尤其是一次出七八个渠道的包, 好几个小时就耗在里面了.</p>
<p>为什么不用静态库, 编译出 .a , 使用时直接链接就可以了嘛.</p>
<h1 id="一-编译静态库"><a href="#一-编译静态库" class="headerlink" title="一. 编译静态库"></a>一. 编译静态库</h1><p>找了一下, 原来早已经有小伙伴想到了这点, 这篇文章 <a href="http://www.nicnocquee.com/2016/01/20/build-cocos2d-x-fat-static-library.html" target="_blank" rel="external">Build cocos2d-x fat static library</a> 就特别棒. 从中我们可以发现一个特别有用的脚本 <a href="https://gist.github.com/nicnocquee/9dc4c4a128d7c0bafe23#file-buildstaticlib-sh" target="_blank" rel="external">buildstaticlib.sh</a>, 可以直接使用 xcode 工程编译出静态库.</p>
<p>不过这个脚本只能编译出 <code>Release</code> 版, 我修改下可以传入 <code>configuration</code>, 这样我们可以分别编译出 Debug 和 Release 版的静态库啦, 我修改后的<a href="https://gist.github.com/justbilt/903ef34b568527d57c9bd9bf4069ed72" target="_blank" rel="external">文件在这里</a>.</p>
<p>因为我们要编译出多个静态库, 所有又写了另一个脚本 <code>build.sh</code> 调用 <code>buildstaticlib.sh</code> , 内容如下:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">./buildstaticlib.sh <span class="variable">$QUICK_V3_ROOT</span>/cocos/scripting/lua-bindings/proj.ios_mac/cocos2d_lua_bindings.xcodeproj <span class="string">"libluacocos2d iOS"</span> <span class="string">"Release"</span></div><div class="line"></div><div class="line">./buildstaticlib.sh <span class="variable">$QUICK_V3_ROOT</span>/build/cocos2d_libs.xcodeproj <span class="string">"libcocos2d iOS"</span> <span class="string">"Release"</span></div><div class="line"></div><div class="line">./buildstaticlib.sh <span class="variable">$QUICK_V3_ROOT</span>/cocos/scripting/lua-bindings/proj.ios_mac/cocos2d_lua_bindings.xcodeproj <span class="string">"libluacocos2d iOS"</span> <span class="string">"Debug"</span></div><div class="line"></div><div class="line">./buildstaticlib.sh <span class="variable">$QUICK_V3_ROOT</span>/build/cocos2d_libs.xcodeproj <span class="string">"libcocos2d iOS"</span> <span class="string">"Debug"</span></div></pre></td></tr></table></figure>
<p>运行成功后会在当前目录生成 4 个 .a 文件, 下一步中将会用到.<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── build.sh</div><div class="line">├── buildstaticlib.sh</div><div class="line">├── libcocos2d\ iOS-debug.a</div><div class="line">├── libcocos2d\ iOS.a</div><div class="line">├── libluacocos2d\ iOS-debug.a</div><div class="line">└── libluacocos2d\ iOS.a</div></pre></td></tr></table></figure></p>
<h1 id="二-使用静态库"><a href="#二-使用静态库" class="headerlink" title="二. 使用静态库"></a>二. 使用静态库</h1><p>使用 XCode 打开 <code>proj.ios_mac</code> 目录下的 <code>xxx.xcodeproj</code> 工程.</p>
<h2 id="1-移除-Tgarget-Dependencise"><a href="#1-移除-Tgarget-Dependencise" class="headerlink" title="1. 移除 Tgarget Dependencise"></a>1. 移除 Tgarget Dependencise</h2><p>首先移除对 <code>cocos2d_lib</code> 和 <code>cocos_lua_bindings</code> 工程的依赖, 右键点击 <code>Delete</code> 然后选择 <code>Remove reference</code> 就可以.</p>
<p><img src="http://static.zybuluo.com/justbilt/3d9eiua1tind8aycakjwymgl/QQ20160529-1.png" alt="QQ20160529-1.png-49.2kB"></p>
<h2 id="2-添加-Other-Linker-Flags"><a href="#2-添加-Other-Linker-Flags" class="headerlink" title="2. 添加 Other Linker Flags"></a>2. 添加 Other Linker Flags</h2><p>我们静态库的依赖是在这里添加的, 在 Debug 和 Release 选项中分别加入对应的静态库.<br><img src="http://static.zybuluo.com/justbilt/5g1o6ozh1j4dlybcjftfybnr/QQ20160529-3.png" alt="QQ20160529-3.png-117.8kB"></p>
<p>这样就完成啦, 尝试一下 Archive 的速度吧 !</p>
<h1 id="三-其他"><a href="#三-其他" class="headerlink" title="三. 其他"></a>三. 其他</h1><h2 id="1-调试环境与生产环境"><a href="#1-调试环境与生产环境" class="headerlink" title="1. 调试环境与生产环境"></a>1. 调试环境与生产环境</h2><p>我们改成静态库后, 调试 cocos 引擎的代码会多有不便, 而且一旦修改了 cocos 的代码, 就得重新生成静态库, 对于开发阶段太不友好了.</p>
<p>我们的解决方案, 就是再建立一个 debug 工程, 这个工程依旧使用依赖项目的方式编译 cocos , 调试流程和以前一致. 上线打包时则使用我们的静态库版本, 多渠道也做在这个工程中, 享受静态库带来的编译加速.</p>
<p>最终我们的目录结构是这个样子的:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── runtime-src</div><div class="line">│   ├── Classes</div><div class="line">│   ├── proj.android</div><div class="line">│   ├── proj.android_no_anysdk</div><div class="line">│   ├── proj.android_studio</div><div class="line">│   ├── proj.ios_mac</div><div class="line">│   ├── proj.win32</div><div class="line">│   └── proj.wp8-xaml</div><div class="line">└── runtime-src-debug</div><div class="line">    ├── Classes</div><div class="line">    └── proj.ios_mac</div></pre></td></tr></table></figure>
<h2 id="2-生产环境工程瘦身"><a href="#2-生产环境工程瘦身" class="headerlink" title="2. 生产环境工程瘦身"></a>2. 生产环境工程瘦身</h2><p>这一步可有可无, 我的代码洁癖又犯了, 所以顺手改了一下. </p>
<p>这时的生产环境除静态库外的内容和调试环境几乎一致, 然而有一些东西是我们用不到的:</p>
<ol>
<li>mac 平台对应的内容</li>
<li>Classes/runtime 下的内容</li>
</ol>
<p>删除这些时改动了 AppDelegate 中的东西, 这也上一步为什么从 <code>runtimes-src</code> 目录复制了一份.</p>
<h2 id="3-进一步加速编译"><a href="#3-进一步加速编译" class="headerlink" title="3. 进一步加速编译"></a>3. 进一步加速编译</h2><p>这一步我们目前还没有做, 只是一个想法.</p>
<p>修改完使用静态库后, 编译速度得到了很大的提升, 但还没有达到极致, 因为 quick 特有的 c++ 文件还是以文件形式存在于工程中的. 所有 Archive 的时候还是有一百多个源文件需要编译.</p>
<p>如果我们能进一步拆分, 新建一个 lib 工程, 将 quick 的源文件添加和依赖项目添加进去, 我们的游戏只依赖这样的一个静态库, 是否可以达到一个极致的编译速度 ?</p>
<h2 id="4-静态库文件的版本管理"><a href="#4-静态库文件的版本管理" class="headerlink" title="4. 静态库文件的版本管理"></a>4. 静态库文件的版本管理</h2><p>在编译出 debug 版的静态库之前, 我还有想法将这几个静态库压缩上传到 git 上, 编译出 debug 版之后, 我就一个想法, ignore them !</p>
<p>所以我最终的策略 将这几个 .a 在 git 上忽略掉, 同时在那个目录保留了一个编译脚本, 谁要用到 iOS 项目的时候, 发现没有 .a , 自己运行脚本编译一份就可以啦 !</p>
<h2 id="5-编译脚本优化"><a href="#5-编译脚本优化" class="headerlink" title="5. 编译脚本优化 ?"></a>5. 编译脚本优化 ?</h2><p>现在那个编译脚本会编译出一个 <code>fat</code>(armv7 armv7s arm64 i386 x86_64) 版的静态库, 内部实现其实是编译了好多次, 导致现在编译时间非常长.</p>
<p>思考:</p>
<ol>
<li>是否有必要编出 <code>i386 x86_64</code> 版本 ?</li>
<li>看到虾神的一篇文章貌似说可以以 armv7+arm64, i386+x86_64 组合两次打出所有版本.</li>
</ol>
<h2 id="6-最终-Archive-出的包会比使用源文件大"><a href="#6-最终-Archive-出的包会比使用源文件大" class="headerlink" title="6. 最终 Archive 出的包会比使用源文件大 ?"></a>6. 最终 Archive 出的包会比使用源文件大 ?</h2><p>看到网上有过这个说法, 我没有在修改前后分别 Archive 对比包体, 不太严谨. </p>
<p>但和我之前某一次的包相比, 只大了几百KB, 还不太确定是不是与使用静态库有关系, 大家在修改时可以注意对比一下.</p>
]]></content>
    
    <summary type="html">
    
      亲爱的, 打完这个包就回家
    
    </summary>
    
    
      <category term="iOS" scheme="http://blog.justbilt.com/tags/iOS/"/>
    
      <category term="Quick-Cocos2d-x" scheme="http://blog.justbilt.com/tags/Quick-Cocos2d-x/"/>
    
  </entry>
  
  <entry>
    <title>cocos2d-x 优化游戏资源体积</title>
    <link href="http://blog.justbilt.com/2016/05/08/compress-res/"/>
    <id>http://blog.justbilt.com/2016/05/08/compress-res/</id>
    <published>2016-05-08T11:57:07.000Z</published>
    <updated>2017-03-12T01:22:38.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-删除无用资源"><a href="#一-删除无用资源" class="headerlink" title="一. 删除无用资源"></a>一. 删除无用资源</h1><p>在我们版本迭代的过程中, 总有一些图片被废弃掉, 如果当时忘记删除的话, 久而久之也就忘记了. 如果在上线前不做一次整理的话, 它们就会残存在你的资源中, 浪费包的体积.</p>
<p>为避免这种情况, 我们可以做的是:</p>
<h2 id="1-废弃的图片一定要及时删除"><a href="#1-废弃的图片一定要及时删除" class="headerlink" title="1. 废弃的图片一定要及时删除"></a>1. 废弃的图片一定要及时删除</h2><h2 id="2-编写废弃资源查找工具"><a href="#2-编写废弃资源查找工具" class="headerlink" title="2. 编写废弃资源查找工具"></a>2. 编写废弃资源查找工具</h2><p>可以用到的系统命令是 <code>ack</code>, 我们可以通过 <code>brew install ack</code> 安装, 使用的效果:</p>
<p><img src="http://ww2.sinaimg.cn/large/7f870d23gw1f3upxy29uej20iy083gna.jpg" alt=""></p>
<p>关于 ack 的更多用法请<a href="http://beyondgrep.com/documentation/" target="_blank" rel="external">移步这里</a>.</p>
<h1 id="二-使用替代对象"><a href="#二-使用替代对象" class="headerlink" title="二. 使用替代对象"></a>二. 使用替代对象</h1><h2 id="1-使用9图"><a href="#1-使用9图" class="headerlink" title="1. 使用9图"></a>1. 使用9图</h2><p>大家都知道图片在拉伸的过程中会失真, 那么如何避免这个情况呢? 使用9图. </p>
<p><img src="http://ww2.sinaimg.cn/large/7f870d23gw1f3uqafyaevj206t04mjrj.jpg" alt=""></p>
<p>注: 配图来自<a href="http://mux.baidu.com/?p=1506" target="_blank" rel="external">http://mux.baidu.com/?p=1506</a></p>
<p>这样我们就可以将一张很大的图缩小到很小, 然后使用9图拉伸, 起到节省资源的目的. 9图在 cocos 中的对象是 <code>Scale9Sprite</code>, 具体用法可以参考<a href="http://shahdza.blog.51cto.com/2410787/1543284" target="_blank" rel="external">这篇文章</a>.</p>
<h2 id="2-通过修改色调实现资源复用"><a href="#2-通过修改色调实现资源复用" class="headerlink" title="2. 通过修改色调实现资源复用"></a>2. 通过修改色调实现资源复用</h2><p>知乎上有一篇问题讲的就是这个:<br><a href="https://www.zhihu.com/question/31133351" target="_blank" rel="external">拳皇中的人物变色是如何实现的？</a><br><a href="http://daily.zhihu.com/story/4797855" target="_blank" rel="external">知乎日报上的这篇</a></p>
<p><img src="http://ww4.sinaimg.cn/large/7f870d23gw1f3uqjn3tz0j20ig08at9r.jpg" alt=""></p>
<p>cocos2d-x 版由 <a href="https://fusijie.github.io/2015/05/27/sprite-with-hue/" target="_blank" rel="external">@偶尔e网事</a> 大神实现, 对应的对象是 <code>SpriteWithHue</code>, 目前已经默认集成到了 cocos2d-x 中.</p>
<p>这样我们就可以将原来只是色调差异的图片用程序来实现啦~</p>
<h2 id="3-使用平铺"><a href="#3-使用平铺" class="headerlink" title="3. 使用平铺"></a>3. 使用平铺</h2><p><img src="http://ww4.sinaimg.cn/large/7f870d23gw1f3ur1pd7j5j20m8069tbd.jpg" alt=""></p>
<p>注: 配图来自<a href="http://bullteacher.com/7-textures.html" target="_blank" rel="external">http://bullteacher.com/7-textures.html</a></p>
<p>游戏中的有些图片完全可以通过平铺实现, 这样的话我们就可以让美术只出一个平铺单元的图片,在程序中去实现平铺.</p>
<p>首先, 平铺的这个功能是 opengl 层面就支持的, 详情大家可以<a href="http://bullteacher.com/7-textures.html" target="_blank" rel="external">移步这里</a>, cocos2d-x 中实现平铺很简单:</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- 首先, 使用平铺单元图片创建一个精灵</span></div><div class="line"><span class="keyword">local</span> sprite = cc.Sprite:<span class="built_in">create</span>(<span class="string">"your_repeat_image.png"</span>)</div><div class="line"><span class="comment">-- 然后, 设置纹理参数</span></div><div class="line">sprite:getTexture():setTexParameters(gl.LINEAR, gl.LINEAR, gl.REPEAT, gl.REPEAT)</div><div class="line"><span class="comment">-- 最后, 将这个精灵的纹理矩形设置为我们想要的大小</span></div><div class="line">sprite:setTextureRect(cc.rect(<span class="number">0</span>,<span class="number">0</span>,<span class="number">1024</span>,<span class="number">1024</span>))</div></pre></td></tr></table></figure>
<blockquote>
<p>注意:　平铺单元图片的尺寸只能是2的幂</p>
</blockquote>
<h1 id="三-压缩"><a href="#三-压缩" class="headerlink" title="三. 压缩"></a>三. 压缩</h1><h2 id="1-无损压缩"><a href="#1-无损压缩" class="headerlink" title="1. 无损压缩"></a>1. 无损压缩</h2><p>无损压缩还是十分值得推荐的, 它的原理知乎上<a href="https://www.zhihu.com/question/23752454" target="_blank" rel="external">这个答案</a>讲的很清晰, 我节选其中的关键文字:</p>
<blockquote>
<p>1.核心原理很简单，通俗的解释一下，就是由于PNG格式的灵活性，他可以有很多种方式表示同一张图片，不同方式有时就会导致文件大小不一样…<br>2.还有一点是PNG采用的是deflate算法，也非常的灵活，他的压缩率和encoder的实现有关，不同的encoder使用的时间，压缩出来的大小都不一样…<br>3.当然除了上面这两点是真正的无损压缩以外，还有减小PNG文件大小的方式就是去除一些对图片本身没有任何影响的metadata…</p>
</blockquote>
<p>所以无损压缩纯粹是单方面的受益, <strong>是一定要做的</strong>.</p>
<p>我们无损压缩主要用到的工具: <a href="https://imageoptim.com/mac" target="_blank" rel="external">ImageOptim</a></p>
<h2 id="2-有损压缩"><a href="#2-有损压缩" class="headerlink" title="2. 有损压缩"></a>2. 有损压缩</h2><p><img src="http://ww1.sinaimg.cn/large/7f870d23gw1f3uvav83k9j20g707fabp.jpg" alt=""></p>
<p>有损压缩会损失一部分的图片质量, 但带来的受益还是十分可观的. 这是一个抉择的过程, 以最小的代价获取最大的受益, 甚至不能批量处理, 可能需要一张一张的人肉对比压缩.</p>
<p>我们有损压缩主要用到的工具: <a href="http://ppduck.com/" target="_blank" rel="external">PP鸭</a></p>
<h1 id="四-选择正确的图片格式"><a href="#四-选择正确的图片格式" class="headerlink" title="四. 选择正确的图片格式"></a>四. 选择正确的图片格式</h1><h2 id="1-将无-alpha-通道的-png-图片存储为-jpg"><a href="#1-将无-alpha-通道的-png-图片存储为-jpg" class="headerlink" title="1. 将无 alpha 通道的 png 图片存储为 jpg"></a>1. 将无 alpha 通道的 png 图片存储为 jpg</h2><h2 id="2-选用压缩率更高的图片格式"><a href="#2-选用压缩率更高的图片格式" class="headerlink" title="2. 选用压缩率更高的图片格式"></a>2. 选用压缩率更高的图片格式</h2><h1 id="五-其他"><a href="#五-其他" class="headerlink" title="五. 其他"></a>五. 其他</h1><h2 id="1-圆形图片只使用-1-4"><a href="#1-圆形图片只使用-1-4" class="headerlink" title="1. 圆形图片只使用 1/4"></a>1. 圆形图片只使用 1/4</h2><p>然后在程序中翻转3次,得到其他角度的图片. 一般会用在图片尺寸特别大的场景. </p>
<p><img src="http://ww4.sinaimg.cn/large/7f870d23gw1f3uvnfb31aj20hd09v74p.jpg" alt=""></p>
<p>如上图, 我们游戏中一个全屏幕的雷达就是通过这个方案减少图片体积的.</p>
<h2 id="2-缩小图片"><a href="#2-缩小图片" class="headerlink" title="2. 缩小图片"></a>2. 缩小图片</h2><p>将展示精度不强的图片(比如: 游戏背景上的小装饰, 爆炸的序列帧)缩小, 在程序中放大. </p>
<h2 id="3-特殊方案分离png的透明通道"><a href="#3-特殊方案分离png的透明通道" class="headerlink" title="3. 特殊方案分离png的透明通道"></a>3. 特殊方案分离png的透明通道</h2><p><a href="http://www.cocoachina.com/bbs/read.php?tid-201144.html" target="_blank" rel="external">用jpg和黑白色png作为遮罩实现透明</a><br><a href="http://blog.csdn.net/dawn_moon/article/details/8631783" target="_blank" rel="external">用shader使图片背景透明</a><br><a href="http://www.cnblogs.com/elang/p/4104452.html" target="_blank" rel="external">cocos2dx中使用JPG图和只带Alpha的PNG图合成渲染</a></p>
<p>我们之前曾经采取过其中的一个方案, 将一张 png 图片拆分为 jpg+alpha.png 的形式, 整体的包体小了近 25% , 不过也带来的其他的一些副作用.</p>
<p>建议大家使用这类黑科技前一定要做好调研和测试用例, 评估一下实际的收益.</p>
]]></content>
    
    <summary type="html">
    
      优化资源体积是一个旷日持久的战役, 那我们从哪里入手呢? 
    
    </summary>
    
    
      <category term="游戏心得" scheme="http://blog.justbilt.com/tags/%E6%B8%B8%E6%88%8F%E5%BF%83%E5%BE%97/"/>
    
      <category term="优化" scheme="http://blog.justbilt.com/tags/%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
</feed>
